Index: app/src/main/java/com/example/smrpv2/ui/hospital/HospitalFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.smrpv2.ui.hospital;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.content.Intent;\r\nimport android.graphics.Color;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.smrpv2.R;\r\nimport com.example.smrpv2.retrofit.RetrofitService_Server;\r\nimport com.example.smrpv2.ui.common.LocationValue;\r\nimport com.example.smrpv2.model.hospital_model.Response_hos;\r\nimport com.example.smrpv2.retrofit.RetrofitHelper;\r\nimport com.example.smrpv2.ui.pharmacy.RecyclerDecoration;\r\nimport com.example.smrpv2.model.hospital_model.Item;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\nimport com.kakao.kakaonavi.KakaoNaviParams;\r\nimport com.kakao.kakaonavi.KakaoNaviService;\r\nimport com.kakao.kakaonavi.NaviOptions;\r\nimport com.kakao.kakaonavi.options.CoordType;\r\nimport com.kakao.kakaonavi.options.RpOption;\r\nimport com.kakao.kakaonavi.options.VehicleType;\r\n\r\nimport net.daum.mf.map.api.MapCircle;\r\nimport net.daum.mf.map.api.MapPOIItem;\r\nimport net.daum.mf.map.api.MapPoint;\r\nimport net.daum.mf.map.api.MapView;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static java.lang.Thread.sleep;\r\n\r\n/**\r\n *\r\n * HospitalFragment : 병원 찾기\r\n * 아직 제대로 완성 x 다시 고칠 예정\r\n * 병원 목록 불러오는 서버 연결 x\r\n */\r\n\r\npublic class HospitalFragment extends Fragment implements MapView.MapViewEventListener, MapView.POIItemEventListener, MapView.CurrentLocationEventListener {\r\n\r\n    /**\r\n     * int형 변수\r\n     **/\r\n    private int radiuse = 500;\r\n    private int zoomLevel = 3;\r\n    private int select_zoomLevel=1;//줌을 눌렀을 경우\r\n    private static int dealut_zoomLevel=3;//zoomlevel 디폴트값\r\n    int count = 1;\r\n    /**\r\n     * Duble형 변수\r\n     **/\r\n    private double movelatititue = 0.0, movelongitude = 0.0;//지도 움직임 위치\r\n\r\n    private double latitude = 0.0, longitude = 0.0; //사용자 위치\r\n    /**\r\n     * String형 변수\r\n     **/\r\n    private String dgsbjtCd = \"\"; //진료과목\r\n\r\n    /**\r\n     * Boolean형 변수\r\n     * **/\r\n    Boolean toast_state=true;\r\n\r\n\r\n    private RetrofitService_Server retrofit;\r\n    private LocationValue locationValue;\r\n    private HospitalAdapter adapter;\r\n    private PopupHospital popupHospital;\r\n    private static HospitalFragment hospitalFragment;\r\n    private View root;\r\n    private ViewGroup mapViewContainer;\r\n\r\n    private MapView mapView;\r\n    private MapCircle mapCircle;\r\n    private RecyclerView recyclerView;\r\n    private List<Item> list;\r\n    private ArrayList<Item> arr_list;\r\n\r\n    private HashMap<String, String> hash_dgsbjtCd = new HashMap<>();\r\n    private final String TAG = \"TAG\";\r\n\r\n\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             ViewGroup container, Bundle savedInstanceState) {\r\n\r\n\r\n        /*GetLocation_Dialog getLocation_dialog = new GetLocation_Dialog();\r\n        getLocation_dialog.execute();*/\r\n\r\n\r\n        root = inflater.inflate(R.layout.fragment_hospital, container, false);\r\n        /** 진료과목 선택 버튼 **/\r\n        hospitalFragment = this;\r\n\r\n        AlertDialog.Builder alertdialog = new AlertDialog.Builder(getContext());\r\n\r\n\r\n\r\n        /**Mapview객체 위 버튼 객체 선언**/\r\n        FloatingActionButton location_fb = root.findViewById(R.id.mylocationtn);//내 위치\r\n        FloatingActionButton research_fb = root.findViewById(R.id.relocationBtn);//재검색\r\n        Button hos_plusBtn = root.findViewById(R.id.hos_plusBtn); //지도 확대 버튼\r\n        Button hos_minusBtn = root.findViewById(R.id.hos_minusBtn); //지도 축소 버튼\r\n        Button btn_dgsbjtCd = root.findViewById(R.id.dgsbjtCd);\r\n\r\n        recyclerView = root.findViewById(R.id.recycle_view); //recyclerView 객체 선언\r\n        LinearLayoutManager mlinearLayoutManager = new LinearLayoutManager(root.getContext()); // layout 매니저 객체 선언\r\n        recyclerView.setLayoutManager(mlinearLayoutManager);\r\n        recyclerView.setHasFixedSize(true); //리싸이클 뷰 안 아이템들의 크기를 가변적으로 바꿀건지(false) , 일정한 크기를 사용할 것인지(true)\r\n\r\n        arr_list = new ArrayList<>();\r\n\r\n        adapter = new HospitalAdapter(arr_list);\r\n\r\n\r\n        RecyclerDecoration spaceDecoration = new RecyclerDecoration(0);\r\n        recyclerView.addItemDecoration(spaceDecoration);\r\n\r\n\r\n        locationValue = new LocationValue(getActivity());//위치 값을 가져오기 위해 현재 Activity값을 매개 인자로 넘겨준다\r\n        locationValue.startMoule();//GPS나 네트워크를 통한 위치정보값을 가져온다\r\n        allocateLocation(locationValue);// 모듈을 통해 위치정보값을 가져와서 변수값에 저장\r\n\r\n\r\n        Handler handler = new Handler();\r\n        handler.postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                createMapView();//지도 생성\r\n            }\r\n        },500);\r\n\r\n\r\n\r\n        retrofit = RetrofitHelper.getHos().create(RetrofitService_Server.class);\r\n\r\n\r\n        adapter.setOnitemClickListener(new OnHospitalItemClickListener() {\r\n            @Override\r\n            public void onItemClick(HospitalAdapter.ViewHolder holder, View viewm, int position) {\r\n                String lat = list.get(position).getXPos();\r\n                String lon = list.get(position).getYPos();\r\n                mapView.setMapCenterPoint(MapPoint.mapPointWithGeoCoord(Double.parseDouble(lon), Double.parseDouble(lat)), true);\r\n                mapView.setZoomLevel(select_zoomLevel,true);\r\n            }\r\n\r\n            @Override\r\n            public void onCallClick(int position) {\r\n                Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse(\"tel:\" + list.get(position).getTelno()));\r\n                startActivity(intent);\r\n                show(\"통화 연결다이얼로그로 전환합니다.\");\r\n\r\n            }\r\n\r\n\r\n            @Override\r\n            public void onPathClick(int position) {\r\n                if (KakaoNaviService.isKakaoNaviInstalled(getContext())) {\r\n                    show(\"카카오내비에 연결합니다.\");\r\n                    com.kakao.kakaonavi.Location location = com.kakao.kakaonavi.Location.newBuilder(list.get(position).getYadmNm(), Double.parseDouble(list.get(position).getXPos()), Double.parseDouble(list.get(position).getYPos())).build();\r\n                    NaviOptions options = NaviOptions.newBuilder().setCoordType(CoordType.WGS84).setVehicleType(VehicleType.FIRST).setRpOption(RpOption.SHORTEST).build();\r\n                    KakaoNaviParams parms = KakaoNaviParams.newBuilder(location).setNaviOptions(options).build();\r\n                    KakaoNaviService.navigate(getActivity(), parms);\r\n                } else { //카카오 네비게이션 설치가 안되어 있을 경우\r\n                    show(\"구글 스토어에 연결합니다.\");\r\n                    Intent intent = new Intent(Intent.ACTION_VIEW,\r\n                            Uri.parse(\"https://play.google.com/store/apps/details?id=com.locnall.KimGiSa\"));\r\n                    startActivity(intent);\r\n\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n        location_fb.setOnClickListener(new View.OnClickListener() { // 내 위치\r\n            @Override\r\n            public void onClick(View view) {\r\n                movelongitude=0.0;\r\n                movelatititue=0.0;\r\n                locationValue.startMoule();\r\n                allocateLocation(locationValue);\r\n                mapView.removeAllCircles();\r\n                setMapView(latitude,longitude);\r\n                //parsingData(latitude,longitude,radiuse,dgsbjtCd);\r\n\r\n            }\r\n        });\r\n        research_fb.setOnClickListener(new View.OnClickListener() { //지도상 보이는 위치\r\n            @Override\r\n            public void onClick(View view) {\r\n\r\n                if(movelatititue != 0.0 && movelongitude != 0.0){\r\n                    mapView.removeAllCircles();\r\n                    setMapView(movelatititue,movelongitude);\r\n                    //parsingData(movelatititue,movelongitude,radiuse,dgsbjtCd);\r\n                }else{\r\n                    show(\"지도를 움직인 후 다시 클릭해 주세요.\");\r\n                }\r\n            }\r\n        });\r\n\r\n        hos_plusBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if(zoomLevel>0)\r\n                    mapView.setZoomLevel(--zoomLevel,true);\r\n                else\r\n                    show(\"더 이상 축소할 수 없습니다.\");\r\n            }\r\n        });\r\n\r\n        hos_minusBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if(zoomLevel<11)\r\n                    mapView.setZoomLevel(++zoomLevel,true);\r\n                else\r\n                    show(\"더 이상 확대할 수 없습니다.\");\r\n            }\r\n        });\r\n        btn_dgsbjtCd.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                popupHospital = PopupHospital.getInstance();\r\n                popupHospital.show(getActivity().getSupportFragmentManager(),\"진료과목선택\");\r\n            }\r\n        });\r\n        return root;\r\n    }\r\n\r\n    private void parsingData(double latitude, double longitude, int radiuse, final String dgsbjtCd) {\r\n\r\n        /**\r\n         *  병원정보서비스 API와 통신하는 메소드\r\n         *\r\n         **/\r\n\r\n        final double lat = latitude;\r\n        final double lng = longitude;\r\n        final int rad = radiuse;\r\n        final String dgsb = dgsbjtCd;\r\n        Call<Response_hos> call = retrofit.gethosList(latitude, longitude, radiuse, dgsbjtCd);\r\n        call.enqueue(new Callback<Response_hos>() {\r\n            @Override\r\n            public void onResponse(Call<Response_hos> call, Response<Response_hos> response) {\r\n                count = 1;\r\n                Log.d(TAG, \"onResponse.size(): \" + response.body().getResponse().getBody().getItems().getItemsList().size());\r\n                addMarker(response.body().getResponse().getBody().getItems().getItemsList());\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<Response_hos> call, Throwable t) {\r\n                if(count<4){\r\n                    show(\"재시도(\"+count+\"/3)\");\r\n                    Log.d(TAG, \"11111: \"+count);\r\n                    ++count;\r\n                    try {\r\n                        Thread.sleep(1000);\r\n                        parsingData(lat,lng,rad,dgsbjtCd);\r\n\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                }else{\r\n                    count =1;\r\n                    arr_list.clear();\r\n                    adapter.notifyDataSetChanged();\r\n                    show(\"해당지역의 병원이 존재하지 않습니다.\");\r\n                }\r\n\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void addMarker(List<Item>list){\r\n        this.list = list;\r\n        arr_list.clear();\r\n        recyclerView.setAdapter(adapter);\r\n        mapView.removeAllPOIItems();\r\n        int size = list.size();\r\n\r\n        show(\"총 \"+size+\"건이 검색되었습니다.\");\r\n        MapPOIItem marker = new MapPOIItem();\r\n\r\n        for(int i = 0; i < size;i++){\r\n            marker.setItemName(list.get(i).getYadmNm()); //아이콘\r\n            marker.setTag(1);\r\n            marker.setMapPoint(MapPoint.mapPointWithGeoCoord(Double.parseDouble(list.get(i).getYPos()),Double.parseDouble(list.get(i).getXPos())));\r\n            marker.setMarkerType(MapPOIItem.MarkerType.CustomImage);\r\n            marker.setCustomImageResourceId(R.drawable.location_icon);\r\n\r\n            marker.setCustomImageAutoscale(false);\r\n            mapView.addPOIItem(marker);\r\n            arr_list.add(list.get(i));\r\n            adapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n\r\n    private void createMapView() { //MapView 객체 선언과 이벤트 설정하는 클래스\r\n\r\n\r\n        if (mapView == null)  //mapView 객체가 선언되어있지 않을경우\r\n            mapView = new MapView(getContext());\r\n\r\n        if (mapViewContainer != null)\r\n            mapViewContainer.removeAllViews();\r\n        else {\r\n            mapViewContainer = (ViewGroup) root.findViewById(R.id.hos_map_view); // mapViewContainer 선언\r\n            mapViewContainer.addView(mapView);\r\n        }\r\n\r\n\r\n        mapView.setMapViewEventListener(this); //MapView의 Event 처리를 위함\r\n        mapView.setPOIItemEventListener(this); // MapView의 marker 표시를 위함\r\n        mapView.setCurrentLocationEventListener(this); // MapView의 현재위치 리스너\r\n\r\n\r\n        setMapView(latitude, longitude);\r\n\r\n    }\r\n\r\n    private void setMapView(double latitude, double longitude) { //MapView의 인터페이스 설정 클래스\r\n        //중심적 변경\r\n        mapView.setMapCenterPoint(MapPoint.mapPointWithGeoCoord(latitude, longitude), true);// 중심점 변경\r\n\r\n        mapCircle = new MapCircle(MapPoint.mapPointWithGeoCoord(latitude, longitude),radiuse, Color.argb(128,95,0,255),Color.argb(128,186,255,255));//MapCircle(MapPoint center, int radius, int strokeColor, int fillColor)\r\n        mapCircle.setTag(2);\r\n        mapView.addCircle(mapCircle);\r\n\r\n        //줌 레벨 변경\r\n        mapView.setZoomLevel(dealut_zoomLevel, true);\r\n\r\n        // 줌 인\r\n        mapView.zoomIn(true);\r\n        // 줌 아웃\r\n        mapView.zoomOut(true);\r\n        // 트랙\r\n        //mapView.setCurrentLocationTrackingMode(MapView.CurrentLocationTrackingMode.TrackingModeOff); //트래킥 모등 on + 나침반 모드 on:TrackingModeOnWithoutHeading\r\n        parsingData(latitude, longitude, radiuse, dgsbjtCd);\r\n    }\r\n\r\n    public void allocateLocation(LocationValue locationValue) {\r\n        /**\r\n         * 모듈을 통해 위치정보값을 가져와 해당 변수에 값을 저장\r\n         **/\r\n        latitude = locationValue.getLatitude(); //위도\r\n        longitude = locationValue.getLongitude();//경도\r\n    }\r\n\r\n    protected void DgsbjtCd(String select_dgsbjtCd) {\r\n\r\n        dgsbjtCd = getDgsbjtCd(select_dgsbjtCd);\r\n\r\n        if (movelatititue == 0.0 && movelongitude == 0.0) { //지도를 움직이지 않았을때\r\n            parsingData(latitude, longitude, radiuse, dgsbjtCd);\r\n        } else { //지도를 움직였을때\r\n            parsingData(movelatititue, movelongitude, radiuse, dgsbjtCd);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private String getDgsbjtCd(String dgsbjtCd) {\r\n        if (hash_dgsbjtCd.size()==0) {\r\n            hash_dgsbjtCd = new HashMap<>();\r\n            hash_dgsbjtCd.put(\"-전체-\", \"\");\r\n            hash_dgsbjtCd.put(\"가정의학과\", \"23\");\r\n            hash_dgsbjtCd.put(\"일반내과\", \"01\");\r\n            hash_dgsbjtCd.put(\"침구과\", \"85\");\r\n            hash_dgsbjtCd.put(\"외과\", \"04\");\r\n            hash_dgsbjtCd.put(\"성형외과\", \"08\");\r\n            hash_dgsbjtCd.put(\"소아과\", \"11\");\r\n            hash_dgsbjtCd.put(\"이비인후과\", \"13\");\r\n            hash_dgsbjtCd.put(\"안과\", \"12\");\r\n            hash_dgsbjtCd.put(\"정형외과\", \"05\");\r\n            hash_dgsbjtCd.put(\"정신건강의학과\", \"03\");\r\n            hash_dgsbjtCd.put(\"피부과\", \"14\");\r\n            hash_dgsbjtCd.put(\"치과\", \"49\");\r\n            hash_dgsbjtCd.put(\"응급실\", \"24\");\r\n            hash_dgsbjtCd.put(\"한의원\", \"80\");\r\n        }\r\n        String result = hash_dgsbjtCd.get(dgsbjtCd);\r\n        return result;\r\n    }\r\n    public void show(String s){\r\n        if(toast_state)\r\n            Toast.makeText(getContext(),s,Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    @Override\r\n    public void onPOIItemSelected(MapView mapView, MapPOIItem mapPOIItem) {//사용자가 MapView 에 등록된 POI Item 아이콘(마커)를 터치한 경우 호출된다.\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onCalloutBalloonOfPOIItemTouched(MapView mapView, MapPOIItem mapPOIItem) { //사용하지 않은 메소드\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onCalloutBalloonOfPOIItemTouched(MapView mapView, MapPOIItem mapPOIItem, MapPOIItem.CalloutBalloonButtonType calloutBalloonButtonType) {//클릭한 Balloon의 정보를 가져온다.\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onDraggablePOIItemMoved(MapView mapView, MapPOIItem mapPOIItem, MapPoint mapPoint) {\r\n\r\n    }\r\n\r\n    /*f\r\n     *  현재 위치 업데이트(setCurrentLocationEventListener)\r\n     */\r\n    @Override\r\n    public void onCurrentLocationUpdate(MapView mapView, MapPoint mapPoint, float v) { // Tracking 모드가 켜진경우 단말의 현위치 좌표값을 통보받을 수 있다.\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onCurrentLocationDeviceHeadingUpdate(MapView mapView, float v) { //단말의 방향(Heading) 각도값을 통보받을 수 있다.\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onCurrentLocationUpdateFailed(MapView mapView) { //현위치 갱신 작업에 실패한 경우 호출된다.\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onCurrentLocationUpdateCancelled(MapView mapView) {//현위치 트랙킹 기능이 사용자에 의해 취소된 경우 호출된다.\r\n        //처음 현위치를 찾는 동안에 현위치를 찾는 중이라는 Alert Dialog 인터페이스가 사용자에게 노출된다.\r\n        //첫 현위치를 찾기전에 사용자가 취소 버튼을 누른 경우 호출 된다.\r\n    }\r\n\r\n    @Override\r\n    public void onMapViewInitialized(MapView mapView) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onMapViewCenterPointMoved(MapView mapView, MapPoint mapPoint) { //지도 중심 좌표가 이동한 경우 호출 됨.\r\n        movelatititue = mapPoint.getMapPointGeoCoord().latitude;\r\n        movelongitude = mapPoint.getMapPointGeoCoord().longitude;\r\n    }\r\n\r\n    @Override\r\n    public void onMapViewZoomLevelChanged(MapView mapView, int i) { //지도의 레벨이 변경되었을때 호출\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onMapViewSingleTapped(MapView mapView, MapPoint mapPoint) { //사용자가 지도 위 한지점을 터치 한 경우 호출\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onMapViewDoubleTapped(MapView mapView, MapPoint mapPoint) { //사용자가 지도 위 한지점을 연속으로 두번 터치 한 경우 호출\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onMapViewLongPressed(MapView mapView, MapPoint mapPoint) { //사용자가 지도 한 지점을 길게 누른경우\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onMapViewDragStarted(MapView mapView, MapPoint mapPoint) { //사용자가 지도 드래그를 시작한 경우\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onMapViewDragEnded(MapView mapView, MapPoint mapPoint) { //사용자가 지도 드래그를 끝낸 경우\r\n    }\r\n\r\n    @Override\r\n    public void onMapViewMoveFinished(MapView mapView, MapPoint mapPoint) { // 지도의 이동이 완료된 경우\r\n\r\n\r\n    }\r\n    protected static HospitalFragment getInstance(){\r\n        return hospitalFragment;\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/smrpv2/ui/hospital/HospitalFragment.java	(revision 679b44e0dc291b0edd65880b3645c9910e3d538f)
+++ app/src/main/java/com/example/smrpv2/ui/hospital/HospitalFragment.java	(date 1606909302270)
@@ -139,7 +139,15 @@
 
         locationValue = new LocationValue(getActivity());//위치 값을 가져오기 위해 현재 Activity값을 매개 인자로 넘겨준다
         locationValue.startMoule();//GPS나 네트워크를 통한 위치정보값을 가져온다
-        allocateLocation(locationValue);// 모듈을 통해 위치정보값을 가져와서 변수값에 저장
+
+        Handler getGpshandler = new Handler();
+        getGpshandler.postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                allocateLocation(locationValue);// 모듈을 통해 위치정보값을 가져와서 변수값에 저장
+            }
+        },500);
+
 
 
         Handler handler = new Handler();
@@ -148,7 +156,7 @@
             public void run() {
                 createMapView();//지도 생성
             }
-        },500);
+        },600);
 
 
 
Index: app/src/main/java/com/example/smrpv2/ui/alarm/AlarmAllAdd.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.smrpv2.ui.alarm;\r\n\r\nimport android.app.Service;\r\nimport android.content.ComponentName;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.IBinder;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.Nullable;\r\n\r\nimport com.example.smrpv2.model.MedicineAlarmResponDto;\r\nimport com.example.smrpv2.model.user_model.UserInform;\r\nimport com.example.smrpv2.retrofit.RetrofitHelper;\r\nimport com.example.smrpv2.ui.common.SharedData;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class AlarmAllAdd extends Service {\r\n    public AlarmAllAdd() {\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public IBinder onBind(Intent intent) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public ComponentName startService(Intent service) {\r\n        Toast.makeText(this, \"startService\", Toast.LENGTH_SHORT).show();\r\n        return super.startService(service);\r\n    }\r\n\r\n    @Override\r\n    public ComponentName startForegroundService(Intent service) {\r\n        Toast.makeText(this, \"startForegroundService\", Toast.LENGTH_SHORT).show();\r\n        return super.startForegroundService(service);\r\n    }\r\n\r\n    @Override\r\n    public int onStartCommand(Intent intent, int flags, int startId) {\r\n        SharedPreferences sharedPreferences = getApplicationContext().getSharedPreferences(\"user_inform\", Context.MODE_PRIVATE);\r\n        String id = sharedPreferences.getString(\"user_id\",\"\");\r\n        Toast.makeText(this, \"onStartCommand\", Toast.LENGTH_SHORT).show();\r\n        Toast.makeText(this, \"id========>\"+id, Toast.LENGTH_SHORT).show();\r\n        if(!id.equals(\"\")){\r\n            Call<ArrayList<MedicineAlarmResponDto>> call = RetrofitHelper.getRetrofitService_server().getMedicineAlarmAll(id);\r\n            call.enqueue(new Callback<ArrayList<MedicineAlarmResponDto>>() {\r\n                @Override\r\n                public void onResponse(Call<ArrayList<MedicineAlarmResponDto>> call, Response<ArrayList<MedicineAlarmResponDto>> response) {\r\n                    Log.d(\"AlarmAllAdd\", \"onResponse: \"+response.body().size());\r\n                    Toast.makeText(AlarmAllAdd.this, \"size=====>\"+response.body().size(), Toast.LENGTH_SHORT).show();\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<ArrayList<MedicineAlarmResponDto>> call, Throwable t) {\r\n                    Toast.makeText(AlarmAllAdd.this, \"onFailureonFailure\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            });\r\n\r\n        }\r\n        return super.onStartCommand(intent, flags, startId);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/smrpv2/ui/alarm/AlarmAllAdd.java	(revision 679b44e0dc291b0edd65880b3645c9910e3d538f)
+++ app/src/main/java/com/example/smrpv2/ui/alarm/AlarmAllAdd.java	(date 1606896141435)
@@ -34,13 +34,13 @@
 
     @Override
     public ComponentName startService(Intent service) {
-        Toast.makeText(this, "startService", Toast.LENGTH_SHORT).show();
+        //Toast.makeText(this, "startService", Toast.LENGTH_SHORT).show();
         return super.startService(service);
     }
 
     @Override
     public ComponentName startForegroundService(Intent service) {
-        Toast.makeText(this, "startForegroundService", Toast.LENGTH_SHORT).show();
+        //Toast.makeText(this, "startForegroundService", Toast.LENGTH_SHORT).show();
         return super.startForegroundService(service);
     }
 
@@ -56,7 +56,11 @@
                 @Override
                 public void onResponse(Call<ArrayList<MedicineAlarmResponDto>> call, Response<ArrayList<MedicineAlarmResponDto>> response) {
                     Log.d("AlarmAllAdd", "onResponse: "+response.body().size());
-                    Toast.makeText(AlarmAllAdd.this, "size=====>"+response.body().size(), Toast.LENGTH_SHORT).show();
+                    for(int i = 0 ; i < response.body().size();i++){
+                        MedicineAlarmResponDto item = response.body().get(i);
+
+                    }
+
                 }
 
                 @Override
Index: app/src/main/java/com/example/smrpv2/ui/medicine/medshot/KakaoOCRActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.smrpv2.ui.medicine.medshot;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Matrix;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.media.ExifInterface;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport com.example.smrpv2.R;\r\n\r\nimport com.example.smrpv2.ml.ShapeModelVer11;\r\nimport com.example.smrpv2.model.common.KaKaoResult;\r\nimport com.example.smrpv2.model.common.KakaoDto;\r\nimport com.example.smrpv2.model.Message;\r\nimport com.example.smrpv2.retrofit.RetrofitHelper;\r\nimport com.example.smrpv2.retrofit.RetrofitService_Server;\r\n\r\nimport org.checkerframework.checker.nullness.qual.NonNull;\r\nimport org.tensorflow.lite.DataType;\r\nimport org.tensorflow.lite.support.common.FileUtil;\r\nimport org.tensorflow.lite.support.common.TensorProcessor;\r\nimport org.tensorflow.lite.support.common.ops.DequantizeOp;\r\nimport org.tensorflow.lite.support.common.ops.NormalizeOp;\r\nimport org.tensorflow.lite.support.image.ImageProcessor;\r\nimport org.tensorflow.lite.support.image.TensorImage;\r\nimport org.tensorflow.lite.support.image.ops.ResizeOp;\r\nimport org.tensorflow.lite.support.label.TensorLabel;\r\nimport org.tensorflow.lite.support.tensorbuffer.TensorBuffer;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\nimport java.nio.ByteBuffer;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport okhttp3.MediaType;\r\nimport okhttp3.MultipartBody;\r\nimport okhttp3.RequestBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\n\r\n\r\n    public class KakaoOCRActivity extends AppCompatActivity {\r\n        private Bitmap targetBitmap_front, targetBitmap_back;\r\n        Context context;\r\n        TextView textView;\r\n        @Override\r\n        protected void onCreate(Bundle savedInstanceState) {\r\n            super.onCreate(savedInstanceState);\r\n            setContentView(R.layout.activity_kakao_ocr);//activity_search_prescription\r\n\r\n            String frontImg = getIntent().getStringExtra(\"frontImg\");\r\n            String backImg = getIntent().getStringExtra(\"backImg\");\r\n            assert frontImg != null;\r\n            Log.d(\"gggg\", frontImg);\r\n            assert backImg != null;\r\n            Log.d(\"gggg\", backImg);\r\n            String frontImgDate = backImg.substring(0, frontImg.lastIndexOf(\"/\")) + \"/picF.jpg\"; //앞면이미지\r\n            String backImgDate = backImg.substring(0, backImg.lastIndexOf(\"/\")) + \"/picB.jpg\"; //뒷면이미지\r\n\r\n            Log.d(\"TAG\", \"frontImg: \" + frontImgDate);\r\n            Log.d(\"TAG\", \"backImg: \" + backImgDate);\r\n          /*  D/gggg: /storage/emulated/0/Android/data/com.example.smrpv2/files/picF.jpg\r\n            D/gggg: /storage/emulated/0/Android/data/com.example.smrpv2/files/picB.jpg\r\n            D/TAG: frontImg: /storage/emulated/0/Android/data/com.example.smrpv2/files/picF.jpg\r\n            backImg: /storage/emulated/0/Android/data/com.example.smrpv2/files/picB.jpg*/\r\n            context = this;\r\n\r\n            Bitmap rotatedBitmap = null;\r\n\r\n            ImageView imageView = findViewById(R.id.image_front);\r\n\r\n            textView = findViewById(R.id.textView);\r\n\r\n\r\n            try {\r\n                File frontfile = new File(frontImg);\r\n                File backfile = new File(backImg);\r\n\r\n                Bitmap frontbitmap = MediaStore.Images.Media\r\n                        .getBitmap(getContentResolver(), Uri.fromFile(frontfile));\r\n\r\n                Bitmap backbitmap = MediaStore.Images.Media\r\n                        .getBitmap(getContentResolver(), Uri.fromFile(backfile));\r\n\r\n                if (frontbitmap != null) {\r\n                    ExifInterface ei = new ExifInterface(frontImg);\r\n                    int front_orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,\r\n                            ExifInterface.ORIENTATION_UNDEFINED);\r\n                    switch (front_orientation) {\r\n\r\n                        case ExifInterface.ORIENTATION_ROTATE_90:\r\n                            rotatedBitmap = rotateImage(frontbitmap, 90);\r\n                            break;\r\n\r\n                        case ExifInterface.ORIENTATION_ROTATE_180:\r\n                            rotatedBitmap = rotateImage(frontbitmap, 180);\r\n                            break;\r\n\r\n                        case ExifInterface.ORIENTATION_ROTATE_270:\r\n                            rotatedBitmap = rotateImage(frontbitmap, 270);\r\n                            break;\r\n\r\n                        case ExifInterface.ORIENTATION_NORMAL:\r\n                        default:\r\n                            rotatedBitmap = frontbitmap;\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                targetBitmap_front = Bitmap.createBitmap(rotatedBitmap, rotatedBitmap.getWidth() / 2 - 112, rotatedBitmap.getHeight() / 2 - 112, 224, 224);\r\n                imageView.setImageBitmap(targetBitmap_front);\r\n\r\n\r\n                if (backbitmap != null) {\r\n                    ExifInterface ei = new ExifInterface(backImg);\r\n                    int back_orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,\r\n                            ExifInterface.ORIENTATION_UNDEFINED);\r\n                    switch (back_orientation) {\r\n\r\n                        case ExifInterface.ORIENTATION_ROTATE_90:\r\n                            rotatedBitmap = rotateImage(backbitmap, 90);\r\n                            break;\r\n\r\n                        case ExifInterface.ORIENTATION_ROTATE_180:\r\n                            rotatedBitmap = rotateImage(backbitmap, 180);\r\n                            break;\r\n\r\n                        case ExifInterface.ORIENTATION_ROTATE_270:\r\n                            rotatedBitmap = rotateImage(backbitmap, 270);\r\n                            break;\r\n\r\n                        case ExifInterface.ORIENTATION_NORMAL:\r\n                        default:\r\n                            rotatedBitmap = backbitmap;\r\n                    }\r\n\r\n                }\r\n                targetBitmap_back = Bitmap.createBitmap(rotatedBitmap, rotatedBitmap.getWidth() / 2 - 112, rotatedBitmap.getHeight() / 2 - 112, 224, 224);\r\n                Log.d(\"하기전\", frontfile.toString());\r\n                Log.d(\"하기전\", backfile.toString());\r\n                SaveBitmapToFileCache(targetBitmap_front, frontImgDate);\r\n                SaveBitmapToFileCache(targetBitmap_back, backImgDate);\r\n                Log.d(\"한후\", frontfile.toString());\r\n                Log.d(\"한후\", backfile.toString());\r\n\r\n                //카카오 OCR\r\n                sendKakaoOcr(frontfile, backfile);\r\n                sendFile(frontfile, backfile);\r\n                useModel(targetBitmap_front);\r\n            } catch (Exception err) {\r\n                err.printStackTrace();\r\n            }\r\n\r\n\r\n            //  Uploading_bitmap_front(targetBitmap_front);\r\n\r\n        }\r\n\r\n\r\n        private  void useModel(Bitmap targetBitmap_front){\r\n            try {\r\n                ImageProcessor imageProcessor =\r\n                        new ImageProcessor.Builder()\r\n                                .add(new ResizeOp(224, 224, ResizeOp.ResizeMethod.BILINEAR))\r\n                                .build();\r\n\r\n                ShapeModelVer11 model = ShapeModelVer11.newInstance(this);\r\n\r\n\r\n                // Creates inputs for reference.\r\n\r\n                //Drawable drawable = getDrawable(R.drawable.image8);\r\n\r\n               // Bitmap bitmap = ((BitmapDrawable)drawable).getBitmap();\r\n\r\n                ByteBuffer buffer= ByteBuffer.allocate(targetBitmap_front.getByteCount()); //바이트 버퍼를 이미지 사이즈 만큼 선언\r\n\r\n                targetBitmap_front.copyPixelsToBuffer(buffer);//비트맵의 픽셀을 버퍼에 저장\r\n\r\n                //\r\n                TensorBuffer inputI = TensorBuffer.createFixedSize(new int[]{1, 224, 224, 3}, DataType.FLOAT32);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                TensorImage tImage = new TensorImage(DataType.FLOAT32);\r\n\r\n\r\n                tImage.load(targetBitmap_front);\r\n                tImage = imageProcessor.process(tImage);\r\n\r\n\r\n\r\n\r\n\r\n\r\n                TensorProcessor probabilityProcessor =\r\n                        new TensorProcessor.Builder().add(new DequantizeOp(0, 1/255.0f)).build();\r\n\r\n\r\n\r\n\r\n                TensorBuffer inputFeature0 = TensorBuffer.createFixedSize(new int[]{1, 224, 224, 3}, DataType.FLOAT32);\r\n\r\n\r\n\r\n                inputFeature0.loadBuffer(tImage.getBuffer());\r\n                TensorBuffer dequantizedBuffer = probabilityProcessor.process(inputFeature0);\r\n\r\n\r\n\r\n                // Runs model inference and gets result.\r\n                ShapeModelVer11.Outputs outputs = model.process(dequantizedBuffer);\r\n                TensorBuffer probabilityBuffer =\r\n                        TensorBuffer.createFixedSize(new int[]{1, 20}, DataType.FLOAT32);\r\n                probabilityBuffer=outputs.getOutputFeature0AsTensorBuffer();\r\n\r\n                @NonNull float[] floatArray = probabilityBuffer.getFloatArray();\r\n\r\n                float temp =0;\r\n                int idx=0;\r\n                for (int i = 0; i < floatArray.length; i++) {\r\n                    if(floatArray[i]> temp){\r\n                        temp=floatArray[i];\r\n                        idx=i;\r\n                    }\r\n                }\r\n\r\n                Log.d(\"idx:\", idx + \"   \" + temp);\r\n                final String ASSOCIATED_AXIS_LABELS = \"label.txt\";\r\n                List<String> associatedAxisLabels = null;\r\n\r\n                try {\r\n                    associatedAxisLabels = FileUtil.loadLabels(this, ASSOCIATED_AXIS_LABELS);\r\n                } catch (IOException e) {\r\n                    Log.e(\"tfliteSupport\", \"Error reading label file\", e);\r\n                }\r\n                Log.d(\"gg:\", associatedAxisLabels.get(idx) );\r\n                // Releases model resources if no longer used.\r\n\r\n\r\n                TensorProcessor probabilityProcessor1 =\r\n                        new TensorProcessor.Builder().add(new NormalizeOp(0, 20)).build();\r\n\r\n                if (null != associatedAxisLabels) {\r\n                    // Map of labels and their corresponding probability\r\n                    TensorLabel labels = new TensorLabel(associatedAxisLabels,\r\n                            probabilityProcessor1.process(probabilityBuffer));\r\n\r\n                    // Create a map to access the result based on label\r\n                    Map<String, Float> floatMap = labels.getMapWithFloatValue();\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n                model.close();\r\n            } catch (IOException e) {\r\n                // TODO Handle the exception\r\n            }\r\n        }\r\n        private void sendKakaoOcr(File frontfile, File backfile) {\r\n            Log.d(\"TAG\", \"frontfile.getAbsolutePath(): \"+frontfile.getAbsolutePath());\r\n            ///storage/emulated/0/Android/data/com.example.smrpv2/files/picF.jpg\r\n            RequestBody body = RequestBody.create(MediaType.parse(\"image/*\"), frontfile);\r\n            MultipartBody.Part fPart = MultipartBody.Part.createFormData(\"image\", \"front.jpg\", body);\r\n\r\n\r\n            Call<KakaoDto> call = RetrofitHelper.getKaKaoOcr().create(RetrofitService_Server.class).sendKakaoOcr(fPart);\r\n\r\n            call.enqueue(new Callback<KakaoDto>() {\r\n                @Override\r\n                public void onResponse(Call<KakaoDto> call, Response<KakaoDto> response) {\r\n\r\n                    for (int i = 0; i <response.body().getResult().size() ; i++) {\r\n                        KaKaoResult kaKaoResult = response.body().getResult().get(i);\r\n                        for( int j = 0 ; j <kaKaoResult.getRecognition_words().length;j++){\r\n                            Log.d(\"OCR\",kaKaoResult.getRecognition_words()[j]);\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<KakaoDto> call, Throwable t) {\r\n                    Log.d(\"실패카카오\", t.toString());\r\n                }\r\n            });\r\n        }\r\n\r\n        private void sendFile(File frontfile,File backfile){ //구축서버에 이미지 파일 전송\r\n\r\n\r\n            ArrayList<MultipartBody.Part> list = new ArrayList<>();\r\n            RequestBody body = RequestBody.create(MediaType.parse(\"image/*\"), frontfile);\r\n            RequestBody body2 = RequestBody.create(MediaType.parse(\"image/*\"), backfile);\r\n            MultipartBody.Part fPart = MultipartBody.Part.createFormData(\"files\", \"front.jpg\", body);\r\n            MultipartBody.Part bPart = MultipartBody.Part.createFormData(\"files\", \"back.jpg\", body2);\r\n            list.add(fPart);\r\n            list.add(bPart);\r\n\r\n            Call<Message> call = RetrofitHelper.getRetrofitService_server().uploadImage(list);\r\n            call.enqueue(new Callback<Message>() {\r\n                @Override\r\n                public void onResponse(Call<Message> call, Response<Message> response) {\r\n                    Log.d(\"sendFile\", \"성공\");\r\n                    Log.d(\"sendFile\", response.toString());\r\n\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<Message> call, Throwable t) {\r\n                    Log.d(\"sendFile T:\", t.toString());\r\n                }\r\n            });\r\n        }\r\n        private void SaveBitmapToFileCache(Bitmap targetBitmap_front, String frontImgDate) {\r\n\r\n            File fileCacheItem = new File(frontImgDate);\r\n\r\n            OutputStream out = null;\r\n\r\n            try {\r\n                fileCacheItem.createNewFile();\r\n                out = new FileOutputStream(fileCacheItem);\r\n                targetBitmap_front.compress(Bitmap.CompressFormat.JPEG, 100, out);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            } finally {\r\n                try {\r\n                    out.close();\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n    public static Bitmap rotateImage(Bitmap source, float angle) {\r\n        Matrix matrix = new Matrix();\r\n        matrix.postRotate(angle);\r\n        return Bitmap.createBitmap(source, 0, 0, source.getWidth(), source.getHeight(),\r\n                matrix, true);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/smrpv2/ui/medicine/medshot/KakaoOCRActivity.java	(revision 679b44e0dc291b0edd65880b3645c9910e3d538f)
+++ app/src/main/java/com/example/smrpv2/ui/medicine/medshot/KakaoOCRActivity.java	(date 1606910740275)
@@ -58,6 +58,8 @@
         private Bitmap targetBitmap_front, targetBitmap_back;
         Context context;
         TextView textView;
+        Call<KakaoDto> call;
+        StringBuilder ocr_result = new StringBuilder();
         @Override
         protected void onCreate(Bundle savedInstanceState) {
             super.onCreate(savedInstanceState);
@@ -159,8 +161,11 @@
                 Log.d("한후", frontfile.toString());
                 Log.d("한후", backfile.toString());
 
+
                 //카카오 OCR
-                sendKakaoOcr(frontfile, backfile);
+                sendKakaoOcr(frontfile,backfile, true); // 카카오 ocr 서버 전송(앞면 뒷면 사진)
+
+
                 sendFile(frontfile, backfile);
                 useModel(targetBitmap_front);
             } catch (Exception err) {
@@ -173,7 +178,7 @@
         }
 
 
-        private  void useModel(Bitmap targetBitmap_front){
+        private  void useModel(Bitmap targetBitmap_front){ // 이미지 모델추출
             try {
                 ImageProcessor imageProcessor =
                         new ImageProcessor.Builder()
@@ -279,14 +284,20 @@
                 // TODO Handle the exception
             }
         }
-        private void sendKakaoOcr(File frontfile, File backfile) {
-            Log.d("TAG", "frontfile.getAbsolutePath(): "+frontfile.getAbsolutePath());
-            ///storage/emulated/0/Android/data/com.example.smrpv2/files/picF.jpg
-            RequestBody body = RequestBody.create(MediaType.parse("image/*"), frontfile);
-            MultipartBody.Part fPart = MultipartBody.Part.createFormData("image", "front.jpg", body);
+        private void sendKakaoOcr(File frontImage, File backImage, boolean status) {
+            //int count = flag;
+            if(status){
+                RequestBody body = RequestBody.create(MediaType.parse("image/*"), frontImage);
+                ///storage/emulated/0/Android/data/com.example.smrpv2/files/picF.jpg
+                MultipartBody.Part fPart = MultipartBody.Part.createFormData("image", "front.jpg", body);
+                call = RetrofitHelper.getKaKaoOcr().create(RetrofitService_Server.class).sendKakaoOcr(fPart);
+            }else{
+                RequestBody body = RequestBody.create(MediaType.parse("image/*"), backImage);
+                MultipartBody.Part fPart = MultipartBody.Part.createFormData("image", "back.jpg", body);
+                call = RetrofitHelper.getKaKaoOcr().create(RetrofitService_Server.class).sendKakaoOcr(fPart);
 
+            }
 
-            Call<KakaoDto> call = RetrofitHelper.getKaKaoOcr().create(RetrofitService_Server.class).sendKakaoOcr(fPart);
 
             call.enqueue(new Callback<KakaoDto>() {
                 @Override
@@ -296,10 +307,15 @@
                         KaKaoResult kaKaoResult = response.body().getResult().get(i);
                         for( int j = 0 ; j <kaKaoResult.getRecognition_words().length;j++){
                             Log.d("OCR",kaKaoResult.getRecognition_words()[j]);
+                            ocr_result.append(kaKaoResult.getRecognition_words()[j]);
                         }
 
                     }
 
+                    ocr_result.append("/");
+                    if(status){
+                        sendKakaoOcr(frontImage,backImage,false);
+                    }
 
                 }
 
Index: app/src/main/java/com/example/smrpv2/ui/common/LocationValue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.smrpv2.ui.common;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.location.Location;\r\nimport android.location.LocationListener;\r\nimport android.location.LocationManager;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\n\r\npublic class LocationValue {\r\n\r\n    private GPSListener gpsListener = null;\r\n    private double latitude =0.0;\r\n    private double longitude =0.0;\r\n    private Location gps_location = null;\r\n    private Location network_location = null;\r\n    private Activity activity;\r\n\r\n    /**\r\n     *요청하는 activity를 인자로 받아 GPS 모듈과 네트워크 모듈을 이용하여\r\n     * 위치정보값을 가져옴\r\n     */\r\n    public LocationValue(Activity activity){\r\n        this.activity = activity;\r\n    }\r\n    public void startMoule(){ //GPS와 네트워크 모듈을 이용하여 자표값을 얻는다/\r\n        LocationManager lm_1 = (LocationManager) activity.getSystemService(Context.LOCATION_SERVICE); //GPS 모듈을 이용함\r\n        LocationManager lm_2 = (LocationManager) activity.getSystemService(Context.LOCATION_SERVICE); //네트워크 모듈을 이용함\r\n\r\n\r\n        long minTime = 1000;//1000ms ---> 1초\r\n        float minDistance = 10; //10m\r\n        gpsListener = new GPSListener();\r\n        try{\r\n            lm_1.requestLocationUpdates(LocationManager.GPS_PROVIDER,minTime,minDistance,gpsListener); // GPS모듈을 이용하여 위치값 얻음\r\n            lm_2.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,minTime,minDistance,gpsListener); //네트워크를 통해서 위치값을 얻음\r\n\r\n\r\n            gps_location = lm_1.getLastKnownLocation(LocationManager.GPS_PROVIDER); // 네트워크를 통해서 얻는 마지막 위치값\r\n            network_location = lm_2.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);\r\n\r\n            if(gps_location != null){ // GPS 모듈을 동해서 값을 갖지 못한다면\r\n                latitude = gps_location.getLatitude();// GPS 모듈 경도 값 ex) 37.30616958190577\r\n                longitude = gps_location.getLongitude();//GPS 모듈 위도 값 ex) 127.92099856059595\r\n                Log.d(\"TAG\", \"gps_location_latitude: \"+latitude);\r\n                Log.d(\"TAG\", \"gps_location_longitude: \"+longitude);\r\n\r\n            }else{\r\n                latitude = network_location.getLatitude();// GPS 모듈 경도 값 ex) 37.30616958190577\r\n                longitude = network_location.getLongitude();//GPS 모듈 위도 값 ex) 127.92099856059595\r\n                Log.d(\"TAG\", \"network_location_latitude: \"+latitude);\r\n                Log.d(\"TAG\", \"network_location_longitude: \"+longitude);\r\n            }\r\n\r\n            Log.d(\"TAG\", \"latitude1: \"+latitude);\r\n            Log.d(\"TAG\", \"1: \"+longitude);\r\n        }catch(SecurityException e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public Double getLatitude(){\r\n        return latitude;\r\n    } // 위도값을 반환\r\n    public Double getLongitude(){\r\n        return longitude;\r\n    } //경도 값을 반환\r\n\r\n    private class GPSListener implements LocationListener {//위치리너스 클래스\r\n\r\n        @Override\r\n        public void onLocationChanged(Location location) {\r\n            latitude = location.getLatitude();\r\n            longitude = location.getLongitude();\r\n            Log.d(\"TAG\", \"latitude2: \"+latitude);\r\n            Log.d(\"TAG\", \"longitude2: \"+longitude);\r\n        }\r\n\r\n        @Override\r\n        public void onStatusChanged(String provider, int status, Bundle extras) {\r\n\r\n        }//위치 공급자의 상태가 바뀔 때 , 위치 이동이나 시간 경과등이 발생시 호출\r\n\r\n        @Override\r\n        public void onProviderEnabled(String provider) {\r\n\r\n        } //위치 공급자가 사용 가능해질(enabled) 때 호출\r\n\r\n        @Override\r\n        public void onProviderDisabled(String provider) {\r\n\r\n        }//위치 공급자가 사용 불가능해질(disabled) 때 호출\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/smrpv2/ui/common/LocationValue.java	(revision 679b44e0dc291b0edd65880b3645c9910e3d538f)
+++ app/src/main/java/com/example/smrpv2/ui/common/LocationValue.java	(date 1606908343006)
@@ -54,7 +54,7 @@
             }
 
             Log.d("TAG", "latitude1: "+latitude);
-            Log.d("TAG", "1: "+longitude);
+            Log.d("TAG", "longitude1: "+longitude);
         }catch(SecurityException e){
             e.printStackTrace();
         }
Index: app/src/main/java/com/example/smrpv2/ui/alarm/BootReceiver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.smrpv2.ui.alarm;\r\n\r\nimport android.app.Activity;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.os.Build;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.smrpv2.ui.common.SharedData;\r\n\r\npublic class BootReceiver extends BroadcastReceiver {\r\n\r\n\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n        Log.d(\"TAG\", \"onReceive: \"+intent.getAction());\r\n        if(\"android.intent.action.BOOT_COMPLETED\".equals(intent.getAction())){\r\n            Toast.makeText(context, \"bootCompleted\", Toast.LENGTH_SHORT).show();\r\n            Intent bootIntent = new Intent(context,AlarmAllAdd.class);\r\n            if(Build.VERSION.SDK_INT>= Build.VERSION_CODES.O){\r\n                context.startForegroundService(bootIntent);\r\n            }else{\r\n                context.startService(bootIntent);\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/smrpv2/ui/alarm/BootReceiver.java	(revision 679b44e0dc291b0edd65880b3645c9910e3d538f)
+++ app/src/main/java/com/example/smrpv2/ui/alarm/BootReceiver.java	(date 1606892684001)
@@ -17,7 +17,7 @@
     public void onReceive(Context context, Intent intent) {
         Log.d("TAG", "onReceive: "+intent.getAction());
         if("android.intent.action.BOOT_COMPLETED".equals(intent.getAction())){
-            Toast.makeText(context, "bootCompleted", Toast.LENGTH_SHORT).show();
+            //Toast.makeText(context, "bootCompleted", Toast.LENGTH_SHORT).show();
             Intent bootIntent = new Intent(context,AlarmAllAdd.class);
             if(Build.VERSION.SDK_INT>= Build.VERSION_CODES.O){
                 context.startForegroundService(bootIntent);
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildToolsVersion \"30.0.0\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.smrpv2\"\r\n        minSdkVersion 21\r\n        targetSdkVersion 28\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    packagingOptions {\r\n        exclude 'META-INF/LICENSE'\r\n        exclude 'META-INF/NOTICE'\r\n        exclude 'lib/x86_64/darwin/libscrypt.dylib'\r\n        exclude 'lib/x86_64/freebsd/libscrypt.so'\r\n        exclude 'lib/x86_64/linux/libscrypt.so'\r\n    }\r\n    splits {\r\n        abi {\r\n            enable true\r\n            reset()\r\n            include 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'mips', 'mips64', 'arm64-v8a'\r\n            universalApk false\r\n        }\r\n    }\r\n    buildFeatures {\r\n        mlModelBinding true\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation files('libs\\\\libDaumMapAndroid.jar')\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'\r\n\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\r\n    implementation 'org.tensorflow:tensorflow-lite-support:0.1.0-rc1'\r\n    implementation 'org.tensorflow:tensorflow-lite-metadata:0.1.0-rc1'\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\r\n    implementation group: 'com.kakao.sdk', name: 'newtone', version: '6.1.4' //6.0.1 6.1.3\r\n    implementation group: 'com.kakao.sdk', name: 'kakaonavi', version: '1.1.35'\r\n\r\n    //viewPager\r\n    implementation 'me.relex:circleindicator:1.2.2@aar'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'com.google.android.material:material:1.0.0'\r\n    implementation 'androidx.navigation:navigation-fragment:2.1.0'\r\n    implementation 'androidx.navigation:navigation-ui:2.1.0'\r\n    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'\r\n\r\n    // //서버와 데이터 파싱을 위한 라이브러리//\r\n    implementation 'com.squareup.retrofit2:retrofit:2.6.0'\r\n    implementation 'com.google.code.gson:gson:2.8.5'\r\n    implementation 'com.squareup.retrofit2:converter-gson:2.6.0'\r\n    implementation 'com.squareup.retrofit2:converter-simplexml:2.1.0'\r\n\r\n    //Glide 라이브러리//\r\n    implementation 'com.github.bumptech.glide:glide:4.10.0'\r\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.10.0'\r\n\r\n\r\n    //OCR\r\n    implementation 'com.google.api-client:google-api-client-android:1.23.0' exclude module: 'httpclient'\r\n    implementation 'com.google.http-client:google-http-client-gson:1.23.0' exclude module: 'httpclient'\r\n    implementation 'com.google.apis:google-api-services-vision:v1-rev369-1.23.0'\r\n    implementation 'androidx.exifinterface:exifinterface:1.0.0'\r\n    implementation 'com.google.android.gms:play-services:12.0.1'\r\n\r\n    \r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n\r\n\r\n    implementation 'com.github.bumptech.glide:glide:4.10.0'\r\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.10.0'\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 679b44e0dc291b0edd65880b3645c9910e3d538f)
+++ app/build.gradle	(date 1606908080785)
@@ -3,6 +3,10 @@
 android {
     compileSdkVersion 30
     buildToolsVersion "30.0.0"
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
 
     defaultConfig {
         applicationId "com.example.smrpv2"
Index: app/src/main/java/com/example/smrpv2/ui/alarm/AlarmSetActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.smrpv2.ui.alarm;\r\n\r\nimport android.app.AlarmManager;\r\nimport android.app.AlertDialog;\r\nimport android.app.PendingIntent;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.util.SparseBooleanArray;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.ListView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\n//import com.example.smrp.LoginActivity;\r\nimport com.example.smrpv2.R;\r\n//import com.example.smrp.RetrofitHelper;\r\n//import com.example.smrp.RetrofitService;\r\n//import com.example.smrp.medicine.ListViewItem;\r\n//import com.example.smrp.reponse_medicine3;\r\nimport com.example.smrpv2.model.AlarmListDto;\r\nimport com.example.smrpv2.model.DoseTime;\r\nimport com.example.smrpv2.model.MedicineAlarmAskDto;\r\nimport com.example.smrpv2.model.MedicineAlarmResponDto;\r\nimport com.example.smrpv2.model.MedicineItem;\r\nimport com.example.smrpv2.model.Message;\r\nimport com.example.smrpv2.model.SumMedInfo;\r\nimport com.example.smrpv2.model.user_model.UserInform;\r\nimport com.example.smrpv2.retrofit.RetrofitHelper;\r\nimport com.example.smrpv2.ui.medicine.ListViewAdapter;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.GregorianCalendar;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.logging.SimpleFormatter;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\n/**\r\n * AlarmSetActivity : AlarmFragment에서 +버튼 눌렀을 때 알람을 설정하는 액티비티\r\n */\r\n\r\n/**\r\n * AlarmEditActivity와 AlarmSetActivity의 XML을 바꿈으로써 서버에서 바꾸어야하는 부분\r\n * - oneTimeDose()가 원래 EditText로, 숫자와 관련. 근데 xml이 아침, 점심, 저녁의 3가지 버튼으로 바뀜. => 이거에 대한 서버 값 불러와야 할 듯\r\n * - 근데 알람fragment의 알람 리스트에는 oneTimeDose가 숫자로 표기됨. 그래서 임시로 oneTimeDoseCount변수를 만들어 클릭된 거 개수 서버로 보내줌ㅈ => 이것도 바꿀 필요 있어 보임.\r\n */\r\n\r\npublic class AlarmSetActivity extends AppCompatActivity {\r\n\r\n    public static final String NOTIFICATION_CHANNEL_ID = \"10001\";\r\n\r\n\r\n    Context context;\r\n    AlarmManager alarmManager;\r\n    private InputMethodManager imm;\r\n\r\n    ListView Lst_medicine;\r\n    ListViewAdapter alarmListViewAdapter; //알람에 약을 추가한 어댑터\r\n    Button Btn_add, btn_Set_Alarm, btn_before, btn_after;\r\n    Button Btn_morning, Btn_afternoon, Btn_evening, Btn_addDate, Btn_init;\r\n    EditText et_alramName, et_dosingPeriod, et_oneTimeDose;\r\n    ImageView iv_back;\r\n\r\n    String back = \"a\";\r\n    String user_id;\r\n    int count = 0;\r\n    private static int dosingType = 1;\r\n    final int BEFORE_MEAL = 1;\r\n    final int AFTER_MEAL = 0;\r\n    final int AFTERNOON_CHECK = 0;\r\n    final int MORNING_CHECK = 0;\r\n    final int EVENING_CHECK = 0;\r\n\r\n    int oneTimeDoseCount = 0;\r\n    int init_dosingPeriod = -10;\r\n    final int NOT_VALUE = -10;\r\n    ArrayList<MedicineItem> alarmMedicineList = new ArrayList<>(); // 약추가한 리스트\r\n    ArrayList<MedicineItem> list = new ArrayList<>();\r\n    ArrayList<String> array_oneTimeDose = new ArrayList<String>(Arrays.asList(\"아침\", \"점심\", \"저녁\"));\r\n    ArrayList<String> selectedOneTimeDose = new ArrayList<String>();\r\n    private SparseBooleanArray mSelectedItems = new SparseBooleanArray(0);\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == 1) {\r\n            if (resultCode == RESULT_OK) {\r\n                alarmMedicineList.clear(); // 전에 있던 약 리스트 정보를 삭제\r\n                //반환값과 함께 전달받은 리스트뷰로 갱신하기\r\n                alarmMedicineList.addAll((ArrayList<MedicineItem>) data.getSerializableExtra(\"listViewItemArrayList\"));\r\n                alarmListViewAdapter.notifyDataSetChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n    }\r\n\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_alarm_set);\r\n\r\n        this.context = this;\r\n\r\n        //알람초기화\r\n        alarmManager = (AlarmManager) getSystemService(ALARM_SERVICE);\r\n\r\n\r\n        final Calendar calendar = Calendar.getInstance();\r\n\r\n        Intent intent = getIntent();\r\n        SharedPreferences loginInfromation = getSharedPreferences(\"setting\", 0);\r\n        user_id = loginInfromation.getString(\"id\", \"\");\r\n        list = (ArrayList<MedicineItem>) intent.getSerializableExtra(\"list\");\r\n        back = intent.getStringExtra(\"back\");\r\n\r\n        iv_back = findViewById(R.id.iv_back);\r\n        Btn_add = findViewById(R.id.Btn_add);\r\n        btn_before = findViewById(R.id.btn_before);\r\n        btn_after = findViewById(R.id.btn_after);\r\n        btn_Set_Alarm = findViewById(R.id.btn_set_alarm);\r\n        et_alramName = findViewById(R.id.et_alramName);\r\n        et_dosingPeriod = findViewById(R.id.et_dosingPeriod);\r\n        // et_oneTimeDose = findViewById(R.id.et_oneTimeDose);\r\n        Btn_addDate = findViewById(R.id.btn_addDate);\r\n        Btn_init = findViewById(R.id.btn_init);\r\n        Btn_morning = findViewById(R.id.btn_morning);\r\n        Btn_afternoon = findViewById(R.id.btn_afternoon);\r\n        Btn_evening = findViewById(R.id.btn_evening);\r\n\r\n        Lst_medicine = findViewById(R.id.Lst_medicine2);\r\n        imm = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);\r\n\r\n        alarmListViewAdapter = new ListViewAdapter(alarmMedicineList, this, 0); //alarmMedicineList =ArrayList\r\n        Lst_medicine.setAdapter(alarmListViewAdapter);  //Lst_medicine: listView\r\n\r\n        if (back != null) {\r\n            alarmMedicineList = (ArrayList<MedicineItem>) intent.getSerializableExtra(\"listViewItemArrayList\");\r\n            alarmListViewAdapter.notifyDataSetChanged();\r\n        } else {\r\n            if (list != null && list.size() > 0) {\r\n                alarmMedicineList.addAll(list);\r\n                alarmListViewAdapter.notifyDataSetChanged();\r\n            }\r\n\r\n        }\r\n\r\n\r\n        btn_before.setOnClickListener(new View.OnClickListener() {//식전버튼을 눌렀을 때\r\n            @Override\r\n            public void onClick(View view) {\r\n                dosingType = BEFORE_MEAL;\r\n                btn_before.setBackgroundResource(R.drawable.setbtnclick);\r\n                btn_before.setTextColor(Color.WHITE);\r\n                btn_after.setBackgroundResource(R.drawable.setbtn);\r\n                btn_after.setTextColor(Color.BLACK);\r\n\r\n            }\r\n        });\r\n        btn_after.setOnClickListener(new View.OnClickListener() { //식후버튼을 눌렀을 때\r\n            @Override\r\n            public void onClick(View view) {\r\n                dosingType = AFTER_MEAL;\r\n                btn_before.setBackgroundResource(R.drawable.setbtn);\r\n                btn_before.setTextColor(Color.BLACK);\r\n                btn_after.setBackgroundResource(R.drawable.setbtnclick);\r\n                btn_after.setTextColor(Color.WHITE);\r\n\r\n            }\r\n        });\r\n\r\n        Btn_evening.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                checkSelectedOneTimeDose(2, selectedOneTimeDose, Btn_evening);\r\n\r\n            }\r\n        });\r\n        Btn_afternoon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                checkSelectedOneTimeDose(1, selectedOneTimeDose, Btn_afternoon);\r\n            }\r\n        });\r\n\r\n        Btn_morning.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                checkSelectedOneTimeDose(0, selectedOneTimeDose, Btn_morning);\r\n            }\r\n        });\r\n        Btn_init.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (init_dosingPeriod == NOT_VALUE)\r\n                    et_dosingPeriod.setText(String.valueOf(0));\r\n                else\r\n                    et_dosingPeriod.setText(String.valueOf(init_dosingPeriod));\r\n            }\r\n        });\r\n        Btn_addDate.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                int dosingPeriod;\r\n\r\n                if (init_dosingPeriod == NOT_VALUE) {\r\n                    dosingPeriod = 0;\r\n                    init_dosingPeriod = dosingPeriod;\r\n                } else dosingPeriod = Integer.parseInt(et_dosingPeriod.getText().toString()) + 1;\r\n                et_dosingPeriod.setText(String.valueOf(dosingPeriod));\r\n\r\n\r\n            }\r\n        });\r\n\r\n\r\n        iv_back.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n        });\r\n        Btn_add.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                showAlertDialog();\r\n            }\r\n        });\r\n\r\n        btn_Set_Alarm.setOnClickListener(new View.OnClickListener() {//알람설정을 누른경우\r\n            @Override\r\n            public void onClick(View v) { // 알람설정\r\n\r\n\r\n                if (et_alramName.getText().toString().equals(\"\") || et_dosingPeriod.getText().toString().equals(\"\")\r\n                ) {\r\n                    Toast.makeText(context, \"모두 입력해 주세요 .\", Toast.LENGTH_SHORT).show();\r\n                } else {\r\n                    ArrayList<String> temp = new ArrayList<String>(); //일련번호 리스트를 만드는과정\r\n                    for (MedicineItem i : alarmMedicineList) {\r\n                        temp.add(i.getItemSeq());\r\n                    }\r\n                    if (temp.size() == 0) {\r\n                        Toast.makeText(context, \"약을 등록해 주세요.\", Toast.LENGTH_SHORT).show();\r\n                    } else {\r\n                        final ArrayList<Long> registerId = new ArrayList<>();\r\n\r\n                        for (MedicineItem item : alarmMedicineList) {//사용자가 선택한 알람 등록할 약리스트를 다시 list에 담는과정\r\n                            registerId.add(item.getId()); //사용자가 선택한 알람 등록할 약리스트\r\n                        }\r\n                        String alarmName = et_alramName.getText().toString();\r\n                        int dosingPeriod = Integer.parseInt(et_dosingPeriod.getText().toString());\r\n                        //int oneTimeCapacity =oneTimeDoseCount;//Integer.parseInt(et_oneTimeDose.getText().toString());\r\n                        //DosTime 아침 점심 저녁 어떤것인지 판단 하는 로직  DoseTime 에는 Y OR N 가 들어간다.\r\n                        DoseTime doseTime = new DoseTime(\"N\", \"N\", \"N\");\r\n\r\n                        for (String dose : selectedOneTimeDose) {\r\n                            switch (dose) {\r\n                                case \"아침\": {\r\n                                    doseTime.setMorning(\"Y\");\r\n                                    break;\r\n                                }\r\n                                case \"점심\": {\r\n                                    doseTime.setLunch(\"Y\");\r\n                                    break;\r\n                                }\r\n                                case \"저녁\": {\r\n                                    doseTime.setDinner(\"Y\");\r\n                                    break;\r\n                                }\r\n                                default: {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        Log.d(\"dose\", \"아침\" + doseTime.getMorning());\r\n                        Log.d(\"dose\", \"점심\" + doseTime.getLunch());\r\n                        Log.d(\"dose\", \"저녁\" + doseTime.getDinner());\r\n\r\n                        String doseType;\r\n                        if (dosingType == 1) {\r\n                            doseType = \"식전\";\r\n                        } else {\r\n                            doseType = \"식후\";\r\n\r\n                        }\r\n                        final MedicineAlarmAskDto medicineAlarmAskDto = new MedicineAlarmAskDto(0, UserInform.getUserId(), registerId, alarmName, dosingPeriod, null, null, doseTime, doseType);\r\n                        Call<MedicineAlarmResponDto> call = RetrofitHelper.getRetrofitService_server().addMedicineAlarm(medicineAlarmAskDto);\r\n                        call.enqueue(new Callback<MedicineAlarmResponDto>() {\r\n                            @Override\r\n                            public void onResponse(Call<MedicineAlarmResponDto> call, Response<MedicineAlarmResponDto> response) {\r\n\r\n                                MedicineAlarmResponDto medicineAlarmResponDto = response.body();\r\n                                Log.d(\"알람설정중에서\", response.body().getAlarmName());\r\n\r\n                                //알람등록\r\n                                setAlarm(medicineAlarmResponDto);\r\n                                onBackPressed();\r\n\r\n                            }\r\n\r\n                            @Override\r\n                            public void onFailure(Call<MedicineAlarmResponDto> call, Throwable t) {\r\n\r\n                            }\r\n                        });\r\n\r\n\r\n                        /**\r\n                         * 서버\r\n                         */\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n\r\n\r\n    }\r\n\r\n    private void setAlarm(MedicineAlarmResponDto medicineAlarmResponDto) {\r\n        Date currentTime = Calendar.getInstance().getTime();\r\n        GregorianCalendar cal = new GregorianCalendar(Locale.KOREA);\r\n        cal.setTime(currentTime);\r\n\r\n        //식전 7:30  12:00 18:40\r\n        //식후 8:00 13:00  19:40\r\n        String doseType = medicineAlarmResponDto.getDoseType();\r\n        int dosingPeriod = medicineAlarmResponDto.getDosingPeriod();\r\n        DoseTime doseTime = medicineAlarmResponDto.getDoseTime();\r\n        String content = medicineAlarmResponDto.getAlarmName();\r\n        List<AlarmListDto> alarmListList = medicineAlarmResponDto.getAlarmListList();\r\n\r\n\r\n        int count = 0; //알람PK의 수를 세기위함\r\n        if (doseType.equals(\"식전\")) {//식전\r\n            for (int i = 0; i < dosingPeriod; i++) {\r\n                GregorianCalendar temp = cal;\r\n                temp.add(Calendar.DATE, i);\r\n                if (doseTime.getMorning().equals(\"Y\")) {\r\n                    Long id = alarmListList.get(count).getId();\r\n                    PendingIntent pendingIntent = makePendingIntent(Long.valueOf(id).intValue(), content);\r\n\r\n                    temp.set(Calendar.HOUR_OF_DAY, 7);\r\n                    temp.set(Calendar.MINUTE, 30);\r\n                    Log.d(\"time\", cal.getTime().toString());\r\n                    Log.d(\"time2\", temp.getTime().toString());\r\n                    if (!cal.getTime().after(temp.getTime())) {\r\n                        Log.d(\"알람등록\", \"알람등록\");\r\n                        alarmManager.setExact(\r\n                                AlarmManager.RTC_WAKEUP,\r\n                                temp.getTimeInMillis(),\r\n                                pendingIntent\r\n                        );\r\n                    }\r\n                    count++;\r\n                }\r\n                if (doseTime.getLunch().equals(\"Y\")) {\r\n                    Long id = alarmListList.get(count).getId();\r\n                    PendingIntent pendingIntent = makePendingIntent(Long.valueOf(id).intValue(), content);\r\n                    temp.set(Calendar.HOUR_OF_DAY, 12);\r\n                    temp.set(Calendar.MINUTE, 00);\r\n                    Log.d(\"time\", cal.getTime().toString());\r\n                    Log.d(\"time2\", temp.getTime().toString());\r\n\r\n                    if (!cal.getTime().after(temp.getTime())) {\r\n                        Log.d(\"알람등록\", \"알람등록\");\r\n                        alarmManager.setExact(\r\n                                AlarmManager.RTC_WAKEUP,\r\n                                temp.getTimeInMillis(),\r\n                                pendingIntent\r\n                        );\r\n                    }\r\n                    count++;\r\n                }\r\n                if (doseTime.getDinner().equals(\"Y\")) {\r\n                    Long id = alarmListList.get(count).getId();\r\n\r\n                    PendingIntent pendingIntent = makePendingIntent(Long.valueOf(id).intValue(), content);\r\n                    long now = System.currentTimeMillis();\r\n                    Date date = new Date(now);\r\n                    SimpleDateFormat hh_format = new SimpleDateFormat(\"hh\");\r\n                    SimpleDateFormat mm_format = new SimpleDateFormat(\"mm\");\r\n                    Log.d(\"TAG\", \"setAlarm: \"+hh_format.format(date));\r\n                    Log.d(\"TAG\", \"setAlarm: \"+Integer.parseInt(mm_format.format(date)));\r\n                    Log.d(\"TAG\", \"setAlarm: \"+ Integer.parseInt(mm_format.format(date))+5);\r\n                    temp.set(Calendar.HOUR_OF_DAY,22);\r\n                    temp.set(Calendar.MINUTE, 50);\r\n\r\n                   /* temp.set(Calendar.HOUR_OF_DAY,18);\r\n                    temp.set(Calendar.MINUTE, 40);*/\r\n                    Log.d(\"time\", cal.getTime().toString());\r\n                    Log.d(\"time2\", temp.getTime().toString());\r\n\r\n                    if (!cal.getTime().after(temp.getTime())) {\r\n                        Log.d(\"알람등록\", \"알람등록\");\r\n                        alarmManager.setExact(\r\n                                AlarmManager.RTC_WAKEUP,\r\n                                temp.getTimeInMillis(),\r\n                                pendingIntent\r\n                        );\r\n                    }\r\n                    count++;\r\n                }\r\n            }\r\n        } else {//식후\r\n            for (int i = 0; i < dosingPeriod; i++) {\r\n                GregorianCalendar temp = (GregorianCalendar)cal.clone() ;\r\n                temp.add(Calendar.DATE, i);\r\n                if (doseTime.getMorning().equals(\"Y\")) {\r\n                    temp.set(Calendar.HOUR_OF_DAY, 8);\r\n                    temp.set(Calendar.MINUTE, 0);\r\n                    Log.d(\"time\", cal.getTime().toString());\r\n                    Log.d(\"time2\", temp.getTime().toString());\r\n\r\n                    if (!cal.getTime().after(temp.getTime())) {\r\n                        Log.d(\"알람등록\", \"알람등록\");\r\n                        Long id = alarmListList.get(count).getId();\r\n                        PendingIntent pendingIntent = makePendingIntent(Long.valueOf(id).intValue(), content);\r\n                          alarmManager.setExact(\r\n                                AlarmManager.RTC_WAKEUP,\r\n                                temp.getTimeInMillis(),\r\n                                pendingIntent\r\n                        );\r\n                    }\r\n                    count++;\r\n                }\r\n                if (doseTime.getLunch().equals(\"Y\")) {\r\n                    temp.set(Calendar.HOUR_OF_DAY, 13);\r\n                    temp.set(Calendar.MINUTE, 0);\r\n                    Log.d(\"time\", cal.getTime().toString());\r\n                    Log.d(\"time2\", temp.getTime().toString());\r\n\r\n                    if (!cal.getTime().after(temp.getTime())) {\r\n                        Log.d(\"알람등록\", \"알람등록\");\r\n                        Long id = alarmListList.get(count).getId();\r\n                        PendingIntent pendingIntent = makePendingIntent(Long.valueOf(id).intValue(), content);\r\n                        alarmManager.setExact(\r\n                                AlarmManager.RTC_WAKEUP,\r\n                                temp.getTimeInMillis(),\r\n                                pendingIntent\r\n                        );\r\n                    }\r\n                    count++;\r\n\r\n                }\r\n                if (doseTime.getDinner().equals(\"Y\")) {\r\n                    temp.set(Calendar.HOUR_OF_DAY, 17);\r\n                    temp.set(Calendar.MINUTE, 19);\r\n                    Log.d(\"time\", cal.getTime().toString());\r\n                    Log.d(\"time2\", temp.getTime().toString());\r\n\r\n                    if (!cal.getTime().after(temp.getTime())) {//지난 시간 은 등록안하게하기위함\r\n                        Long id = alarmListList.get(count).getId();\r\n                        Log.d(\"알람등록\", \"알람등록\");\r\n                        PendingIntent pendingIntent = makePendingIntent(Long.valueOf(id).intValue(), content);\r\n                        alarmManager.setExact(\r\n                                AlarmManager.RTC_WAKEUP,\r\n                                temp.getTimeInMillis(),\r\n                                pendingIntent\r\n                        );\r\n                    }\r\n                    count++;\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n        Log.d(\"알람\", \"알람등록\");\r\n    }\r\n\r\n    private PendingIntent makePendingIntent(int privateId, String content) {\r\n        Intent aIntent = new Intent(this, AlarmReceiver.class);\r\n        aIntent.putExtra(\"content\", content);\r\n        aIntent.putExtra(\"privateId\", privateId);\r\n        return PendingIntent.getBroadcast(context, privateId, aIntent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n    }\r\n\r\n    private void showAlertDialog() {\r\n\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        LayoutInflater inflater = getLayoutInflater();\r\n        View view = inflater.inflate(R.layout.alarm_med_dialog, null);\r\n        builder.setView(view);\r\n        final ArrayList<MedicineItem> items = new ArrayList<>();\r\n        final AlertDialog dialog = builder.create();\r\n\r\n        ListView Lst_medicine = view.findViewById(R.id.Lst_medicine); //약 추가하기 팝업 창 내가 등록한 약\r\n        final Button Btn_ok = view.findViewById(R.id.Btn_ok);\r\n        final ListViewAdapter adapter = new ListViewAdapter(items, this, -1);\r\n\r\n        Lst_medicine.setAdapter(adapter);\r\n        Btn_ok.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) { // 확인 버튼 누르기(약추가하기 기능에서)\r\n\r\n\r\n                int num = 0;\r\n                Toast.makeText(getApplicationContext(), \"추가 되었습니다.\", Toast.LENGTH_SHORT).show();\r\n\r\n                ArrayList<MedicineItem> list = adapter.res();\r\n                if (alarmMedicineList.size() == 1) {//등록된 약 기능에서 알람추가시 중복제거\r\n\r\n                    for (int i = 0; i < list.size(); i++) {\r\n                        if (alarmMedicineList.get(0).getItemSeq().equals(list.get(i).getItemSeq())) {\r\n                            list.remove(i);\r\n                            num++;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (int i = 0; i < alarmMedicineList.size(); i++) {\r\n                        for (int j = 0; j < list.size(); j++) {\r\n                            if (alarmMedicineList.get(i).getItemSeq().equals(list.get(j).getItemSeq())) {\r\n                                list.remove(j);\r\n                                num++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (num > 0)\r\n                    Toast.makeText(getApplicationContext(), \"중복된 약 \" + num + \"건을 제외하였습니다.\", Toast.LENGTH_SHORT).show();\r\n                alarmMedicineList.addAll(list);\r\n\r\n\r\n                alarmListViewAdapter.notifyDataSetChanged();\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n\r\n        Call<ArrayList<SumMedInfo>> call = RetrofitHelper.getRetrofitService_server().medicineRegs(UserInform.getUserId());\r\n        call.enqueue(new Callback<ArrayList<SumMedInfo>>() {\r\n            @Override\r\n            public void onResponse(Call<ArrayList<SumMedInfo>> call, Response<ArrayList<SumMedInfo>> response) {\r\n                ArrayList<SumMedInfo> med_items = response.body();\r\n\r\n                items.clear();\r\n                for (int i = 0; i < med_items.size(); i++) {\r\n                    items.add(new MedicineItem(med_items.get(i).getId(), med_items.get(i).getImageUrl(), med_items.get(i).getItemName(), med_items.get(i).getItemSeq(), med_items.get(i).getCreatedAt(), med_items.get(i).getEntpName()));\r\n\r\n\r\n                }\r\n                adapter.notifyDataSetChanged();\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<ArrayList<SumMedInfo>> call, Throwable t) {\r\n                t.printStackTrace();\r\n            }\r\n        });\r\n        dialog.show();\r\n    }\r\n\r\n    void checkSelectedOneTimeDose(int position, ArrayList<String> item, Button bt) {\r\n        if (mSelectedItems.get(position, false)) {\r\n            mSelectedItems.put(position, false);\r\n            bt.setBackgroundResource(R.drawable.setbtn);\r\n            bt.setTextColor(Color.BLACK);\r\n\r\n        } else {\r\n            mSelectedItems.put(position, true);\r\n            bt.setBackgroundResource(R.drawable.setbtnclick);\r\n            bt.setTextColor(Color.WHITE);\r\n        }\r\n\r\n        for (int i = 0; i < 3; i++) {\r\n            if (i == 0) {\r\n                item.clear();\r\n                oneTimeDoseCount = 0;\r\n            }\r\n            if (mSelectedItems.get(i, false)) {\r\n                item.add(array_oneTimeDose.get(i));\r\n                Log.e(\"fff\", array_oneTimeDose.get(i));\r\n                oneTimeDoseCount++;\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/smrpv2/ui/alarm/AlarmSetActivity.java	(revision 679b44e0dc291b0edd65880b3645c9910e3d538f)
+++ app/src/main/java/com/example/smrpv2/ui/alarm/AlarmSetActivity.java	(date 1606893629021)
@@ -305,7 +305,7 @@
 
                         }
                         final MedicineAlarmAskDto medicineAlarmAskDto = new MedicineAlarmAskDto(0, UserInform.getUserId(), registerId, alarmName, dosingPeriod, null, null, doseTime, doseType);
-                        Call<MedicineAlarmResponDto> call = RetrofitHelper.getRetrofitService_server().addMedicineAlarm(medicineAlarmAskDto);
+                        Call<MedicineAlarmResponDto> call = RetrofitHelper.getRetrofitService_server().addMedicineAlarm(medicineAlarmAskDto); //서버에 알람등록
                         call.enqueue(new Callback<MedicineAlarmResponDto>() {
                             @Override
                             public void onResponse(Call<MedicineAlarmResponDto> call, Response<MedicineAlarmResponDto> response) {
Index: app/src/main/res/layout/fragment_home.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\"\r\n    android:background=\"#F9F9F9\"\r\n    >\r\n\r\n    <androidx.core.widget.NestedScrollView\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:fillViewport=\"true\">\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:orientation=\"vertical\">\r\n            <View\r\n                android:layout_alignParentTop=\"true\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"1dp\"\r\n                android:layout_marginTop=\"8dp\"\r\n                android:background=\"#989898\"\r\n                />\r\n\r\n            <LinearLayout\r\n\r\n                android:id=\"@+id/date\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"70dp\"\r\n                android:background=\"#ECF1FF\"\r\n                android:orientation=\"horizontal\">\r\n                <TableLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_gravity=\"center\"\r\n                    android:stretchColumns=\"*\"\r\n                    android:gravity=\"center\">\r\n\r\n                    <TableRow>\r\n\r\n                        <TextView\r\n                            android:text=\"확진환자\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:textSize=\"12sp\"\r\n                            android:textColor=\"#FF0404\" />\r\n                        <TextView\r\n                            android:text=\"검사중\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:textSize=\"12sp\"\r\n                            android:textColor=\"#FF9800\" />\r\n                        <TextView\r\n                            android:text=\"격리해제\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:textSize=\"12sp\"\r\n                            android:textColor=\"#0021F8\" />\r\n                        <TextView\r\n                            android:text=\"사망자\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:textSize=\"12sp\"\r\n                            android:textColor=\"#000000\" />\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <View\r\n                            android:layout_alignParentTop=\"true\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"0dp\"\r\n                            android:layout_marginTop=\"5sp\"\r\n                            android:background=\"#989898\"\r\n                            />\r\n                    </TableRow>\r\n                    <TableRow>\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/covidresult_TextView1\"\r\n                            android:text=\"확진환자 수\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:gravity=\"center\"\r\n                            android:textSize=\"16sp\"\r\n                            android:textColor=\"#FF0404\" />\r\n                        <TextView\r\n                            android:id=\"@+id/covidresult_TextView2\"\r\n                            android:text=\"검사중인 수\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:gravity=\"center\"\r\n                            android:textSize=\"16sp\"\r\n                            android:textColor=\"#FF9800\" />\r\n                        <TextView\r\n                            android:id=\"@+id/covidresult_TextView3\"\r\n                            android:text=\"격리해제 수\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:gravity=\"center\"\r\n                            android:textSize=\"16sp\"\r\n                            android:textColor=\"#0021F8\" />\r\n                        <TextView\r\n                            android:id=\"@+id/covidresult_TextView4\"\r\n                            android:text=\"사망자 수\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:gravity=\"center\"\r\n                            android:textSize=\"16sp\"\r\n                            android:textColor=\"#000000\" />\r\n                    </TableRow>\r\n                    <TableRow>\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/gap_TextView1\"\r\n                            android:text=\"확진환자 격차\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:gravity=\"center\"\r\n                            android:textSize=\"8sp\"\r\n                            android:textColor=\"#FF0404\" />\r\n                        <TextView\r\n                            android:id=\"@+id/gap_TextView2\"\r\n                            android:text=\"검사중인 격차\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:gravity=\"center\"\r\n                            android:textSize=\"8sp\"\r\n                            android:textColor=\"#FF9800\" />\r\n                        <TextView\r\n                            android:id=\"@+id/gap_TextView3\"\r\n                            android:text=\"격리해제 격차\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:gravity=\"center\"\r\n                            android:textSize=\"8sp\"\r\n                            android:textColor=\"#0021F8\" />\r\n                        <TextView\r\n                            android:id=\"@+id/gap_TextView4\"\r\n                            android:text=\"사망자 격차\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:gravity=\"center\"\r\n                            android:textSize=\"8sp\"\r\n                            android:textColor=\"#000000\" />\r\n                    </TableRow>\r\n\r\n            </TableLayout>\r\n\r\n\r\n    <!-- <RelativeLayout\r\n         android:layout_width=\"wrap_content\"\r\n         android:layout_height=\"match_parent\"\r\n         android:layout_gravity=\"center\"\r\n         android:gravity=\"right\">\r\n\r\n\r\n\r\n\r\n     </RelativeLayout>-->\r\n            </LinearLayout>\r\n            <View\r\n                android:layout_below=\"@+id/date\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"1dp\"\r\n                android:background=\"#C7C7C7\"\r\n                />\r\n            <LinearLayout\r\n                android:layout_marginTop=\"16dp\"\r\n                android:id=\"@+id/viewP\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:orientation=\"vertical\"\r\n                android:layout_below=\"@+id/date\"\r\n                android:background=\"#F9F9F9\"\r\n\r\n                >\r\n\r\n                <androidx.viewpager.widget.ViewPager\r\n                    android:id=\"@+id/banner\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:background=\"#F9F9F9\"\r\n                    />\r\n\r\n\r\n\r\n            </LinearLayout>\r\n\r\n            <me.relex.circleindicator.CircleIndicator\r\n                android:id=\"@+id/indicator_home\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"7dp\"\r\n                android:layout_below=\"@+id/viewP\"\r\n                android:layout_marginTop=\"7dp\"\r\n\r\n                app:ci_drawable=\"@drawable/indicator_home\"\r\n                app:ci_height=\"5dp\"\r\n                app:ci_margin=\"4dp\"\r\n                app:ci_width=\"5dp\"\r\n                />\r\n\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/vP\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_marginTop=\"10dp\"\r\n                android:layout_below=\"@+id/indicator_home\"\r\n                android:layout_height=\"wrap_content\">\r\n\r\n                <androidx.viewpager.widget.ViewPager\r\n                    android:id=\"@+id/banner2\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_below=\"@+id/Lst_line\"\r\n\r\n                    />\r\n            </LinearLayout>\r\n\r\n            <me.relex.circleindicator.CircleIndicator\r\n                android:id=\"@+id/indicator_home2\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"7dp\"\r\n                android:layout_above=\"@+id/row\"\r\n                android:layout_marginTop=\"4dp\"\r\n                android:layout_marginBottom=\"4dp\"\r\n                app:ci_drawable=\"@drawable/indicator\"\r\n                app:ci_height=\"5dp\"\r\n                app:ci_margin=\"4dp\"\r\n                app:ci_width=\"5dp\"\r\n                />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/row\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"180dp\"\r\n                android:layout_weight=\"4\"\r\n                android:orientation=\"vertical\"\r\n                android:weightSum=\"2\"\r\n                android:layout_below=\"@+id/vP\"\r\n\r\n                >\r\n\r\n                <TextView\r\n                    android:id=\"@+id/Txt_menu\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"11dp\"\r\n                    android:layout_below=\"@+id/banner2\"\r\n                    android:layout_marginTop=\"18dp\"\r\n                    android:layout_marginStart=\"8dp\"\r\n                    android:text=\"추가 메뉴\"\r\n                    android:textColor=\"#3E3E3E\"\r\n                    android:textSize=\"8sp\"\r\n                    android:textStyle=\"bold\" />\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/first_row\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"49dp\"\r\n                    android:layout_below=\"@+id/Txt_menu\"\r\n                    android:layout_marginTop=\"16dp\"\r\n\r\n\r\n                    android:gravity=\"center\"\r\n\r\n                    >\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ic_med_search\"\r\n                        android:layout_width=\"46dp\"\r\n                        android:layout_height=\"48dp\"\r\n\r\n                        android:src=\"@drawable/ic_med_search\" />\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ic_prescription_register\"\r\n                        android:layout_width=\"56dp\"\r\n                        android:layout_height=\"48dp\"\r\n                        android:layout_marginStart=\"15dp\"\r\n                        android:src=\"@drawable/ic_prescription_register\" />\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ic_envelope_register\"\r\n                        android:layout_width=\"56dp\"\r\n                        android:layout_height=\"48dp\"\r\n                        android:layout_marginStart=\"10dp\"\r\n                        android:src=\"@drawable/ic_envelope_register\" />\r\n\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ic_alarm_set\"\r\n                        android:layout_width=\"46dp\"\r\n                        android:layout_height=\"47dp\"\r\n                        android:layout_marginStart=\"20dp\"\r\n                        android:src=\"@drawable/ic_alarm_set\" />\r\n\r\n\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/second_row\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"50dp\"\r\n                    android:layout_marginBottom=\"4dp\"\r\n                    android:layout_marginTop=\"12dp\"\r\n                    android:gravity=\"center\"\r\n\r\n                    >\r\n                    <ImageView\r\n                        android:id=\"@+id/ic_pharmacy_search\"\r\n                        android:layout_width=\"42dp\"\r\n                        android:layout_height=\"48dp\"\r\n\r\n                        android:src=\"@drawable/ic_pharmacy_seach\" />\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ic_hospital_search\"\r\n                        android:layout_width=\"42dp\"\r\n                        android:layout_height=\"49dp\"\r\n                        android:layout_marginStart=\"24dp\"\r\n                        android:src=\"@drawable/ic_hospital_seach\" />\r\n                    <ImageView\r\n                        android:id=\"@+id/ic_register_record\"\r\n                        android:layout_width=\"42dp\"\r\n                        android:layout_height=\"50dp\"\r\n                        android:layout_marginStart=\"28dp\"\r\n                        android:src=\"@drawable/ic_register_record\" />\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ic_dose_record\"\r\n                        android:layout_width=\"46dp\"\r\n                        android:layout_height=\"49dp\"\r\n                        android:layout_marginStart=\"28dp\"\r\n                        android:src=\"@drawable/ic_dose_record\" />\r\n\r\n\r\n\r\n                </LinearLayout>\r\n\r\n            </LinearLayout>\r\n\r\n\r\n\r\n        </RelativeLayout>\r\n\r\n\r\n    </androidx.core.widget.NestedScrollView>\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_home.xml	(revision 679b44e0dc291b0edd65880b3645c9910e3d538f)
+++ app/src/main/res/layout/fragment_home.xml	(date 1606899984057)
@@ -170,7 +170,7 @@
                 android:layout_height="wrap_content"
                 android:orientation="vertical"
                 android:layout_below="@+id/date"
-                android:background="#F9F9F9"
+                android:background="#C7C7C7"
 
                 >
 
Index: app/src/main/res/menu/appbar_action.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\r\n\r\n    <item\r\n        android:id=\"@+id/logout_btn\"\r\n        android:title=\"로그아웃\"\r\n        app:showAsAction=\"always\"/>\r\n</menu>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/appbar_action.xml	(revision 679b44e0dc291b0edd65880b3645c9910e3d538f)
+++ app/src/main/res/menu/appbar_action.xml	(date 1606907852727)
@@ -5,5 +5,6 @@
     <item
         android:id="@+id/logout_btn"
         android:title="로그아웃"
+        android:icon="@drawable/logout_icon2"
         app:showAsAction="always"/>
 </menu>
Index: app/src/main/java/com/example/smrpv2/model/MedicineAlarmResponDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.smrpv2.model;\r\n\r\nimport com.example.smrpv2.model.SumMedInfo;\r\nimport com.google.gson.annotations.SerializedName;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n//유저가 등록란 알람 정보\r\npublic class MedicineAlarmResponDto {\r\n    private Long id;\r\n\r\n    private String userInfo;\r\n\r\n    private ArrayList<SumMedInfo> regMedicineArrayList;\r\n\r\n\r\n    private String alarmName; //약이름\r\n    private int dosingPeriod;\r\n    private String startAlarm;\r\n    private String finishAlarm;\r\n    private DoseTime doseTime;\r\n    private String doseType;\r\n    private List<AlarmListDto> alarmListList;\r\n\r\n    public List<AlarmListDto> getAlarmListList() {\r\n        return alarmListList;\r\n    }\r\n\r\n    public void setAlarmListList(List<AlarmListDto> alarmListList) {\r\n        this.alarmListList = alarmListList;\r\n    }\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getUserInfo() {\r\n        return userInfo;\r\n    }\r\n\r\n    public void setUserInfo(String userInfo) {\r\n        this.userInfo = userInfo;\r\n    }\r\n\r\n    public ArrayList<SumMedInfo> getRegMedicineArrayList() {\r\n        return regMedicineArrayList;\r\n    }\r\n\r\n    public void setRegMedicineArrayList(ArrayList<SumMedInfo> regMedicineArrayList) {\r\n        this.regMedicineArrayList = regMedicineArrayList;\r\n    }\r\n\r\n    public String getAlarmName() {\r\n        return alarmName;\r\n    }\r\n\r\n    public void setAlarmName(String alarmName) {\r\n        this.alarmName = alarmName;\r\n    }\r\n\r\n    public int getDosingPeriod() {\r\n        return dosingPeriod;\r\n    }\r\n\r\n    public void setDosingPeriod(int dosingPeriod) {\r\n        this.dosingPeriod = dosingPeriod;\r\n    }\r\n\r\n    public String getStartAlarm() {\r\n        return startAlarm;\r\n    }\r\n\r\n    public void setStartAlarm(String startAlarm) {\r\n        this.startAlarm = startAlarm;\r\n    }\r\n\r\n    public String getFinishAlarm() {\r\n        return finishAlarm;\r\n    }\r\n\r\n    public void setFinishAlarm(String finishAlarm) {\r\n        this.finishAlarm = finishAlarm;\r\n    }\r\n\r\n    public DoseTime getDoseTime() {\r\n        return doseTime;\r\n    }\r\n\r\n    public void setDoseTime(DoseTime doseTime) {\r\n        this.doseTime = doseTime;\r\n    }\r\n\r\n    public String getDoseType() {\r\n        return doseType;\r\n    }\r\n\r\n    public void setDoseType(String doseType) {\r\n        this.doseType = doseType;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/smrpv2/model/MedicineAlarmResponDto.java	(revision 679b44e0dc291b0edd65880b3645c9910e3d538f)
+++ app/src/main/java/com/example/smrpv2/model/MedicineAlarmResponDto.java	(date 1606894248167)
@@ -16,12 +16,12 @@
 
 
     private String alarmName; //약이름
-    private int dosingPeriod;
-    private String startAlarm;
-    private String finishAlarm;
-    private DoseTime doseTime;
-    private String doseType;
-    private List<AlarmListDto> alarmListList;
+    private int dosingPeriod; //약복용기간
+    private String startAlarm; // 알람 시작 시각
+    private String finishAlarm; //알람 종료 시각
+    private DoseTime doseTime;// 아침 점심 저녁 복용여부
+    private String doseType;// 식전/식후
+    private List<AlarmListDto> alarmListList; //알람들의 아이디,시간,작동여부
 
     public List<AlarmListDto> getAlarmListList() {
         return alarmListList;
