Index: app/src/main/java/com/example/smrpv2/ui/medicine/searchMed/Search_prescriptionActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.smrpv2.ui.medicine.searchMed;\r\n\r\nimport android.app.ProgressDialog;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Bitmap;\r\nimport android.net.Uri;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.Toast;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.FileProvider;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport com.example.smrpv2.R;\r\nimport com.example.smrpv2.model.MedicineItem;\r\nimport com.example.smrpv2.model.Message;\r\nimport com.example.smrpv2.model.RegmedicineAsk;\r\nimport com.example.smrpv2.model.medicine_model.Prescriptionitem;\r\nimport com.example.smrpv2.model.searchMed_model.MedicineInfoRsponDTO;\r\nimport com.example.smrpv2.model.user_model.UserInform;\r\nimport com.example.smrpv2.retrofit.RetrofitHelper;\r\nimport com.example.smrpv2.retrofit.RetrofitService_Server;\r\nimport com.google.api.client.extensions.android.http.AndroidHttp;\r\nimport com.google.api.client.googleapis.json.GoogleJsonResponseException;\r\nimport com.google.api.client.http.HttpTransport;\r\nimport com.google.api.client.json.JsonFactory;\r\nimport com.google.api.client.json.gson.GsonFactory;\r\nimport com.google.api.services.vision.v1.Vision;\r\nimport com.google.api.services.vision.v1.VisionRequest;\r\nimport com.google.api.services.vision.v1.VisionRequestInitializer;\r\nimport com.google.api.services.vision.v1.model.AnnotateImageRequest;\r\nimport com.google.api.services.vision.v1.model.BatchAnnotateImagesRequest;\r\nimport com.google.api.services.vision.v1.model.BatchAnnotateImagesResponse;\r\nimport com.google.api.services.vision.v1.model.EntityAnnotation;\r\nimport com.google.api.services.vision.v1.model.Feature;\r\nimport com.google.api.services.vision.v1.model.Image;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.Serializable;\r\nimport java.lang.ref.WeakReference;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\n/**\r\n *\r\n * 처방전 & 약 봉투 사진 찍고 그 결과 알려주는 Activity\r\n *\r\n */\r\npublic class Search_prescriptionActivity extends AppCompatActivity implements Serializable {\r\n    private static final String CLOUD_VISION_API_KEY = \"AIzaSyDZfaBD1mddJVfGxgrhnUh0Lg02Mfc38KA\";//구글 인증키\r\n    private static final String ANDROID_CERT_HEADER = \"X-Android-Cert\";\r\n    private static final String ANDROID_PACKAGE_HEADER = \"X-Android-Package\";\r\n    private static final int MAX_LABEL_RESULTS = 10;\r\n    private static final int MAX_DIMENSION = 1080;\r\n\r\n    private ArrayList<Prescriptionitem> list;\r\n    private ArrayList<String> itemseq_list;\r\n    private Button Btn_add;\r\n    private ImageView iv_back;\r\n\r\n    private Bitmap bitmap;\r\n    private Uri photoUri;\r\n    private HashMap<Integer, String> select_pill_list; //사용자 선택한 약 정보를 담는 hashmap\r\n    private PrescriptionAdapter prescriptionAdapter;\r\n    private RecyclerView recyclerView;\r\n\r\n    private String id ;\r\n    SharedPreferences sharedPreferences;\r\n    private boolean bool_end = false;\r\n    private RetrofitService_Server retrofitService;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_select_pill);\r\n\r\n        initView();\r\n\r\n        Btn_add.setOnClickListener(new View.OnClickListener() { //추가하기 버튼 누를시\r\n            @Override\r\n            public void onClick(View v) { //추가하기\r\n                if(select_pill_list.size()==0){\r\n                    Toast.makeText(getApplicationContext(),\"약을 선택해 주세요.\", Toast.LENGTH_SHORT).show();\r\n                }else{\r\n                    for(Map.Entry<Integer, String>elem : select_pill_list.entrySet())\r\n                        itemseq_list.add(elem.getValue());\r\n                    /**\r\n                     *\r\n                     * 서버 : 검색된 약 추가하기\r\n                     */\r\n\r\n                    RegmedicineAsk regmedicineAsk = new RegmedicineAsk(UserInform.getUserId(),\"아이템 번호 --> 배열로 바꿔야함\");\r\n                    Call<Message> call = RetrofitHelper.getRetrofitService_server().medicineAdd(regmedicineAsk);\r\n\r\n                    call.enqueue(new Callback<Message>() {\r\n                        @Override\r\n                        public void onResponse(Call<Message> call, Response<Message> response) {\r\n                            if(response.body().getResultCode().equals(\"Ok\")){\r\n                                //정상적으로 반영\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onFailure(Call<Message> call, Throwable t) {\r\n\r\n                        }\r\n                    });\r\n                }\r\n\r\n\r\n            }\r\n        });\r\n        iv_back.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n        });\r\n        prescriptionAdapter.setOnClickListener(new PrescriptionAdapter.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(PrescriptionAdapter.ViewHolder holder, View v, int position) {\r\n\r\n                if(select_pill_list.size()==0){//사용자가 추가한 약 리스트가 없는 경우\r\n                    select_pill_list.put(position,list.get(position).getItemSeq());\r\n\r\n                }else{\r\n                    if(select_pill_list.get(position)==null){ //선택한 약이 hashmap에 없을경우\r\n                        select_pill_list.put(position,list.get(position).getItemSeq());\r\n                    }else{\r\n                        select_pill_list.remove(position);\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n\r\n\r\n\r\n        sendTakePhotoIntent();\r\n\r\n    }\r\n\r\n\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == 672 && resultCode == RESULT_OK) {\r\n\r\n            try {\r\n\r\n                bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), photoUri);\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            Uploading_bitmap(bitmap);\r\n        }else if(resultCode==RESULT_OK){ //팝업창 종료시\r\n            finish();\r\n        }else\r\n            onBackPressed();\r\n    }\r\n    private File createImageFile() throws IOException {\r\n        String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\r\n        String imageFileName = \"TEST_\" + timeStamp + \"_\";\r\n        File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);\r\n        File image = File.createTempFile(\r\n                imageFileName,      /* prefix */\r\n                \".jpg\",         /* suffix */\r\n                storageDir          /* directory */\r\n        );\r\n        return image;\r\n    }\r\n    private void sendTakePhotoIntent() {\r\n        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);// 내장 카메라 켜기\r\n        if (takePictureIntent.resolveActivity(getPackageManager()) != null) {\r\n            File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + \"/Android/data/com.example.smrpv2/files/Pictures\");//Android/data/com.raonstudio.cameratest/files\r\n\r\n            if (!file.exists()) {\r\n                file.mkdir();\r\n            }\r\n\r\n            File photoFile = null;\r\n\r\n            try {\r\n                photoFile = createImageFile();\r\n            } catch (IOException ex) {\r\n\r\n            }\r\n\r\n            if (photoFile != null) {\r\n                photoUri = FileProvider.getUriForFile(this, getPackageName(), photoFile);\r\n\r\n                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);\r\n                startActivityForResult(takePictureIntent, 672);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (Build.VERSION.SDK_INT >= 23) {\r\n            if(grantResults[0]== PackageManager.PERMISSION_GRANTED){\r\n            }\r\n        }\r\n    }\r\n\r\n    private void Uploading_bitmap(Bitmap bitmap){\r\n        if(bitmap != null){\r\n            bitmap = scaleBitmapDown(bitmap,MAX_DIMENSION);\r\n\r\n           // callCloudVision(bitmap);\r\n        }\r\n    }\r\n    private Bitmap scaleBitmapDown(Bitmap bitmap, int maxDimension) {\r\n\r\n        int originalWidth = bitmap.getWidth();\r\n        int originalHeight = bitmap.getHeight();\r\n        int resizedWidth = maxDimension;\r\n        int resizedHeight = maxDimension;\r\n        if (originalHeight > originalWidth) { // 촬영한 사진의 세로길이가 너비보다 크면\r\n            resizedHeight = maxDimension;\r\n            resizedWidth = (int) (resizedHeight * (float) originalWidth / (float) originalHeight);\r\n        } else if (originalWidth > originalHeight) {\r\n            resizedWidth = maxDimension;\r\n            resizedHeight = (int) (resizedWidth * (float) originalHeight / (float) originalWidth);\r\n        } else if (originalHeight == originalWidth) {\r\n            resizedHeight = maxDimension;\r\n            resizedWidth = maxDimension;\r\n        }\r\n        return Bitmap.createScaledBitmap(bitmap, resizedWidth, resizedHeight, false);\r\n    }\r\n\r\n    /*private class LableDetectionTask extends AsyncTask<Object, Void, String> {\r\n        private final WeakReference<Search_prescriptionActivity> mActivityWeakReference;\r\n        private Vision.Images.Annotate mRequest;\r\n        ProgressDialog progressDialog = new ProgressDialog(Search_prescriptionActivity.this);\r\n        LableDetectionTask(Search_prescriptionActivity activity, Vision.Images.Annotate annotate) {\r\n            mActivityWeakReference = new WeakReference<>(activity);\r\n            mRequest = annotate;\r\n        }\r\n        @Override\r\n        protected String doInBackground(Object... params) {\r\n            try {\r\n                BatchAnnotateImagesResponse response = mRequest.execute();\r\n                return convertResponseToString(response);\r\n\r\n            } catch (GoogleJsonResponseException e) {\r\n                Log.d(\"TAG\", \"failed to make API request because \" + e.getContent());\r\n            } catch (IOException e) {\r\n                Log.d(\"TAG\", \"failed to make API request because of other IOException \" +\r\n                        e.getMessage());\r\n            }\r\n\r\n            return \"Cloud Vision API request failed. Check logs for details.\";\r\n        }\r\n        @Override\r\n        protected void onPreExecute() {\r\n            progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);\r\n            progressDialog.setMessage(\"로딩중입니다..\");\r\n            progressDialog.show();\r\n            super.onPreExecute();\r\n        }\r\n        protected void onPostExecute(String result) {\r\n            Search_prescriptionActivity activity = mActivityWeakReference.get();\r\n            if (activity != null && !activity.isFinishing()) {\r\n                List<String> pill_list = new ArrayList();\r\n\r\n                //구글 OCR에서 인식된 문자가 없을 경우 nothing을 반환하기 떄문에 이를 제거\r\n                result = result.replaceAll(\"nothing\",\"\");\r\n                StringTokenizer token = new StringTokenizer(result , \"\\n\");\r\n\r\n\r\n                while(token.hasMoreTokens()){// 구글 Ocr에서 응답 받은 ocr data를 \\n 기준으로 token\r\n                    pill_list.add(token.nextToken());\r\n                }\r\n                if(pill_list.size()==0){\r\n                    progressDialog.dismiss();\r\n                    Intent intent = new Intent(getApplicationContext(), ErrorMessageActivity.class);\r\n                    intent.putExtra(\"data\", \"검색결과가 없습니다.\\n\\n 이전 페이지로 이동합니다.\");\r\n                    startActivityForResult(intent, 1);\r\n\r\n                }else\r\n                    pill_list.remove(pill_list.size() -1);\r\n\r\n\r\n                Log.d(\"TAG\", \"onPostExecute list.size(): \"+pill_list.size());\r\n                //서버에서 STring형 배열로 요청을 받기 떄문에 List를 STring배열로 변환\r\n                String[] result_array = (String[])pill_list.toArray(new String[pill_list.size()]);\r\n\r\n                /*for(String str : result_array)\r\n                    Log.d(\"TAG\", \"result_array: \"+str+\"\\n\");*/\r\n\r\n                //서버와 통신을 하기 위한 RetrofitService_Server 객체 생성성\r\n                /*retrofitService = RetrofitHelper.getRetrofitService_server();\r\n                Call<ArrayList<MedicineInfoRsponDTO>> call= retrofitService.medicinSendList(result_array);\r\n                call.enqueue(new Callback<ArrayList<MedicineInfoRsponDTO>>() {\r\n                    @Override\r\n                    public void onResponse(Call<ArrayList<MedicineInfoRsponDTO>> call, Response<ArrayList<MedicineInfoRsponDTO>> response) {\r\n\r\n                        ArrayList<MedicineInfoRsponDTO> temp_list = response.body();\r\n\r\n\r\n                        for(int i = 0 ; i < temp_list.size(); i++){//서버에서 응답받은 약 리스트에 대해 각각 Prescritionitem 생성자를 생성하고 이를 list에 저장\r\n                            list.add(new Prescriptionitem(\"알약실벽코드\",\"알약 이미지 url\",\"알약 식별포장\",\"알약 제품명\"));\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ArrayList<MedicineInfoRsponDTO>> call, Throwable t) {\r\n                        finish();\r\n                    }\r\n                });*/\r\n                /**\r\n                 *\r\n                 * 서버 : 약품명을 서버에게 요청하기 위한 코드가 들어가야함\r\n                 *\r\n                 */\r\n\r\n\r\n               /* bool_end = true;\r\n\r\n            }\r\n        }\r\n    }*/\r\n    /*private Vision.Images.Annotate prepareAnnotationRequest(final Bitmap bitmap) throws IOException {\r\n        HttpTransport httpTransport = AndroidHttp.newCompatibleTransport();\r\n        JsonFactory jsonFactory = GsonFactory.getDefaultInstance();\r\n\r\n        VisionRequestInitializer requestInitializer =\r\n                new VisionRequestInitializer(CLOUD_VISION_API_KEY) {\r\n                    @Override\r\n                    protected void initializeVisionRequest(VisionRequest<?> visionRequest)\r\n                            throws IOException {\r\n                        super.initializeVisionRequest(visionRequest);\r\n                        String packageName = getPackageName();\r\n                        visionRequest.getRequestHeaders().set(ANDROID_PACKAGE_HEADER, packageName);\r\n                        String sig = PackageManagerUtils.getSignature(getPackageManager(), packageName);\r\n                        visionRequest.getRequestHeaders().set(ANDROID_CERT_HEADER, sig);\r\n                    }\r\n                };\r\n\r\n        Vision.Builder builder = new Vision.Builder(httpTransport, jsonFactory, null);\r\n        builder.setVisionRequestInitializer(requestInitializer);\r\n        Vision vision = builder.build();\r\n        BatchAnnotateImagesRequest batchAnnotateImagesRequest =\r\n                new BatchAnnotateImagesRequest();\r\n        batchAnnotateImagesRequest.setRequests(new ArrayList<AnnotateImageRequest>() {{\r\n            AnnotateImageRequest annotateImageRequest = new AnnotateImageRequest();\r\n            Image base64EncodedImage = new Image();\r\n            // Convert the bitmap to a JPEG\r\n            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 90, byteArrayOutputStream);\r\n            byte[] imageBytes = byteArrayOutputStream.toByteArray();\r\n\r\n            // Base64 encode the JPEG\r\n            base64EncodedImage.encodeContent(imageBytes);\r\n            annotateImageRequest.setImage(base64EncodedImage);\r\n\r\n            // add the features we want\r\n            annotateImageRequest.setFeatures(new ArrayList<Feature>() {{\r\n                Feature labelDetection = new Feature();\r\n                labelDetection.setType(\"TEXT_DETECTION\");\r\n                labelDetection.setMaxResults(MAX_LABEL_RESULTS);\r\n                add(labelDetection);\r\n            }});\r\n\r\n            add(annotateImageRequest);\r\n        }});\r\n\r\n        Vision.Images.Annotate annotateRequest =\r\n                vision.images().annotate(batchAnnotateImagesRequest);\r\n\r\n        annotateRequest.setDisableGZipContent(true);\r\n        return annotateRequest;\r\n    }*/\r\n    /*private void callCloudVision(final Bitmap bitmap) {\r\n        try {\r\n            AsyncTask<Object, Void, String> labelDetectionTask = new LableDetectionTask(this, prepareAnnotationRequest(bitmap));\r\n            labelDetectionTask.execute();\r\n        } catch (IOException e) {\r\n            Log.d(\"TAG\", \"failed to make API request because of other IOException \" +\r\n                    e.getMessage());\r\n        }\r\n    }*/\r\n    private String convertResponseToString(BatchAnnotateImagesResponse response) {\r\n        StringBuilder message = new StringBuilder();\r\n\r\n        List<EntityAnnotation> labels = response.getResponses().get(0).getTextAnnotations();\r\n\r\n        if (labels != null) {\r\n            for (EntityAnnotation label : labels) {\r\n                message.append(String.format(Locale.KOREAN, \"%s\", label.getDescription()));\r\n            }\r\n        } else {\r\n            message.append(\"nothing\");\r\n        }\r\n        return message.toString();\r\n    }\r\n\r\n    private class Dialog extends AsyncTask<Void, Void, Void> {\r\n        ProgressDialog progressDialog1 = new ProgressDialog(Search_prescriptionActivity.this);\r\n        @Override\r\n        protected void onPreExecute() {\r\n            progressDialog1.setProgressStyle(ProgressDialog.STYLE_SPINNER);\r\n            progressDialog1.setMessage(\"로딩중입니다..\");\r\n\r\n            progressDialog1.show();\r\n            super.onPreExecute();\r\n        }\r\n        @Override\r\n        protected Void doInBackground(Void... voids) {\r\n            while(!bool_end)\r\n                ;\r\n            bool_end = false;\r\n            return null;\r\n        }\r\n        @Override\r\n        protected void onPostExecute(Void result) {\r\n            progressDialog1.dismiss();\r\n            super.onPostExecute(result);\r\n        }\r\n        @Override\r\n        protected void onCancelled() {\r\n            super.onCancelled();\r\n        }\r\n    }\r\n\r\n\r\n    private void initView(){\r\n        Btn_add = findViewById(R.id.add_btn);\r\n        iv_back = findViewById(R.id.iv_back);\r\n        select_pill_list = new HashMap<Integer, String>();\r\n        itemseq_list = new ArrayList<String>();\r\n        list = new ArrayList<Prescriptionitem>();\r\n        prescriptionAdapter = new PrescriptionAdapter(list);\r\n        recyclerView = findViewById(R.id.recycler_list);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(getApplicationContext()));\r\n        recyclerView.setAdapter(prescriptionAdapter);\r\n        sharedPreferences = getSharedPreferences(\"setting\",0);\r\n        id = sharedPreferences.getString(\"id\",\"\");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/smrpv2/ui/medicine/searchMed/Search_prescriptionActivity.java	(revision 5be85400d5afaeaad11a07bd0f0a995dc026ffff)
+++ app/src/main/java/com/example/smrpv2/ui/medicine/searchMed/Search_prescriptionActivity.java	(date 1605949141221)
@@ -22,6 +22,8 @@
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 import com.example.smrpv2.R;
+import com.example.smrpv2.model.KaKaoResult;
+import com.example.smrpv2.model.KakaoDto;
 import com.example.smrpv2.model.MedicineItem;
 import com.example.smrpv2.model.Message;
 import com.example.smrpv2.model.RegmedicineAsk;
@@ -59,6 +61,9 @@
 import java.util.Map;
 import java.util.StringTokenizer;
 
+import okhttp3.MediaType;
+import okhttp3.MultipartBody;
+import okhttp3.RequestBody;
 import retrofit2.Call;
 import retrofit2.Callback;
 import retrofit2.Response;
@@ -69,10 +74,6 @@
  *
  */
 public class Search_prescriptionActivity extends AppCompatActivity implements Serializable {
-    private static final String CLOUD_VISION_API_KEY = "AIzaSyDZfaBD1mddJVfGxgrhnUh0Lg02Mfc38KA";//구글 인증키
-    private static final String ANDROID_CERT_HEADER = "X-Android-Cert";
-    private static final String ANDROID_PACKAGE_HEADER = "X-Android-Package";
-    private static final int MAX_LABEL_RESULTS = 10;
     private static final int MAX_DIMENSION = 1080;
 
     private ArrayList<Prescriptionitem> list;
@@ -132,12 +133,13 @@
 
             }
         });
+        
         iv_back.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
                 onBackPressed();
             }
-        });
+        });//뒤로가기
         prescriptionAdapter.setOnClickListener(new PrescriptionAdapter.OnItemClickListener() {
             @Override
             public void onItemClick(PrescriptionAdapter.ViewHolder holder, View v, int position) {
@@ -157,9 +159,6 @@
 
         });
 
-
-
-
         sendTakePhotoIntent();
 
     }
@@ -167,21 +166,24 @@
 
     protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
-        super.onActivityResult(requestCode, resultCode, data);
+
         if (requestCode == 672 && resultCode == RESULT_OK) {
 
             try {
-
+                Log.d("photoUri", "photoUri: "+photoUri);
                 bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), photoUri);
             } catch (IOException e) {
                 e.printStackTrace();
             }
-
             Uploading_bitmap(bitmap);
+
+
         }else if(resultCode==RESULT_OK){ //팝업창 종료시
             finish();
         }else
             onBackPressed();
+
+        super.onActivityResult(requestCode, resultCode, data);
     }
     private File createImageFile() throws IOException {
         String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
@@ -192,12 +194,12 @@
                 ".jpg",         /* suffix */
                 storageDir          /* directory */
         );
-        return image;
+        return image;  //이미를 저장할 File 객체
     }
     private void sendTakePhotoIntent() {
         Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);// 내장 카메라 켜기
         if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
-            File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/com.example.smrpv2/files/Pictures");//Android/data/com.raonstudio.cameratest/files
+            File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/com.example.smrpv2/files/Pictures");
 
             if (!file.exists()) {
                 file.mkdir();
@@ -206,7 +208,7 @@
             File photoFile = null;
 
             try {
-                photoFile = createImageFile();
+                photoFile = createImageFile(); //createImageFile 저장할 이미지 파일 객체
             } catch (IOException ex) {
 
             }
@@ -214,6 +216,7 @@
             if (photoFile != null) {
                 photoUri = FileProvider.getUriForFile(this, getPackageName(), photoFile);
 
+                Log.d("photoUri", "photoUri: "+photoUri);
                 takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);
                 startActivityForResult(takePictureIntent, 672);
             }
@@ -234,9 +237,50 @@
         if(bitmap != null){
             bitmap = scaleBitmapDown(bitmap,MAX_DIMENSION);
 
-           // callCloudVision(bitmap);
+            callKakaoVision();
         }
     }
+
+    private void callKakaoVision(){
+
+
+        File frontfile = new File(String.valueOf(photoUri));
+
+        try {
+            Bitmap frontbitmap = MediaStore.Images.Media
+                    .getBitmap(getContentResolver(), Uri.fromFile(frontfile));
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+
+        RequestBody body = RequestBody.create(MediaType.parse("image/*"), frontfile);
+        MultipartBody.Part fPart = MultipartBody.Part.createFormData("image", "front.jpg", body);
+
+
+        Call<KakaoDto> call = RetrofitHelper.getKaKaoOcr().create(RetrofitService_Server.class).sendKakaoOcr(fPart);
+
+        call.enqueue(new Callback<KakaoDto>() {
+            @Override
+            public void onResponse(Call<KakaoDto> call, Response<KakaoDto> response) {
+
+                for (int i = 0; i <response.body().getResult().size() ; i++) {
+                    KaKaoResult kaKaoResult = response.body().getResult().get(i);
+                    for( int j = 0 ; j <kaKaoResult.getRecognition_words().length;j++){
+                        Log.d("OCR",kaKaoResult.getRecognition_words()[j]);
+                    }
+
+                }
+
+
+            }
+
+            @Override
+            public void onFailure(Call<KakaoDto> call, Throwable t) {
+                Log.d("실패카카오", t.toString());
+            }
+        });
+    }
     private Bitmap scaleBitmapDown(Bitmap bitmap, int maxDimension) {
 
         int originalWidth = bitmap.getWidth();
@@ -256,160 +300,6 @@
         return Bitmap.createScaledBitmap(bitmap, resizedWidth, resizedHeight, false);
     }
 
-    /*private class LableDetectionTask extends AsyncTask<Object, Void, String> {
-        private final WeakReference<Search_prescriptionActivity> mActivityWeakReference;
-        private Vision.Images.Annotate mRequest;
-        ProgressDialog progressDialog = new ProgressDialog(Search_prescriptionActivity.this);
-        LableDetectionTask(Search_prescriptionActivity activity, Vision.Images.Annotate annotate) {
-            mActivityWeakReference = new WeakReference<>(activity);
-            mRequest = annotate;
-        }
-        @Override
-        protected String doInBackground(Object... params) {
-            try {
-                BatchAnnotateImagesResponse response = mRequest.execute();
-                return convertResponseToString(response);
-
-            } catch (GoogleJsonResponseException e) {
-                Log.d("TAG", "failed to make API request because " + e.getContent());
-            } catch (IOException e) {
-                Log.d("TAG", "failed to make API request because of other IOException " +
-                        e.getMessage());
-            }
-
-            return "Cloud Vision API request failed. Check logs for details.";
-        }
-        @Override
-        protected void onPreExecute() {
-            progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
-            progressDialog.setMessage("로딩중입니다..");
-            progressDialog.show();
-            super.onPreExecute();
-        }
-        protected void onPostExecute(String result) {
-            Search_prescriptionActivity activity = mActivityWeakReference.get();
-            if (activity != null && !activity.isFinishing()) {
-                List<String> pill_list = new ArrayList();
-
-                //구글 OCR에서 인식된 문자가 없을 경우 nothing을 반환하기 떄문에 이를 제거
-                result = result.replaceAll("nothing","");
-                StringTokenizer token = new StringTokenizer(result , "\n");
-
-
-                while(token.hasMoreTokens()){// 구글 Ocr에서 응답 받은 ocr data를 \n 기준으로 token
-                    pill_list.add(token.nextToken());
-                }
-                if(pill_list.size()==0){
-                    progressDialog.dismiss();
-                    Intent intent = new Intent(getApplicationContext(), ErrorMessageActivity.class);
-                    intent.putExtra("data", "검색결과가 없습니다.\n\n 이전 페이지로 이동합니다.");
-                    startActivityForResult(intent, 1);
-
-                }else
-                    pill_list.remove(pill_list.size() -1);
-
-
-                Log.d("TAG", "onPostExecute list.size(): "+pill_list.size());
-                //서버에서 STring형 배열로 요청을 받기 떄문에 List를 STring배열로 변환
-                String[] result_array = (String[])pill_list.toArray(new String[pill_list.size()]);
-
-                /*for(String str : result_array)
-                    Log.d("TAG", "result_array: "+str+"\n");*/
-
-                //서버와 통신을 하기 위한 RetrofitService_Server 객체 생성성
-                /*retrofitService = RetrofitHelper.getRetrofitService_server();
-                Call<ArrayList<MedicineInfoRsponDTO>> call= retrofitService.medicinSendList(result_array);
-                call.enqueue(new Callback<ArrayList<MedicineInfoRsponDTO>>() {
-                    @Override
-                    public void onResponse(Call<ArrayList<MedicineInfoRsponDTO>> call, Response<ArrayList<MedicineInfoRsponDTO>> response) {
-
-                        ArrayList<MedicineInfoRsponDTO> temp_list = response.body();
-
-
-                        for(int i = 0 ; i < temp_list.size(); i++){//서버에서 응답받은 약 리스트에 대해 각각 Prescritionitem 생성자를 생성하고 이를 list에 저장
-                            list.add(new Prescriptionitem("알약실벽코드","알약 이미지 url","알약 식별포장","알약 제품명"));
-                        }
-
-
-                    }
-
-                    @Override
-                    public void onFailure(Call<ArrayList<MedicineInfoRsponDTO>> call, Throwable t) {
-                        finish();
-                    }
-                });*/
-                /**
-                 *
-                 * 서버 : 약품명을 서버에게 요청하기 위한 코드가 들어가야함
-                 *
-                 */
-
-
-               /* bool_end = true;
-
-            }
-        }
-    }*/
-    /*private Vision.Images.Annotate prepareAnnotationRequest(final Bitmap bitmap) throws IOException {
-        HttpTransport httpTransport = AndroidHttp.newCompatibleTransport();
-        JsonFactory jsonFactory = GsonFactory.getDefaultInstance();
-
-        VisionRequestInitializer requestInitializer =
-                new VisionRequestInitializer(CLOUD_VISION_API_KEY) {
-                    @Override
-                    protected void initializeVisionRequest(VisionRequest<?> visionRequest)
-                            throws IOException {
-                        super.initializeVisionRequest(visionRequest);
-                        String packageName = getPackageName();
-                        visionRequest.getRequestHeaders().set(ANDROID_PACKAGE_HEADER, packageName);
-                        String sig = PackageManagerUtils.getSignature(getPackageManager(), packageName);
-                        visionRequest.getRequestHeaders().set(ANDROID_CERT_HEADER, sig);
-                    }
-                };
-
-        Vision.Builder builder = new Vision.Builder(httpTransport, jsonFactory, null);
-        builder.setVisionRequestInitializer(requestInitializer);
-        Vision vision = builder.build();
-        BatchAnnotateImagesRequest batchAnnotateImagesRequest =
-                new BatchAnnotateImagesRequest();
-        batchAnnotateImagesRequest.setRequests(new ArrayList<AnnotateImageRequest>() {{
-            AnnotateImageRequest annotateImageRequest = new AnnotateImageRequest();
-            Image base64EncodedImage = new Image();
-            // Convert the bitmap to a JPEG
-            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
-            bitmap.compress(Bitmap.CompressFormat.JPEG, 90, byteArrayOutputStream);
-            byte[] imageBytes = byteArrayOutputStream.toByteArray();
-
-            // Base64 encode the JPEG
-            base64EncodedImage.encodeContent(imageBytes);
-            annotateImageRequest.setImage(base64EncodedImage);
-
-            // add the features we want
-            annotateImageRequest.setFeatures(new ArrayList<Feature>() {{
-                Feature labelDetection = new Feature();
-                labelDetection.setType("TEXT_DETECTION");
-                labelDetection.setMaxResults(MAX_LABEL_RESULTS);
-                add(labelDetection);
-            }});
-
-            add(annotateImageRequest);
-        }});
-
-        Vision.Images.Annotate annotateRequest =
-                vision.images().annotate(batchAnnotateImagesRequest);
-
-        annotateRequest.setDisableGZipContent(true);
-        return annotateRequest;
-    }*/
-    /*private void callCloudVision(final Bitmap bitmap) {
-        try {
-            AsyncTask<Object, Void, String> labelDetectionTask = new LableDetectionTask(this, prepareAnnotationRequest(bitmap));
-            labelDetectionTask.execute();
-        } catch (IOException e) {
-            Log.d("TAG", "failed to make API request because of other IOException " +
-                    e.getMessage());
-        }
-    }*/
     private String convertResponseToString(BatchAnnotateImagesResponse response) {
         StringBuilder message = new StringBuilder();
 
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 5be85400d5afaeaad11a07bd0f0a995dc026ffff)
+++ .idea/gradle.xml	(date 1605846447411)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CMakeSettings\">\r\n    <configurations>\r\n      <configuration PROFILE_NAME=\"Debug\" CONFIG_NAME=\"Debug\" />\r\n    </configurations>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_7\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 5be85400d5afaeaad11a07bd0f0a995dc026ffff)
+++ .idea/misc.xml	(date 1605846682324)
@@ -5,7 +5,7 @@
       <configuration PROFILE_NAME="Debug" CONFIG_NAME="Debug" />
     </configurations>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
