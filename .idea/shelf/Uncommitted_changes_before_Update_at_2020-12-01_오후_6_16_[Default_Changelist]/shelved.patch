Index: app/src/main/java/com/example/smrpv2/ui/alarm/AlarmSetActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.smrpv2.ui.alarm;\r\n\r\nimport android.app.AlarmManager;\r\nimport android.app.AlertDialog;\r\nimport android.app.PendingIntent;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.util.SparseBooleanArray;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.ListView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\n//import com.example.smrp.LoginActivity;\r\nimport com.example.smrpv2.R;\r\n//import com.example.smrp.RetrofitHelper;\r\n//import com.example.smrp.RetrofitService;\r\n//import com.example.smrp.medicine.ListViewItem;\r\n//import com.example.smrp.reponse_medicine3;\r\nimport com.example.smrpv2.model.AlarmListDto;\r\nimport com.example.smrpv2.model.DoseTime;\r\nimport com.example.smrpv2.model.MedicineAlarmAskDto;\r\nimport com.example.smrpv2.model.MedicineAlarmResponDto;\r\nimport com.example.smrpv2.model.MedicineItem;\r\nimport com.example.smrpv2.model.Message;\r\nimport com.example.smrpv2.model.SumMedInfo;\r\nimport com.example.smrpv2.model.user_model.UserInform;\r\nimport com.example.smrpv2.retrofit.RetrofitHelper;\r\nimport com.example.smrpv2.ui.medicine.ListViewAdapter;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.GregorianCalendar;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.logging.SimpleFormatter;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\n/**\r\n * AlarmSetActivity : AlarmFragment에서 +버튼 눌렀을 때 알람을 설정하는 액티비티\r\n */\r\n\r\n/**\r\n * AlarmEditActivity와 AlarmSetActivity의 XML을 바꿈으로써 서버에서 바꾸어야하는 부분\r\n * - oneTimeDose()가 원래 EditText로, 숫자와 관련. 근데 xml이 아침, 점심, 저녁의 3가지 버튼으로 바뀜. => 이거에 대한 서버 값 불러와야 할 듯\r\n * - 근데 알람fragment의 알람 리스트에는 oneTimeDose가 숫자로 표기됨. 그래서 임시로 oneTimeDoseCount변수를 만들어 클릭된 거 개수 서버로 보내줌ㅈ => 이것도 바꿀 필요 있어 보임.\r\n */\r\n\r\npublic class AlarmSetActivity extends AppCompatActivity {\r\n\r\n    public static final String NOTIFICATION_CHANNEL_ID = \"10001\";\r\n\r\n\r\n    Context context;\r\n    AlarmManager alarmManager;\r\n    private InputMethodManager imm;\r\n\r\n    ListView Lst_medicine;\r\n    ListViewAdapter alarmListViewAdapter; //알람에 약을 추가한 어댑터\r\n    Button Btn_add, btn_Set_Alarm, btn_before, btn_after;\r\n    Button Btn_morning, Btn_afternoon, Btn_evening, Btn_addDate, Btn_init;\r\n    EditText et_alramName, et_dosingPeriod, et_oneTimeDose;\r\n    ImageView iv_back;\r\n\r\n    String back = \"a\";\r\n    String user_id;\r\n    int count = 0;\r\n    private static int dosingType = 1;\r\n    final int BEFORE_MEAL = 1;\r\n    final int AFTER_MEAL = 0;\r\n    final int AFTERNOON_CHECK = 0;\r\n    final int MORNING_CHECK = 0;\r\n    final int EVENING_CHECK = 0;\r\n\r\n    int oneTimeDoseCount = 0;\r\n    int init_dosingPeriod = -10;\r\n    final int NOT_VALUE = -10;\r\n    ArrayList<MedicineItem> alarmMedicineList = new ArrayList<>(); // 약추가한 리스트\r\n    ArrayList<MedicineItem> list = new ArrayList<>();\r\n    ArrayList<String> array_oneTimeDose = new ArrayList<String>(Arrays.asList(\"아침\", \"점심\", \"저녁\"));\r\n    ArrayList<String> selectedOneTimeDose = new ArrayList<String>();\r\n    private SparseBooleanArray mSelectedItems = new SparseBooleanArray(0);\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == 1) {\r\n            if (resultCode == RESULT_OK) {\r\n                alarmMedicineList.clear(); // 전에 있던 약 리스트 정보를 삭제\r\n                //반환값과 함께 전달받은 리스트뷰로 갱신하기\r\n                alarmMedicineList.addAll((ArrayList<MedicineItem>) data.getSerializableExtra(\"listViewItemArrayList\"));\r\n                alarmListViewAdapter.notifyDataSetChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n    }\r\n\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_alarm_set);\r\n\r\n        this.context = this;\r\n\r\n        //알람초기화\r\n        alarmManager = (AlarmManager) getSystemService(ALARM_SERVICE);\r\n\r\n\r\n        final Calendar calendar = Calendar.getInstance();\r\n\r\n        Intent intent = getIntent();\r\n        SharedPreferences loginInfromation = getSharedPreferences(\"setting\", 0);\r\n        user_id = loginInfromation.getString(\"id\", \"\");\r\n        list = (ArrayList<MedicineItem>) intent.getSerializableExtra(\"list\");\r\n        back = intent.getStringExtra(\"back\");\r\n\r\n        iv_back = findViewById(R.id.iv_back);\r\n        Btn_add = findViewById(R.id.Btn_add);\r\n        btn_before = findViewById(R.id.btn_before);\r\n        btn_after = findViewById(R.id.btn_after);\r\n        btn_Set_Alarm = findViewById(R.id.btn_set_alarm);\r\n        et_alramName = findViewById(R.id.et_alramName);\r\n        et_dosingPeriod = findViewById(R.id.et_dosingPeriod);\r\n        // et_oneTimeDose = findViewById(R.id.et_oneTimeDose);\r\n        Btn_addDate = findViewById(R.id.btn_addDate);\r\n        Btn_init = findViewById(R.id.btn_init);\r\n        Btn_morning = findViewById(R.id.btn_morning);\r\n        Btn_afternoon = findViewById(R.id.btn_afternoon);\r\n        Btn_evening = findViewById(R.id.btn_evening);\r\n\r\n        Lst_medicine = findViewById(R.id.Lst_medicine2);\r\n        imm = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);\r\n\r\n        alarmListViewAdapter = new ListViewAdapter(alarmMedicineList, this, 0); //alarmMedicineList =ArrayList\r\n        Lst_medicine.setAdapter(alarmListViewAdapter);  //Lst_medicine: listView\r\n\r\n        if (back != null) {\r\n            alarmMedicineList = (ArrayList<MedicineItem>) intent.getSerializableExtra(\"listViewItemArrayList\");\r\n            alarmListViewAdapter.notifyDataSetChanged();\r\n        } else {\r\n            if (list != null && list.size() > 0) {\r\n                alarmMedicineList.addAll(list);\r\n                alarmListViewAdapter.notifyDataSetChanged();\r\n            }\r\n\r\n        }\r\n\r\n\r\n        btn_before.setOnClickListener(new View.OnClickListener() {//식전버튼을 눌렀을 때\r\n            @Override\r\n            public void onClick(View view) {\r\n                dosingType = BEFORE_MEAL;\r\n                btn_before.setBackgroundResource(R.drawable.setbtnclick);\r\n                btn_before.setTextColor(Color.WHITE);\r\n                btn_after.setBackgroundResource(R.drawable.setbtn);\r\n                btn_after.setTextColor(Color.BLACK);\r\n\r\n            }\r\n        });\r\n        btn_after.setOnClickListener(new View.OnClickListener() { //식후버튼을 눌렀을 때\r\n            @Override\r\n            public void onClick(View view) {\r\n                dosingType = AFTER_MEAL;\r\n                btn_before.setBackgroundResource(R.drawable.setbtn);\r\n                btn_before.setTextColor(Color.BLACK);\r\n                btn_after.setBackgroundResource(R.drawable.setbtnclick);\r\n                btn_after.setTextColor(Color.WHITE);\r\n\r\n            }\r\n        });\r\n\r\n        Btn_evening.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                checkSelectedOneTimeDose(2, selectedOneTimeDose, Btn_evening);\r\n\r\n            }\r\n        });\r\n        Btn_afternoon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                checkSelectedOneTimeDose(1, selectedOneTimeDose, Btn_afternoon);\r\n            }\r\n        });\r\n\r\n        Btn_morning.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                checkSelectedOneTimeDose(0, selectedOneTimeDose, Btn_morning);\r\n            }\r\n        });\r\n        Btn_init.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (init_dosingPeriod == NOT_VALUE)\r\n                    et_dosingPeriod.setText(String.valueOf(0));\r\n                else\r\n                    et_dosingPeriod.setText(String.valueOf(init_dosingPeriod));\r\n            }\r\n        });\r\n        Btn_addDate.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                int dosingPeriod;\r\n\r\n                if (init_dosingPeriod == NOT_VALUE) {\r\n                    dosingPeriod = 0;\r\n                    init_dosingPeriod = dosingPeriod;\r\n                } else dosingPeriod = Integer.parseInt(et_dosingPeriod.getText().toString()) + 1;\r\n                et_dosingPeriod.setText(String.valueOf(dosingPeriod));\r\n\r\n\r\n            }\r\n        });\r\n\r\n\r\n        iv_back.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n        });\r\n        Btn_add.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                showAlertDialog();\r\n            }\r\n        });\r\n\r\n        btn_Set_Alarm.setOnClickListener(new View.OnClickListener() {//알람설정을 누른경우\r\n            @Override\r\n            public void onClick(View v) { // 알람설정\r\n\r\n\r\n\r\n                if (et_alramName.getText().toString().equals(\"\") || et_dosingPeriod.getText().toString().equals(\"\")\r\n                ) {\r\n                    Toast.makeText(context, \"모두 입력해 주세요 .\", Toast.LENGTH_SHORT).show();\r\n                } else {\r\n                    ArrayList<String> temp = new ArrayList<String>(); //일련번호 리스트를 만드는과정\r\n                    for (MedicineItem i : alarmMedicineList) {\r\n                        temp.add(i.getItemSeq());\r\n                    }\r\n                    if (temp.size() == 0) {\r\n                        Toast.makeText(context, \"약을 등록해 주세요.\", Toast.LENGTH_SHORT).show();\r\n                    } else {\r\n                        final ArrayList<Long> registerId = new ArrayList<>();\r\n\r\n                        for (MedicineItem item : alarmMedicineList) {\r\n                            registerId.add(item.getId());\r\n                        }\r\n                        String alarmName = et_alramName.getText().toString();\r\n                        int dosingPeriod = Integer.parseInt(et_dosingPeriod.getText().toString());\r\n                        //int oneTimeCapacity =oneTimeDoseCount;//Integer.parseInt(et_oneTimeDose.getText().toString());\r\n                        //DosTime 아침 점심 저녁 어떤것인지 판단 하는 로직  DoseTime 에는 Y OR N 가 들어간다.\r\n                        DoseTime doseTime = new DoseTime(\"N\", \"N\", \"N\");\r\n\r\n                        for (String dose : selectedOneTimeDose) {\r\n                            switch (dose) {\r\n                                case \"아침\": {\r\n                                    doseTime.setMorning(\"Y\");\r\n                                    break;\r\n                                }\r\n                                case \"점심\": {\r\n                                    doseTime.setLunch(\"Y\");\r\n                                    break;\r\n                                }\r\n                                case \"저녁\": {\r\n                                    doseTime.setDinner(\"Y\");\r\n                                    break;\r\n                                }\r\n                                default: {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        Log.d(\"dose\", \"아침\" + doseTime.getMorning());\r\n                        Log.d(\"dose\", \"점심\" + doseTime.getLunch());\r\n                        Log.d(\"dose\", \"저녁\" + doseTime.getDinner());\r\n\r\n                        String doseType;\r\n                        if (dosingType == 1) {\r\n                            doseType = \"식전\";\r\n                        } else {\r\n                            doseType = \"식후\";\r\n\r\n                        }\r\n                        final MedicineAlarmAskDto medicineAlarmAskDto = new MedicineAlarmAskDto(0, UserInform.getUserId(), registerId, alarmName, dosingPeriod, null, null, doseTime, doseType);\r\n                        Call<MedicineAlarmResponDto> call = RetrofitHelper.getRetrofitService_server().addMedicineAlarm(medicineAlarmAskDto);\r\n                        call.enqueue(new Callback<MedicineAlarmResponDto>() {\r\n                            @Override\r\n                            public void onResponse(Call<MedicineAlarmResponDto> call, Response<MedicineAlarmResponDto> response) {\r\n\r\n                                MedicineAlarmResponDto medicineAlarmResponDto = response.body();\r\n                                Log.d(\"알람설정중에서\", response.body().getAlarmName());\r\n\r\n                                //알람등록\r\n                                setAlarm(medicineAlarmResponDto);\r\n                                onBackPressed();\r\n\r\n                            }\r\n\r\n                            @Override\r\n                            public void onFailure(Call<MedicineAlarmResponDto> call, Throwable t) {\r\n\r\n                            }\r\n                        });\r\n\r\n\r\n                        /**\r\n                         * 서버\r\n                         */\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n\r\n\r\n    }\r\n\r\n    private void setAlarm(MedicineAlarmResponDto medicineAlarmResponDto) {\r\n        Date currentTime = Calendar.getInstance().getTime();\r\n        GregorianCalendar cal = new GregorianCalendar(Locale.KOREA);\r\n        cal.setTime(currentTime);\r\n\r\n        //식전 7:30  12:00 18:40\r\n        //식후 8:00 13:00  19:40\r\n        String doseType = medicineAlarmResponDto.getDoseType();\r\n        int dosingPeriod = medicineAlarmResponDto.getDosingPeriod();\r\n        DoseTime doseTime = medicineAlarmResponDto.getDoseTime();\r\n        String content = medicineAlarmResponDto.getAlarmName();\r\n        List<AlarmListDto> alarmListList = medicineAlarmResponDto.getAlarmListList();\r\n\r\n\r\n        int count = 0; //알람PK의 수를 세기위함\r\n        if (doseType.equals(\"식전\")) {//식전\r\n            for (int i = 0; i < dosingPeriod; i++) {\r\n                GregorianCalendar temp = cal;\r\n                temp.add(Calendar.DATE, i);\r\n                if (doseTime.getMorning().equals(\"Y\")) {\r\n                    Long id = alarmListList.get(count).getId();\r\n                    PendingIntent pendingIntent = makePendingIntent(Long.valueOf(id).intValue(), content);\r\n\r\n                    temp.set(Calendar.HOUR_OF_DAY, 7);\r\n                    temp.set(Calendar.MINUTE, 30);\r\n                    Log.d(\"time\", cal.getTime().toString());\r\n                    Log.d(\"time2\", temp.getTime().toString());\r\n                    if (!cal.getTime().after(temp.getTime())) {\r\n                        Log.d(\"알람등록\", \"알람등록\");\r\n                        alarmManager.setExact(\r\n                                AlarmManager.RTC_WAKEUP,\r\n                                temp.getTimeInMillis(),\r\n                                pendingIntent\r\n                        );\r\n                    }\r\n                    count++;\r\n                }\r\n                if (doseTime.getLunch().equals(\"Y\")) {\r\n                    Long id = alarmListList.get(count).getId();\r\n                    PendingIntent pendingIntent = makePendingIntent(Long.valueOf(id).intValue(), content);\r\n                    temp.set(Calendar.HOUR_OF_DAY, 12);\r\n                    temp.set(Calendar.MINUTE, 00);\r\n                    Log.d(\"time\", cal.getTime().toString());\r\n                    Log.d(\"time2\", temp.getTime().toString());\r\n\r\n                    if (!cal.getTime().after(temp.getTime())) {\r\n                        Log.d(\"알람등록\", \"알람등록\");\r\n                        alarmManager.setExact(\r\n                                AlarmManager.RTC_WAKEUP,\r\n                                temp.getTimeInMillis(),\r\n                                pendingIntent\r\n                        );\r\n                    }\r\n                    count++;\r\n                }\r\n                if (doseTime.getDinner().equals(\"Y\")) {\r\n                    Long id = alarmListList.get(count).getId();\r\n\r\n                    PendingIntent pendingIntent = makePendingIntent(Long.valueOf(id).intValue(), content);\r\n                    /*long now = System.currentTimeMillis();\r\n                    Date date = new Date(now);\r\n                    SimpleDateFormat hh_format = new SimpleDateFormat(\"hh\");\r\n                    SimpleDateFormat mm_format = new SimpleDateFormat(\"mm\");\r\n                    Log.d(\"TAG\", \"setAlarm: \"+hh_format.format(date));\r\n                    Log.d(\"TAG\", \"setAlarm: \"+mm_format.format(date));\r\n                    temp.set(Calendar.HOUR_OF_DAY, Integer.parseInt(hh_format.format(date)));\r\n                    temp.set(Calendar.MINUTE, Integer.parseInt(mm_format.format(date))+1);*/\r\n\r\n                    temp.set(Calendar.HOUR_OF_DAY,18);\r\n                    temp.set(Calendar.MINUTE, 40);\r\n                    Log.d(\"time\", cal.getTime().toString());\r\n                    Log.d(\"time2\", temp.getTime().toString());\r\n\r\n                    if (!cal.getTime().after(temp.getTime())) {\r\n                        Log.d(\"알람등록\", \"알람등록\");\r\n                        alarmManager.setExact(\r\n                                AlarmManager.RTC_WAKEUP,\r\n                                temp.getTimeInMillis(),\r\n                                pendingIntent\r\n                        );\r\n                    }\r\n                    count++;\r\n                }\r\n            }\r\n        } else {//식후\r\n            for (int i = 0; i < dosingPeriod; i++) {\r\n                GregorianCalendar temp = (GregorianCalendar)cal.clone() ;\r\n                temp.add(Calendar.DATE, i);\r\n                if (doseTime.getMorning().equals(\"Y\")) {\r\n                    temp.set(Calendar.HOUR_OF_DAY, 8);\r\n                    temp.set(Calendar.MINUTE, 0);\r\n                    Log.d(\"time\", cal.getTime().toString());\r\n                    Log.d(\"time2\", temp.getTime().toString());\r\n\r\n                    if (!cal.getTime().after(temp.getTime())) {\r\n                        Log.d(\"알람등록\", \"알람등록\");\r\n                        Long id = alarmListList.get(count).getId();\r\n                        PendingIntent pendingIntent = makePendingIntent(Long.valueOf(id).intValue(), content);\r\n                          alarmManager.setExact(\r\n                                AlarmManager.RTC_WAKEUP,\r\n                                temp.getTimeInMillis(),\r\n                                pendingIntent\r\n                        );\r\n                    }\r\n                    count++;\r\n                }\r\n                if (doseTime.getLunch().equals(\"Y\")) {\r\n                    temp.set(Calendar.HOUR_OF_DAY, 13);\r\n                    temp.set(Calendar.MINUTE, 0);\r\n                    Log.d(\"time\", cal.getTime().toString());\r\n                    Log.d(\"time2\", temp.getTime().toString());\r\n\r\n                    if (!cal.getTime().after(temp.getTime())) {\r\n                        Log.d(\"알람등록\", \"알람등록\");\r\n                        Long id = alarmListList.get(count).getId();\r\n                        PendingIntent pendingIntent = makePendingIntent(Long.valueOf(id).intValue(), content);\r\n                        alarmManager.setExact(\r\n                                AlarmManager.RTC_WAKEUP,\r\n                                temp.getTimeInMillis(),\r\n                                pendingIntent\r\n                        );\r\n                    }\r\n                    count++;\r\n\r\n                }\r\n                if (doseTime.getDinner().equals(\"Y\")) {\r\n                    temp.set(Calendar.HOUR_OF_DAY, 17);\r\n                    temp.set(Calendar.MINUTE, 19);\r\n                    Log.d(\"time\", cal.getTime().toString());\r\n                    Log.d(\"time2\", temp.getTime().toString());\r\n\r\n                    if (!cal.getTime().after(temp.getTime())) {//지난 시간 은 등록안하게하기위함\r\n                        Long id = alarmListList.get(count).getId();\r\n                        Log.d(\"알람등록\", \"알람등록\");\r\n                        PendingIntent pendingIntent = makePendingIntent(Long.valueOf(id).intValue(), content);\r\n                        alarmManager.setExact(\r\n                                AlarmManager.RTC_WAKEUP,\r\n                                temp.getTimeInMillis(),\r\n                                pendingIntent\r\n                        );\r\n                    }\r\n                    count++;\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n        Log.d(\"알람\", \"알람등록\");\r\n    }\r\n\r\n    private PendingIntent makePendingIntent(int privateId, String content) {\r\n        Intent aIntent = new Intent(this, AlarmReceiver.class);\r\n        aIntent.putExtra(\"content\", content);\r\n        aIntent.putExtra(\"privateId\", privateId);\r\n        return PendingIntent.getBroadcast(context, privateId, aIntent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n    }\r\n\r\n    private void showAlertDialog() {\r\n\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        LayoutInflater inflater = getLayoutInflater();\r\n        View view = inflater.inflate(R.layout.alarm_med_dialog, null);\r\n        builder.setView(view);\r\n        final ArrayList<MedicineItem> items = new ArrayList<>();\r\n        final AlertDialog dialog = builder.create();\r\n\r\n        ListView Lst_medicine = view.findViewById(R.id.Lst_medicine); //약 추가하기 팝업 창 내가 등록한 약\r\n        final Button Btn_ok = view.findViewById(R.id.Btn_ok);\r\n        final ListViewAdapter adapter = new ListViewAdapter(items, this, -1);\r\n\r\n        Lst_medicine.setAdapter(adapter);\r\n        Btn_ok.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) { // 확인 버튼 누르기(약추가하기 기능에서)\r\n\r\n\r\n                int num = 0;\r\n                Toast.makeText(getApplicationContext(), \"추가 되었습니다.\", Toast.LENGTH_SHORT).show();\r\n\r\n                ArrayList<MedicineItem> list = adapter.res();\r\n                if (alarmMedicineList.size() == 1) {//등록된 약 기능에서 알람추가시 중복제거\r\n\r\n                    for (int i = 0; i < list.size(); i++) {\r\n                        if (alarmMedicineList.get(0).getItemSeq().equals(list.get(i).getItemSeq())) {\r\n                            list.remove(i);\r\n                            num++;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (int i = 0; i < alarmMedicineList.size(); i++) {\r\n                        for (int j = 0; j < list.size(); j++) {\r\n                            if (alarmMedicineList.get(i).getItemSeq().equals(list.get(j).getItemSeq())) {\r\n                                list.remove(j);\r\n                                num++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (num > 0)\r\n                    Toast.makeText(getApplicationContext(), \"중복된 약 \" + num + \"건을 제외하였습니다.\", Toast.LENGTH_SHORT).show();\r\n                alarmMedicineList.addAll(list);\r\n\r\n\r\n                alarmListViewAdapter.notifyDataSetChanged();\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n\r\n        Call<ArrayList<SumMedInfo>> call = RetrofitHelper.getRetrofitService_server().medicineRegs(UserInform.getUserId());\r\n        call.enqueue(new Callback<ArrayList<SumMedInfo>>() {\r\n            @Override\r\n            public void onResponse(Call<ArrayList<SumMedInfo>> call, Response<ArrayList<SumMedInfo>> response) {\r\n                ArrayList<SumMedInfo> med_items = response.body();\r\n\r\n                items.clear();\r\n                for (int i = 0; i < med_items.size(); i++) {\r\n                    items.add(new MedicineItem(med_items.get(i).getId(), med_items.get(i).getImageUrl(), med_items.get(i).getItemName(), med_items.get(i).getItemSeq(), med_items.get(i).getCreatedAt(), med_items.get(i).getEntpName()));\r\n\r\n\r\n                }\r\n                adapter.notifyDataSetChanged();\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<ArrayList<SumMedInfo>> call, Throwable t) {\r\n                t.printStackTrace();\r\n            }\r\n        });\r\n        dialog.show();\r\n    }\r\n\r\n    void checkSelectedOneTimeDose(int position, ArrayList<String> item, Button bt) {\r\n        if (mSelectedItems.get(position, false)) {\r\n            mSelectedItems.put(position, false);\r\n            bt.setBackgroundResource(R.drawable.setbtn);\r\n            bt.setTextColor(Color.BLACK);\r\n\r\n        } else {\r\n            mSelectedItems.put(position, true);\r\n            bt.setBackgroundResource(R.drawable.setbtnclick);\r\n            bt.setTextColor(Color.WHITE);\r\n        }\r\n\r\n        for (int i = 0; i < 3; i++) {\r\n            if (i == 0) {\r\n                item.clear();\r\n                oneTimeDoseCount = 0;\r\n            }\r\n            if (mSelectedItems.get(i, false)) {\r\n                item.add(array_oneTimeDose.get(i));\r\n                Log.e(\"fff\", array_oneTimeDose.get(i));\r\n                oneTimeDoseCount++;\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/smrpv2/ui/alarm/AlarmSetActivity.java	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
+++ app/src/main/java/com/example/smrpv2/ui/alarm/AlarmSetActivity.java	(date 1606571123789)
@@ -252,7 +252,6 @@
             public void onClick(View v) { // 알람설정
 
 
-
                 if (et_alramName.getText().toString().equals("") || et_dosingPeriod.getText().toString().equals("")
                 ) {
                     Toast.makeText(context, "모두 입력해 주세요 .", Toast.LENGTH_SHORT).show();
@@ -266,8 +265,8 @@
                     } else {
                         final ArrayList<Long> registerId = new ArrayList<>();
 
-                        for (MedicineItem item : alarmMedicineList) {
-                            registerId.add(item.getId());
+                        for (MedicineItem item : alarmMedicineList) {//사용자가 선택한 알람 등록할 약리스트를 다시 list에 담는과정
+                            registerId.add(item.getId()); //사용자가 선택한 알람 등록할 약리스트
                         }
                         String alarmName = et_alramName.getText().toString();
                         int dosingPeriod = Integer.parseInt(et_dosingPeriod.getText().toString());
@@ -399,17 +398,18 @@
                     Long id = alarmListList.get(count).getId();
 
                     PendingIntent pendingIntent = makePendingIntent(Long.valueOf(id).intValue(), content);
-                    /*long now = System.currentTimeMillis();
+                    long now = System.currentTimeMillis();
                     Date date = new Date(now);
                     SimpleDateFormat hh_format = new SimpleDateFormat("hh");
                     SimpleDateFormat mm_format = new SimpleDateFormat("mm");
                     Log.d("TAG", "setAlarm: "+hh_format.format(date));
-                    Log.d("TAG", "setAlarm: "+mm_format.format(date));
-                    temp.set(Calendar.HOUR_OF_DAY, Integer.parseInt(hh_format.format(date)));
-                    temp.set(Calendar.MINUTE, Integer.parseInt(mm_format.format(date))+1);*/
+                    Log.d("TAG", "setAlarm: "+Integer.parseInt(mm_format.format(date)));
+                    Log.d("TAG", "setAlarm: "+ Integer.parseInt(mm_format.format(date))+5);
+                    temp.set(Calendar.HOUR_OF_DAY,22);
+                    temp.set(Calendar.MINUTE, 50);
 
-                    temp.set(Calendar.HOUR_OF_DAY,18);
-                    temp.set(Calendar.MINUTE, 40);
+                   /* temp.set(Calendar.HOUR_OF_DAY,18);
+                    temp.set(Calendar.MINUTE, 40);*/
                     Log.d("time", cal.getTime().toString());
                     Log.d("time2", temp.getTime().toString());
 
Index: app/src/main/java/com/example/smrpv2/ui/alarm/AlarmFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.smrpv2.ui.alarm;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.viewpager.widget.ViewPager;\r\n\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.ListView;\r\nimport android.widget.TextView;\r\n\r\nimport com.example.smrpv2.R;\r\nimport com.example.smrpv2.model.MedicineAlarmResponDto;\r\nimport com.example.smrpv2.model.alarm_model.AlarmItem;\r\nimport com.example.smrpv2.model.user_model.UserInform;\r\nimport com.example.smrpv2.retrofit.RetrofitHelper;\r\nimport com.example.smrpv2.ui.start.AutoSlide;\r\nimport com.example.smrpv2.ui.start.ViewPagerAdapter;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport me.relex.circleindicator.CircleIndicator;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\n/**\r\n * 알람 리스트 출력\r\n * 기능 1. 알람 추가(+버튼)\r\n * 기능 2. 알람 편집(알람 리스트 중 하나 클릭)\r\n */\r\npublic class AlarmFragment extends Fragment {\r\n\r\n    private ViewPager viewPager;\r\n    private ViewPagerAdapter adapter;\r\n    private AlarmListViewAdapter listViewAdapter;\r\n\r\n    private ListView Lst_medicine;\r\n    private TextView Txt_empty;\r\n    private ImageView Img_ic_plus;\r\n\r\n    AutoSlide autoSlide;\r\n    private final long DELAY_MS = 1000;\r\n    private final long PERIOD_MS = 3000;\r\n    private String user_id;\r\n    ArrayList<AlarmItem> items = new ArrayList<AlarmItem>();\r\n    private int[] ad_banner= {R.drawable.ad_banner1, R.drawable.ad_banner2,R.drawable.ad_banner3};\r\n\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             ViewGroup container, Bundle savedInstanceState) {\r\n\r\n        if(container.getChildCount() > 0)\r\n            container.removeViewAt(0);\r\n        final android.view.View v = inflater.inflate(R.layout.alarm_fragment, container, false);\r\n\r\n\r\n        //초기화.....\r\n        Lst_medicine = v.findViewById(R.id.Lst_medicine);\r\n        Txt_empty = v.findViewById(R.id.Txt_empty);\r\n        Lst_medicine.setEmptyView(Txt_empty);\r\n        Img_ic_plus = v.findViewById(R.id.Img_ic_plus);\r\n        viewPager =  v.findViewById(R.id.banner);\r\n        adapter = new ViewPagerAdapter(getActivity(),ad_banner);\r\n        CircleIndicator indicator = v.findViewById(R.id.indicator); // 인디케이터\r\n        listViewAdapter= new AlarmListViewAdapter(items,getActivity());\r\n\r\n\r\n        //view 설정...\r\n        viewPager.setAdapter(adapter);\r\n        indicator.setViewPager(viewPager);\r\n        Lst_medicine.setAdapter(listViewAdapter);\r\n\r\n\r\n        SharedPreferences loginInfromation = getActivity().getSharedPreferences(\"setting\",0);\r\n        user_id = loginInfromation.getString(\"id\",\"\");\r\n\r\n\r\n        autoSlide = new AutoSlide(viewPager, DELAY_MS, PERIOD_MS);\r\n        autoSlide.startSlide();\r\n\r\n        Img_ic_plus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent = new Intent(getContext().getApplicationContext(), AlarmSetActivity.class);\r\n                startActivity(intent);\r\n\r\n\r\n            }\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n        return v;\r\n\r\n    }\r\n    public void onStart() {\r\n        super.onStart();\r\n        Call<ArrayList<MedicineAlarmResponDto>> call = RetrofitHelper.getRetrofitService_server().getMedicineAlarmAll(UserInform.getUserId());\r\n        call.enqueue(new Callback<ArrayList<MedicineAlarmResponDto>>() {\r\n            @Override\r\n            public void onResponse(Call<ArrayList<MedicineAlarmResponDto>> call, Response<ArrayList<MedicineAlarmResponDto>> response) {\r\n                ArrayList<MedicineAlarmResponDto> body = response.body();\r\n                items.clear();\r\n                for (MedicineAlarmResponDto medicineAlarmResponDto : body) {\r\n                    items.add(new AlarmItem(medicineAlarmResponDto.getAlarmName(), medicineAlarmResponDto.getStartAlarm(), medicineAlarmResponDto.getFinishAlarm(),\r\n                            medicineAlarmResponDto.getDoseTime(), medicineAlarmResponDto.getId(), medicineAlarmResponDto.getDoseType(),\r\n                            String.valueOf(medicineAlarmResponDto.getDosingPeriod())));\r\n                    Log.d(\"넣을때\", medicineAlarmResponDto.getId() + \"\");\r\n                }\r\n                listViewAdapter.notifyDataSetChanged();\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<ArrayList<MedicineAlarmResponDto>> call, Throwable t) {\r\n                Log.d(\"AlarmAll\", t.toString());\r\n            }\r\n        });\r\n        /**\r\n         *\r\n         *  서버 내용. 연결이 안돼서 임시로 비움. 나중에 연결 후 추가예정\r\n         *\r\n         *\r\n         */\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/smrpv2/ui/alarm/AlarmFragment.java	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
+++ app/src/main/java/com/example/smrpv2/ui/alarm/AlarmFragment.java	(date 1606570570185)
@@ -114,6 +114,7 @@
                             medicineAlarmResponDto.getDoseTime(), medicineAlarmResponDto.getId(), medicineAlarmResponDto.getDoseType(),
                             String.valueOf(medicineAlarmResponDto.getDosingPeriod())));
                     Log.d("넣을때", medicineAlarmResponDto.getId() + "");
+                    Log.d("넣을때", medicineAlarmResponDto.getAlarmName() + "");
                 }
                 listViewAdapter.notifyDataSetChanged();
             }
Index: app/src/main/java/com/example/smrpv2/model/MedicineAlarmResponDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.smrpv2.model;\r\n\r\nimport com.example.smrpv2.model.SumMedInfo;\r\nimport com.google.gson.annotations.SerializedName;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n//유저가 등록란 알람 정보\r\npublic class MedicineAlarmResponDto {\r\n    private Long id;\r\n\r\n    private String userInfo;\r\n\r\n    private ArrayList<SumMedInfo> regMedicineArrayList;\r\n\r\n\r\n    private String alarmName;\r\n    private int dosingPeriod;\r\n    private String startAlarm;\r\n    private String finishAlarm;\r\n    private DoseTime doseTime;\r\n    private String doseType;\r\n    private List<AlarmListDto> alarmListList;\r\n\r\n    public List<AlarmListDto> getAlarmListList() {\r\n        return alarmListList;\r\n    }\r\n\r\n    public void setAlarmListList(List<AlarmListDto> alarmListList) {\r\n        this.alarmListList = alarmListList;\r\n    }\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getUserInfo() {\r\n        return userInfo;\r\n    }\r\n\r\n    public void setUserInfo(String userInfo) {\r\n        this.userInfo = userInfo;\r\n    }\r\n\r\n    public ArrayList<SumMedInfo> getRegMedicineArrayList() {\r\n        return regMedicineArrayList;\r\n    }\r\n\r\n    public void setRegMedicineArrayList(ArrayList<SumMedInfo> regMedicineArrayList) {\r\n        this.regMedicineArrayList = regMedicineArrayList;\r\n    }\r\n\r\n    public String getAlarmName() {\r\n        return alarmName;\r\n    }\r\n\r\n    public void setAlarmName(String alarmName) {\r\n        this.alarmName = alarmName;\r\n    }\r\n\r\n    public int getDosingPeriod() {\r\n        return dosingPeriod;\r\n    }\r\n\r\n    public void setDosingPeriod(int dosingPeriod) {\r\n        this.dosingPeriod = dosingPeriod;\r\n    }\r\n\r\n    public String getStartAlarm() {\r\n        return startAlarm;\r\n    }\r\n\r\n    public void setStartAlarm(String startAlarm) {\r\n        this.startAlarm = startAlarm;\r\n    }\r\n\r\n    public String getFinishAlarm() {\r\n        return finishAlarm;\r\n    }\r\n\r\n    public void setFinishAlarm(String finishAlarm) {\r\n        this.finishAlarm = finishAlarm;\r\n    }\r\n\r\n    public DoseTime getDoseTime() {\r\n        return doseTime;\r\n    }\r\n\r\n    public void setDoseTime(DoseTime doseTime) {\r\n        this.doseTime = doseTime;\r\n    }\r\n\r\n    public String getDoseType() {\r\n        return doseType;\r\n    }\r\n\r\n    public void setDoseType(String doseType) {\r\n        this.doseType = doseType;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/smrpv2/model/MedicineAlarmResponDto.java	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
+++ app/src/main/java/com/example/smrpv2/model/MedicineAlarmResponDto.java	(date 1606570570191)
@@ -15,7 +15,7 @@
     private ArrayList<SumMedInfo> regMedicineArrayList;
 
 
-    private String alarmName;
+    private String alarmName; //약이름
     private int dosingPeriod;
     private String startAlarm;
     private String finishAlarm;
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-23_오후_3_13_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-23_오후_3_13_[Default_Changelist]/shelved.patch	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-23_오후_3_13_[Default_Changelist]/shelved.patch	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
@@ -1,372 +0,0 @@
-Index: app/src/main/java/com/example/smrpv2/ui/medicine/searchMed/Search_prescriptionActivity.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.smrpv2.ui.medicine.searchMed;\r\n\r\nimport android.app.ProgressDialog;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Bitmap;\r\nimport android.net.Uri;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.Toast;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.FileProvider;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport com.example.smrpv2.R;\r\nimport com.example.smrpv2.model.MedicineItem;\r\nimport com.example.smrpv2.model.Message;\r\nimport com.example.smrpv2.model.RegmedicineAsk;\r\nimport com.example.smrpv2.model.medicine_model.Prescriptionitem;\r\nimport com.example.smrpv2.model.searchMed_model.MedicineInfoRsponDTO;\r\nimport com.example.smrpv2.model.user_model.UserInform;\r\nimport com.example.smrpv2.retrofit.RetrofitHelper;\r\nimport com.example.smrpv2.retrofit.RetrofitService_Server;\r\nimport com.google.api.client.extensions.android.http.AndroidHttp;\r\nimport com.google.api.client.googleapis.json.GoogleJsonResponseException;\r\nimport com.google.api.client.http.HttpTransport;\r\nimport com.google.api.client.json.JsonFactory;\r\nimport com.google.api.client.json.gson.GsonFactory;\r\nimport com.google.api.services.vision.v1.Vision;\r\nimport com.google.api.services.vision.v1.VisionRequest;\r\nimport com.google.api.services.vision.v1.VisionRequestInitializer;\r\nimport com.google.api.services.vision.v1.model.AnnotateImageRequest;\r\nimport com.google.api.services.vision.v1.model.BatchAnnotateImagesRequest;\r\nimport com.google.api.services.vision.v1.model.BatchAnnotateImagesResponse;\r\nimport com.google.api.services.vision.v1.model.EntityAnnotation;\r\nimport com.google.api.services.vision.v1.model.Feature;\r\nimport com.google.api.services.vision.v1.model.Image;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.Serializable;\r\nimport java.lang.ref.WeakReference;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\n/**\r\n *\r\n * 처방전 & 약 봉투 사진 찍고 그 결과 알려주는 Activity\r\n *\r\n */\r\npublic class Search_prescriptionActivity extends AppCompatActivity implements Serializable {\r\n    private static final String CLOUD_VISION_API_KEY = \"AIzaSyDZfaBD1mddJVfGxgrhnUh0Lg02Mfc38KA\";//구글 인증키\r\n    private static final String ANDROID_CERT_HEADER = \"X-Android-Cert\";\r\n    private static final String ANDROID_PACKAGE_HEADER = \"X-Android-Package\";\r\n    private static final int MAX_LABEL_RESULTS = 10;\r\n    private static final int MAX_DIMENSION = 1080;\r\n\r\n    private ArrayList<Prescriptionitem> list;\r\n    private ArrayList<String> itemseq_list;\r\n    private Button Btn_add;\r\n    private ImageView iv_back;\r\n\r\n    private Bitmap bitmap;\r\n    private Uri photoUri;\r\n    private HashMap<Integer, String> select_pill_list; //사용자 선택한 약 정보를 담는 hashmap\r\n    private PrescriptionAdapter prescriptionAdapter;\r\n    private RecyclerView recyclerView;\r\n\r\n    private String id ;\r\n    SharedPreferences sharedPreferences;\r\n    private boolean bool_end = false;\r\n    private RetrofitService_Server retrofitService;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_select_pill);\r\n\r\n        initView();\r\n\r\n        Btn_add.setOnClickListener(new View.OnClickListener() { //추가하기 버튼 누를시\r\n            @Override\r\n            public void onClick(View v) { //추가하기\r\n                if(select_pill_list.size()==0){\r\n                    Toast.makeText(getApplicationContext(),\"약을 선택해 주세요.\", Toast.LENGTH_SHORT).show();\r\n                }else{\r\n                    for(Map.Entry<Integer, String>elem : select_pill_list.entrySet())\r\n                        itemseq_list.add(elem.getValue());\r\n                    /**\r\n                     *\r\n                     * 서버 : 검색된 약 추가하기\r\n                     */\r\n\r\n                    RegmedicineAsk regmedicineAsk = new RegmedicineAsk(UserInform.getUserId(),\"아이템 번호 --> 배열로 바꿔야함\");\r\n                    Call<Message> call = RetrofitHelper.getRetrofitService_server().medicineAdd(regmedicineAsk);\r\n\r\n                    call.enqueue(new Callback<Message>() {\r\n                        @Override\r\n                        public void onResponse(Call<Message> call, Response<Message> response) {\r\n                            if(response.body().getResultCode().equals(\"Ok\")){\r\n                                //정상적으로 반영\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onFailure(Call<Message> call, Throwable t) {\r\n\r\n                        }\r\n                    });\r\n                }\r\n\r\n\r\n            }\r\n        });\r\n        iv_back.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n        });\r\n        prescriptionAdapter.setOnClickListener(new PrescriptionAdapter.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(PrescriptionAdapter.ViewHolder holder, View v, int position) {\r\n\r\n                if(select_pill_list.size()==0){//사용자가 추가한 약 리스트가 없는 경우\r\n                    select_pill_list.put(position,list.get(position).getItemSeq());\r\n\r\n                }else{\r\n                    if(select_pill_list.get(position)==null){ //선택한 약이 hashmap에 없을경우\r\n                        select_pill_list.put(position,list.get(position).getItemSeq());\r\n                    }else{\r\n                        select_pill_list.remove(position);\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n\r\n\r\n\r\n        sendTakePhotoIntent();\r\n\r\n    }\r\n\r\n\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == 672 && resultCode == RESULT_OK) {\r\n\r\n            try {\r\n\r\n                bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), photoUri);\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            Uploading_bitmap(bitmap);\r\n        }else if(resultCode==RESULT_OK){ //팝업창 종료시\r\n            finish();\r\n        }else\r\n            onBackPressed();\r\n    }\r\n    private File createImageFile() throws IOException {\r\n        String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\r\n        String imageFileName = \"TEST_\" + timeStamp + \"_\";\r\n        File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);\r\n        File image = File.createTempFile(\r\n                imageFileName,      /* prefix */\r\n                \".jpg\",         /* suffix */\r\n                storageDir          /* directory */\r\n        );\r\n        return image;\r\n    }\r\n    private void sendTakePhotoIntent() {\r\n        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);// 내장 카메라 켜기\r\n        if (takePictureIntent.resolveActivity(getPackageManager()) != null) {\r\n            File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + \"/Android/data/com.example.smrpv2/files/Pictures\");//Android/data/com.raonstudio.cameratest/files\r\n\r\n            if (!file.exists()) {\r\n                file.mkdir();\r\n            }\r\n\r\n            File photoFile = null;\r\n\r\n            try {\r\n                photoFile = createImageFile();\r\n            } catch (IOException ex) {\r\n\r\n            }\r\n\r\n            if (photoFile != null) {\r\n                photoUri = FileProvider.getUriForFile(this, getPackageName(), photoFile);\r\n\r\n                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);\r\n                startActivityForResult(takePictureIntent, 672);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (Build.VERSION.SDK_INT >= 23) {\r\n            if(grantResults[0]== PackageManager.PERMISSION_GRANTED){\r\n            }\r\n        }\r\n    }\r\n\r\n    private void Uploading_bitmap(Bitmap bitmap){\r\n        if(bitmap != null){\r\n            bitmap = scaleBitmapDown(bitmap,MAX_DIMENSION);\r\n\r\n           // callCloudVision(bitmap);\r\n        }\r\n    }\r\n    private Bitmap scaleBitmapDown(Bitmap bitmap, int maxDimension) {\r\n\r\n        int originalWidth = bitmap.getWidth();\r\n        int originalHeight = bitmap.getHeight();\r\n        int resizedWidth = maxDimension;\r\n        int resizedHeight = maxDimension;\r\n        if (originalHeight > originalWidth) { // 촬영한 사진의 세로길이가 너비보다 크면\r\n            resizedHeight = maxDimension;\r\n            resizedWidth = (int) (resizedHeight * (float) originalWidth / (float) originalHeight);\r\n        } else if (originalWidth > originalHeight) {\r\n            resizedWidth = maxDimension;\r\n            resizedHeight = (int) (resizedWidth * (float) originalHeight / (float) originalWidth);\r\n        } else if (originalHeight == originalWidth) {\r\n            resizedHeight = maxDimension;\r\n            resizedWidth = maxDimension;\r\n        }\r\n        return Bitmap.createScaledBitmap(bitmap, resizedWidth, resizedHeight, false);\r\n    }\r\n\r\n    /*private class LableDetectionTask extends AsyncTask<Object, Void, String> {\r\n        private final WeakReference<Search_prescriptionActivity> mActivityWeakReference;\r\n        private Vision.Images.Annotate mRequest;\r\n        ProgressDialog progressDialog = new ProgressDialog(Search_prescriptionActivity.this);\r\n        LableDetectionTask(Search_prescriptionActivity activity, Vision.Images.Annotate annotate) {\r\n            mActivityWeakReference = new WeakReference<>(activity);\r\n            mRequest = annotate;\r\n        }\r\n        @Override\r\n        protected String doInBackground(Object... params) {\r\n            try {\r\n                BatchAnnotateImagesResponse response = mRequest.execute();\r\n                return convertResponseToString(response);\r\n\r\n            } catch (GoogleJsonResponseException e) {\r\n                Log.d(\"TAG\", \"failed to make API request because \" + e.getContent());\r\n            } catch (IOException e) {\r\n                Log.d(\"TAG\", \"failed to make API request because of other IOException \" +\r\n                        e.getMessage());\r\n            }\r\n\r\n            return \"Cloud Vision API request failed. Check logs for details.\";\r\n        }\r\n        @Override\r\n        protected void onPreExecute() {\r\n            progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);\r\n            progressDialog.setMessage(\"로딩중입니다..\");\r\n            progressDialog.show();\r\n            super.onPreExecute();\r\n        }\r\n        protected void onPostExecute(String result) {\r\n            Search_prescriptionActivity activity = mActivityWeakReference.get();\r\n            if (activity != null && !activity.isFinishing()) {\r\n                List<String> pill_list = new ArrayList();\r\n\r\n                //구글 OCR에서 인식된 문자가 없을 경우 nothing을 반환하기 떄문에 이를 제거\r\n                result = result.replaceAll(\"nothing\",\"\");\r\n                StringTokenizer token = new StringTokenizer(result , \"\\n\");\r\n\r\n\r\n                while(token.hasMoreTokens()){// 구글 Ocr에서 응답 받은 ocr data를 \\n 기준으로 token\r\n                    pill_list.add(token.nextToken());\r\n                }\r\n                if(pill_list.size()==0){\r\n                    progressDialog.dismiss();\r\n                    Intent intent = new Intent(getApplicationContext(), ErrorMessageActivity.class);\r\n                    intent.putExtra(\"data\", \"검색결과가 없습니다.\\n\\n 이전 페이지로 이동합니다.\");\r\n                    startActivityForResult(intent, 1);\r\n\r\n                }else\r\n                    pill_list.remove(pill_list.size() -1);\r\n\r\n\r\n                Log.d(\"TAG\", \"onPostExecute list.size(): \"+pill_list.size());\r\n                //서버에서 STring형 배열로 요청을 받기 떄문에 List를 STring배열로 변환\r\n                String[] result_array = (String[])pill_list.toArray(new String[pill_list.size()]);\r\n\r\n                /*for(String str : result_array)\r\n                    Log.d(\"TAG\", \"result_array: \"+str+\"\\n\");*/\r\n\r\n                //서버와 통신을 하기 위한 RetrofitService_Server 객체 생성성\r\n                /*retrofitService = RetrofitHelper.getRetrofitService_server();\r\n                Call<ArrayList<MedicineInfoRsponDTO>> call= retrofitService.medicinSendList(result_array);\r\n                call.enqueue(new Callback<ArrayList<MedicineInfoRsponDTO>>() {\r\n                    @Override\r\n                    public void onResponse(Call<ArrayList<MedicineInfoRsponDTO>> call, Response<ArrayList<MedicineInfoRsponDTO>> response) {\r\n\r\n                        ArrayList<MedicineInfoRsponDTO> temp_list = response.body();\r\n\r\n\r\n                        for(int i = 0 ; i < temp_list.size(); i++){//서버에서 응답받은 약 리스트에 대해 각각 Prescritionitem 생성자를 생성하고 이를 list에 저장\r\n                            list.add(new Prescriptionitem(\"알약실벽코드\",\"알약 이미지 url\",\"알약 식별포장\",\"알약 제품명\"));\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ArrayList<MedicineInfoRsponDTO>> call, Throwable t) {\r\n                        finish();\r\n                    }\r\n                });*/\r\n                /**\r\n                 *\r\n                 * 서버 : 약품명을 서버에게 요청하기 위한 코드가 들어가야함\r\n                 *\r\n                 */\r\n\r\n\r\n               /* bool_end = true;\r\n\r\n            }\r\n        }\r\n    }*/\r\n    /*private Vision.Images.Annotate prepareAnnotationRequest(final Bitmap bitmap) throws IOException {\r\n        HttpTransport httpTransport = AndroidHttp.newCompatibleTransport();\r\n        JsonFactory jsonFactory = GsonFactory.getDefaultInstance();\r\n\r\n        VisionRequestInitializer requestInitializer =\r\n                new VisionRequestInitializer(CLOUD_VISION_API_KEY) {\r\n                    @Override\r\n                    protected void initializeVisionRequest(VisionRequest<?> visionRequest)\r\n                            throws IOException {\r\n                        super.initializeVisionRequest(visionRequest);\r\n                        String packageName = getPackageName();\r\n                        visionRequest.getRequestHeaders().set(ANDROID_PACKAGE_HEADER, packageName);\r\n                        String sig = PackageManagerUtils.getSignature(getPackageManager(), packageName);\r\n                        visionRequest.getRequestHeaders().set(ANDROID_CERT_HEADER, sig);\r\n                    }\r\n                };\r\n\r\n        Vision.Builder builder = new Vision.Builder(httpTransport, jsonFactory, null);\r\n        builder.setVisionRequestInitializer(requestInitializer);\r\n        Vision vision = builder.build();\r\n        BatchAnnotateImagesRequest batchAnnotateImagesRequest =\r\n                new BatchAnnotateImagesRequest();\r\n        batchAnnotateImagesRequest.setRequests(new ArrayList<AnnotateImageRequest>() {{\r\n            AnnotateImageRequest annotateImageRequest = new AnnotateImageRequest();\r\n            Image base64EncodedImage = new Image();\r\n            // Convert the bitmap to a JPEG\r\n            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 90, byteArrayOutputStream);\r\n            byte[] imageBytes = byteArrayOutputStream.toByteArray();\r\n\r\n            // Base64 encode the JPEG\r\n            base64EncodedImage.encodeContent(imageBytes);\r\n            annotateImageRequest.setImage(base64EncodedImage);\r\n\r\n            // add the features we want\r\n            annotateImageRequest.setFeatures(new ArrayList<Feature>() {{\r\n                Feature labelDetection = new Feature();\r\n                labelDetection.setType(\"TEXT_DETECTION\");\r\n                labelDetection.setMaxResults(MAX_LABEL_RESULTS);\r\n                add(labelDetection);\r\n            }});\r\n\r\n            add(annotateImageRequest);\r\n        }});\r\n\r\n        Vision.Images.Annotate annotateRequest =\r\n                vision.images().annotate(batchAnnotateImagesRequest);\r\n\r\n        annotateRequest.setDisableGZipContent(true);\r\n        return annotateRequest;\r\n    }*/\r\n    /*private void callCloudVision(final Bitmap bitmap) {\r\n        try {\r\n            AsyncTask<Object, Void, String> labelDetectionTask = new LableDetectionTask(this, prepareAnnotationRequest(bitmap));\r\n            labelDetectionTask.execute();\r\n        } catch (IOException e) {\r\n            Log.d(\"TAG\", \"failed to make API request because of other IOException \" +\r\n                    e.getMessage());\r\n        }\r\n    }*/\r\n    private String convertResponseToString(BatchAnnotateImagesResponse response) {\r\n        StringBuilder message = new StringBuilder();\r\n\r\n        List<EntityAnnotation> labels = response.getResponses().get(0).getTextAnnotations();\r\n\r\n        if (labels != null) {\r\n            for (EntityAnnotation label : labels) {\r\n                message.append(String.format(Locale.KOREAN, \"%s\", label.getDescription()));\r\n            }\r\n        } else {\r\n            message.append(\"nothing\");\r\n        }\r\n        return message.toString();\r\n    }\r\n\r\n    private class Dialog extends AsyncTask<Void, Void, Void> {\r\n        ProgressDialog progressDialog1 = new ProgressDialog(Search_prescriptionActivity.this);\r\n        @Override\r\n        protected void onPreExecute() {\r\n            progressDialog1.setProgressStyle(ProgressDialog.STYLE_SPINNER);\r\n            progressDialog1.setMessage(\"로딩중입니다..\");\r\n\r\n            progressDialog1.show();\r\n            super.onPreExecute();\r\n        }\r\n        @Override\r\n        protected Void doInBackground(Void... voids) {\r\n            while(!bool_end)\r\n                ;\r\n            bool_end = false;\r\n            return null;\r\n        }\r\n        @Override\r\n        protected void onPostExecute(Void result) {\r\n            progressDialog1.dismiss();\r\n            super.onPostExecute(result);\r\n        }\r\n        @Override\r\n        protected void onCancelled() {\r\n            super.onCancelled();\r\n        }\r\n    }\r\n\r\n\r\n    private void initView(){\r\n        Btn_add = findViewById(R.id.add_btn);\r\n        iv_back = findViewById(R.id.iv_back);\r\n        select_pill_list = new HashMap<Integer, String>();\r\n        itemseq_list = new ArrayList<String>();\r\n        list = new ArrayList<Prescriptionitem>();\r\n        prescriptionAdapter = new PrescriptionAdapter(list);\r\n        recyclerView = findViewById(R.id.recycler_list);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(getApplicationContext()));\r\n        recyclerView.setAdapter(prescriptionAdapter);\r\n        sharedPreferences = getSharedPreferences(\"setting\",0);\r\n        id = sharedPreferences.getString(\"id\",\"\");\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/smrpv2/ui/medicine/searchMed/Search_prescriptionActivity.java	(revision 5be85400d5afaeaad11a07bd0f0a995dc026ffff)
-+++ app/src/main/java/com/example/smrpv2/ui/medicine/searchMed/Search_prescriptionActivity.java	(date 1605949141221)
-@@ -22,6 +22,8 @@
- import androidx.recyclerview.widget.LinearLayoutManager;
- import androidx.recyclerview.widget.RecyclerView;
- import com.example.smrpv2.R;
-+import com.example.smrpv2.model.KaKaoResult;
-+import com.example.smrpv2.model.KakaoDto;
- import com.example.smrpv2.model.MedicineItem;
- import com.example.smrpv2.model.Message;
- import com.example.smrpv2.model.RegmedicineAsk;
-@@ -59,6 +61,9 @@
- import java.util.Map;
- import java.util.StringTokenizer;
- 
-+import okhttp3.MediaType;
-+import okhttp3.MultipartBody;
-+import okhttp3.RequestBody;
- import retrofit2.Call;
- import retrofit2.Callback;
- import retrofit2.Response;
-@@ -69,10 +74,6 @@
-  *
-  */
- public class Search_prescriptionActivity extends AppCompatActivity implements Serializable {
--    private static final String CLOUD_VISION_API_KEY = "AIzaSyDZfaBD1mddJVfGxgrhnUh0Lg02Mfc38KA";//구글 인증키
--    private static final String ANDROID_CERT_HEADER = "X-Android-Cert";
--    private static final String ANDROID_PACKAGE_HEADER = "X-Android-Package";
--    private static final int MAX_LABEL_RESULTS = 10;
-     private static final int MAX_DIMENSION = 1080;
- 
-     private ArrayList<Prescriptionitem> list;
-@@ -132,12 +133,13 @@
- 
-             }
-         });
-+        
-         iv_back.setOnClickListener(new View.OnClickListener() {
-             @Override
-             public void onClick(View v) {
-                 onBackPressed();
-             }
--        });
-+        });//뒤로가기
-         prescriptionAdapter.setOnClickListener(new PrescriptionAdapter.OnItemClickListener() {
-             @Override
-             public void onItemClick(PrescriptionAdapter.ViewHolder holder, View v, int position) {
-@@ -157,9 +159,6 @@
- 
-         });
- 
--
--
--
-         sendTakePhotoIntent();
- 
-     }
-@@ -167,21 +166,24 @@
- 
-     protected void onActivityResult(int requestCode, int resultCode, Intent data) {
- 
--        super.onActivityResult(requestCode, resultCode, data);
-+
-         if (requestCode == 672 && resultCode == RESULT_OK) {
- 
-             try {
--
-+                Log.d("photoUri", "photoUri: "+photoUri);
-                 bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), photoUri);
-             } catch (IOException e) {
-                 e.printStackTrace();
-             }
--
-             Uploading_bitmap(bitmap);
-+
-+
-         }else if(resultCode==RESULT_OK){ //팝업창 종료시
-             finish();
-         }else
-             onBackPressed();
-+
-+        super.onActivityResult(requestCode, resultCode, data);
-     }
-     private File createImageFile() throws IOException {
-         String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
-@@ -192,12 +194,12 @@
-                 ".jpg",         /* suffix */
-                 storageDir          /* directory */
-         );
--        return image;
-+        return image;  //이미를 저장할 File 객체
-     }
-     private void sendTakePhotoIntent() {
-         Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);// 내장 카메라 켜기
-         if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
--            File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/com.example.smrpv2/files/Pictures");//Android/data/com.raonstudio.cameratest/files
-+            File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/com.example.smrpv2/files/Pictures");
- 
-             if (!file.exists()) {
-                 file.mkdir();
-@@ -206,7 +208,7 @@
-             File photoFile = null;
- 
-             try {
--                photoFile = createImageFile();
-+                photoFile = createImageFile(); //createImageFile 저장할 이미지 파일 객체
-             } catch (IOException ex) {
- 
-             }
-@@ -214,6 +216,7 @@
-             if (photoFile != null) {
-                 photoUri = FileProvider.getUriForFile(this, getPackageName(), photoFile);
- 
-+                Log.d("photoUri", "photoUri: "+photoUri);
-                 takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);
-                 startActivityForResult(takePictureIntent, 672);
-             }
-@@ -234,9 +237,50 @@
-         if(bitmap != null){
-             bitmap = scaleBitmapDown(bitmap,MAX_DIMENSION);
- 
--           // callCloudVision(bitmap);
-+            callKakaoVision();
-         }
-     }
-+
-+    private void callKakaoVision(){
-+
-+
-+        File frontfile = new File(String.valueOf(photoUri));
-+
-+        try {
-+            Bitmap frontbitmap = MediaStore.Images.Media
-+                    .getBitmap(getContentResolver(), Uri.fromFile(frontfile));
-+        } catch (IOException e) {
-+            e.printStackTrace();
-+        }
-+
-+
-+        RequestBody body = RequestBody.create(MediaType.parse("image/*"), frontfile);
-+        MultipartBody.Part fPart = MultipartBody.Part.createFormData("image", "front.jpg", body);
-+
-+
-+        Call<KakaoDto> call = RetrofitHelper.getKaKaoOcr().create(RetrofitService_Server.class).sendKakaoOcr(fPart);
-+
-+        call.enqueue(new Callback<KakaoDto>() {
-+            @Override
-+            public void onResponse(Call<KakaoDto> call, Response<KakaoDto> response) {
-+
-+                for (int i = 0; i <response.body().getResult().size() ; i++) {
-+                    KaKaoResult kaKaoResult = response.body().getResult().get(i);
-+                    for( int j = 0 ; j <kaKaoResult.getRecognition_words().length;j++){
-+                        Log.d("OCR",kaKaoResult.getRecognition_words()[j]);
-+                    }
-+
-+                }
-+
-+
-+            }
-+
-+            @Override
-+            public void onFailure(Call<KakaoDto> call, Throwable t) {
-+                Log.d("실패카카오", t.toString());
-+            }
-+        });
-+    }
-     private Bitmap scaleBitmapDown(Bitmap bitmap, int maxDimension) {
- 
-         int originalWidth = bitmap.getWidth();
-@@ -256,160 +300,6 @@
-         return Bitmap.createScaledBitmap(bitmap, resizedWidth, resizedHeight, false);
-     }
- 
--    /*private class LableDetectionTask extends AsyncTask<Object, Void, String> {
--        private final WeakReference<Search_prescriptionActivity> mActivityWeakReference;
--        private Vision.Images.Annotate mRequest;
--        ProgressDialog progressDialog = new ProgressDialog(Search_prescriptionActivity.this);
--        LableDetectionTask(Search_prescriptionActivity activity, Vision.Images.Annotate annotate) {
--            mActivityWeakReference = new WeakReference<>(activity);
--            mRequest = annotate;
--        }
--        @Override
--        protected String doInBackground(Object... params) {
--            try {
--                BatchAnnotateImagesResponse response = mRequest.execute();
--                return convertResponseToString(response);
--
--            } catch (GoogleJsonResponseException e) {
--                Log.d("TAG", "failed to make API request because " + e.getContent());
--            } catch (IOException e) {
--                Log.d("TAG", "failed to make API request because of other IOException " +
--                        e.getMessage());
--            }
--
--            return "Cloud Vision API request failed. Check logs for details.";
--        }
--        @Override
--        protected void onPreExecute() {
--            progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
--            progressDialog.setMessage("로딩중입니다..");
--            progressDialog.show();
--            super.onPreExecute();
--        }
--        protected void onPostExecute(String result) {
--            Search_prescriptionActivity activity = mActivityWeakReference.get();
--            if (activity != null && !activity.isFinishing()) {
--                List<String> pill_list = new ArrayList();
--
--                //구글 OCR에서 인식된 문자가 없을 경우 nothing을 반환하기 떄문에 이를 제거
--                result = result.replaceAll("nothing","");
--                StringTokenizer token = new StringTokenizer(result , "\n");
--
--
--                while(token.hasMoreTokens()){// 구글 Ocr에서 응답 받은 ocr data를 \n 기준으로 token
--                    pill_list.add(token.nextToken());
--                }
--                if(pill_list.size()==0){
--                    progressDialog.dismiss();
--                    Intent intent = new Intent(getApplicationContext(), ErrorMessageActivity.class);
--                    intent.putExtra("data", "검색결과가 없습니다.\n\n 이전 페이지로 이동합니다.");
--                    startActivityForResult(intent, 1);
--
--                }else
--                    pill_list.remove(pill_list.size() -1);
--
--
--                Log.d("TAG", "onPostExecute list.size(): "+pill_list.size());
--                //서버에서 STring형 배열로 요청을 받기 떄문에 List를 STring배열로 변환
--                String[] result_array = (String[])pill_list.toArray(new String[pill_list.size()]);
--
--                /*for(String str : result_array)
--                    Log.d("TAG", "result_array: "+str+"\n");*/
--
--                //서버와 통신을 하기 위한 RetrofitService_Server 객체 생성성
--                /*retrofitService = RetrofitHelper.getRetrofitService_server();
--                Call<ArrayList<MedicineInfoRsponDTO>> call= retrofitService.medicinSendList(result_array);
--                call.enqueue(new Callback<ArrayList<MedicineInfoRsponDTO>>() {
--                    @Override
--                    public void onResponse(Call<ArrayList<MedicineInfoRsponDTO>> call, Response<ArrayList<MedicineInfoRsponDTO>> response) {
--
--                        ArrayList<MedicineInfoRsponDTO> temp_list = response.body();
--
--
--                        for(int i = 0 ; i < temp_list.size(); i++){//서버에서 응답받은 약 리스트에 대해 각각 Prescritionitem 생성자를 생성하고 이를 list에 저장
--                            list.add(new Prescriptionitem("알약실벽코드","알약 이미지 url","알약 식별포장","알약 제품명"));
--                        }
--
--
--                    }
--
--                    @Override
--                    public void onFailure(Call<ArrayList<MedicineInfoRsponDTO>> call, Throwable t) {
--                        finish();
--                    }
--                });*/
--                /**
--                 *
--                 * 서버 : 약품명을 서버에게 요청하기 위한 코드가 들어가야함
--                 *
--                 */
--
--
--               /* bool_end = true;
--
--            }
--        }
--    }*/
--    /*private Vision.Images.Annotate prepareAnnotationRequest(final Bitmap bitmap) throws IOException {
--        HttpTransport httpTransport = AndroidHttp.newCompatibleTransport();
--        JsonFactory jsonFactory = GsonFactory.getDefaultInstance();
--
--        VisionRequestInitializer requestInitializer =
--                new VisionRequestInitializer(CLOUD_VISION_API_KEY) {
--                    @Override
--                    protected void initializeVisionRequest(VisionRequest<?> visionRequest)
--                            throws IOException {
--                        super.initializeVisionRequest(visionRequest);
--                        String packageName = getPackageName();
--                        visionRequest.getRequestHeaders().set(ANDROID_PACKAGE_HEADER, packageName);
--                        String sig = PackageManagerUtils.getSignature(getPackageManager(), packageName);
--                        visionRequest.getRequestHeaders().set(ANDROID_CERT_HEADER, sig);
--                    }
--                };
--
--        Vision.Builder builder = new Vision.Builder(httpTransport, jsonFactory, null);
--        builder.setVisionRequestInitializer(requestInitializer);
--        Vision vision = builder.build();
--        BatchAnnotateImagesRequest batchAnnotateImagesRequest =
--                new BatchAnnotateImagesRequest();
--        batchAnnotateImagesRequest.setRequests(new ArrayList<AnnotateImageRequest>() {{
--            AnnotateImageRequest annotateImageRequest = new AnnotateImageRequest();
--            Image base64EncodedImage = new Image();
--            // Convert the bitmap to a JPEG
--            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
--            bitmap.compress(Bitmap.CompressFormat.JPEG, 90, byteArrayOutputStream);
--            byte[] imageBytes = byteArrayOutputStream.toByteArray();
--
--            // Base64 encode the JPEG
--            base64EncodedImage.encodeContent(imageBytes);
--            annotateImageRequest.setImage(base64EncodedImage);
--
--            // add the features we want
--            annotateImageRequest.setFeatures(new ArrayList<Feature>() {{
--                Feature labelDetection = new Feature();
--                labelDetection.setType("TEXT_DETECTION");
--                labelDetection.setMaxResults(MAX_LABEL_RESULTS);
--                add(labelDetection);
--            }});
--
--            add(annotateImageRequest);
--        }});
--
--        Vision.Images.Annotate annotateRequest =
--                vision.images().annotate(batchAnnotateImagesRequest);
--
--        annotateRequest.setDisableGZipContent(true);
--        return annotateRequest;
--    }*/
--    /*private void callCloudVision(final Bitmap bitmap) {
--        try {
--            AsyncTask<Object, Void, String> labelDetectionTask = new LableDetectionTask(this, prepareAnnotationRequest(bitmap));
--            labelDetectionTask.execute();
--        } catch (IOException e) {
--            Log.d("TAG", "failed to make API request because of other IOException " +
--                    e.getMessage());
--        }
--    }*/
-     private String convertResponseToString(BatchAnnotateImagesResponse response) {
-         StringBuilder message = new StringBuilder();
- 
-Index: .idea/gradle.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/gradle.xml	(revision 5be85400d5afaeaad11a07bd0f0a995dc026ffff)
-+++ .idea/gradle.xml	(date 1605846447411)
-@@ -15,6 +15,7 @@
-           </set>
-         </option>
-         <option name="resolveModulePerSourceSet" value="false" />
-+        <option name="useQualifiedModuleNames" value="true" />
-       </GradleProjectSettings>
-     </option>
-   </component>
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CMakeSettings\">\r\n    <configurations>\r\n      <configuration PROFILE_NAME=\"Debug\" CONFIG_NAME=\"Debug\" />\r\n    </configurations>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_7\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/misc.xml	(revision 5be85400d5afaeaad11a07bd0f0a995dc026ffff)
-+++ .idea/misc.xml	(date 1605846682324)
-@@ -5,7 +5,7 @@
-       <configuration PROFILE_NAME="Debug" CONFIG_NAME="Debug" />
-     </configurations>
-   </component>
--  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" project-jdk-name="1.8" project-jdk-type="JavaSDK">
-+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
-     <output url="file://$PROJECT_DIR$/build/classes" />
-   </component>
-   <component name="ProjectType">
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-21_오후_5_07_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-21_오후_5_07_[Default_Changelist]/shelved.patch	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-21_오후_5_07_[Default_Changelist]/shelved.patch	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
@@ -1,320 +0,0 @@
-Index: app/src/main/java/com/example/smrpv2/ui/main/MainActivity.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.smrpv2.ui.main;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.app.Dialog;\r\nimport android.app.ProgressDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.navigation.ui.AppBarConfiguration;\r\nimport androidx.navigation.ui.NavigationUI;\r\nimport com.example.smrpv2.R;\r\nimport com.example.smrpv2.model.user_model.User;\r\nimport com.example.smrpv2.model.user_model.UserInform;\r\nimport com.example.smrpv2.ui.common.SharedData;\r\nimport com.example.smrpv2.ui.home.HomeFragment;\r\nimport com.example.smrpv2.ui.login.LoginActivity;\r\nimport com.google.android.material.navigation.NavigationView;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n\r\n    private AppBarConfiguration mAppBarConfiguration;\r\n    private DrawerLayout drawer;\r\n    String name;\r\n    Toolbar toolbar;\r\n    \r\n    private final long FINISH_INTERVAL_TIME = 2000;\r\n    private long backPressedTime = 0;\r\n    private Dialog enddialog;\r\n    private TextView headr_textView;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        toolbar= findViewById(R.id.appbar);\r\n        toolbar.setTitle(R.string.app_bar_title);\r\n        setSupportActionBar(toolbar);\r\n        SharedData sharedData = new SharedData(this);\r\n        boolean auto_state = sharedData.isAuto_login();\r\n        if(auto_state)\r\n            Toast.makeText(getApplicationContext(),\"자동로그인이 되었습니다.\",Toast.LENGTH_LONG).show();\r\n\r\n\r\n        //name = getIntent().getStringExtra(\"name\");\r\n        name = UserInform.getName();\r\n        drawer = findViewById(R.id.drawer_layout);\r\n\r\n        NavigationView navigationView = findViewById(R.id.nav_view); //navigationView을 사용하기 위한 객체 선언\r\n        navigationView.setItemIconTintList(null);\r\n        View header = navigationView.getHeaderView(0);\r\n\r\n        headr_textView = header.findViewById(R.id.tv_header);//\r\n        headr_textView.setText(name);\r\n        mAppBarConfiguration = new AppBarConfiguration.Builder(\r\n                R.id.nav_home, R.id.nav_alarm, R.id.nav_hospital,\r\n                R.id.nav_inquiry, R.id.nav_logout,R.id.nav_medicine,R.id.nav_pharmacy,R.id.nav_report_notice)\r\n                .setDrawerLayout(drawer)\r\n                .build();\r\n        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);\r\n        NavigationUI.setupActionBarWithNavController(this, navController, mAppBarConfiguration);\r\n        NavigationUI.setupWithNavController(navigationView, navController);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed(){\r\n        long tempTime = System.currentTimeMillis();\r\n        long intervalTime = tempTime - backPressedTime;\r\n\r\n\r\n        if (drawer.isDrawerOpen(GravityCompat.START)) {\r\n            drawer.closeDrawer(GravityCompat.START);\r\n        }else if (0 <= intervalTime && FINISH_INTERVAL_TIME >= intervalTime) {\r\n            super.onBackPressed();\r\n            super.onBackPressed();\r\n        }\r\n        else {\r\n            backPressedTime = tempTime;\r\n            Toast.makeText(getApplicationContext(), \"한번 더 뒤로가기 버튼을 누르시면 종료됩니다.\", Toast.LENGTH_SHORT).show();\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n    @Override\r\n    public boolean onSupportNavigateUp() {\r\n        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);\r\n        return NavigationUI.navigateUp(navController, mAppBarConfiguration)\r\n                || super.onSupportNavigateUp();\r\n    }\r\n\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.appbar_action, menu) ;\r\n\r\n        return true ;\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n\r\n        switch (item.getItemId()){\r\n            case R.id.logout_btn:\r\n                logout_dialog();\r\n                break;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    public void logout_dialog(){\r\n        final AlertDialog.Builder alertdialog = new AlertDialog.Builder(this);\r\n\r\n        alertdialog.setCancelable(false);//외부영역 터치시 dismiss되는것을 방지\r\n        final SharedData sharedData = new SharedData(this);\r\n        alertdialog.setMessage(\"현재 계정을 종료하시겠습니까?\");\r\n\r\n\r\n\r\n        alertdialog.setPositiveButton(\"네\", new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n\r\n                sharedData.reset(); //로그아웃시 사용자의 자동로그인을 해제하기위해 reset 메소드 실행\r\n                HomeFragment homeFragment = new HomeFragment().getInstance();\r\n                if(homeFragment != null) //홈프래그먼트에 runOnUiThread를 멈추기 위해서 해당 if문 사용\r\n                    homeFragment.isRunning = false;\r\n                new MainActivity.Dialog().execute();\r\n\r\n               // User user = new User(user_id,\"\",user_pass,\"\",\"\",\"\"); //서버에서 USER 클래스를 받기에 불필요한 매개변수가 들어가도 이해할것\r\n                /**\r\n                 * 서버\r\n                 * 알람에 관한것\r\n                 */\r\n\r\n            }\r\n        });\r\n\r\n        alertdialog.setNegativeButton(\"취소\", new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                dialog.cancel();\r\n            }\r\n        });\r\n\r\n        AlertDialog alert = alertdialog.create();\r\n        alert.show();\r\n    }\r\n    private class Dialog extends AsyncTask<Void,Void,Void> {\r\n        ProgressDialog progressDialog = new ProgressDialog(MainActivity.this);\r\n        @Override\r\n        protected void onPreExecute() {\r\n            super.onPreExecute();\r\n            progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);\r\n            progressDialog.setMessage(\"로그아웃 중입니다.\");\r\n            progressDialog.show();\r\n\r\n        }\r\n        @Override\r\n        protected Void doInBackground(Void... voids) {\r\n            try {\r\n                Thread.sleep(2500); // 2초 지속\r\n\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            progressDialog.dismiss();\r\n            return null;\r\n        }\r\n        @Override\r\n        protected void onPostExecute(Void result) {\r\n            try {\r\n                Thread.sleep(1000);\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n            Intent intent = new Intent(MainActivity.this, LoginActivity.class); //로그인페이지로 이동\r\n            startActivity(intent);\r\n            finish();\r\n            super.onPostExecute(result);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n\r\n        super.onDestroy();\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/smrpv2/ui/main/MainActivity.java	(revision 6a30f946611dfa621aed0d4bf978bb836a3dc027)
-+++ app/src/main/java/com/example/smrpv2/ui/main/MainActivity.java	(date 1605887744297)
-@@ -39,7 +39,7 @@
-     private DrawerLayout drawer;
-     String name;
-     Toolbar toolbar;
--    
-+
-     private final long FINISH_INTERVAL_TIME = 2000;
-     private long backPressedTime = 0;
-     private Dialog enddialog;
-Index: app/src/main/java/com/example/smrpv2/ui/medicine/medshot/CameraBackFragment.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>/*\r\n * Copyright 2017 The Android Open Source Project\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *       http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npackage com.example.smrpv2.ui.medicine.medshot;\r\n\r\n\r\nimport android.Manifest;\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.Configuration;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.ImageFormat;\r\nimport android.graphics.Matrix;\r\nimport android.graphics.Paint;\r\nimport android.graphics.PixelFormat;\r\nimport android.graphics.Point;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.PorterDuffXfermode;\r\nimport android.graphics.RectF;\r\nimport android.graphics.SurfaceTexture;\r\nimport android.hardware.camera2.CameraAccessException;\r\nimport android.hardware.camera2.CameraCaptureSession;\r\nimport android.hardware.camera2.CameraCharacteristics;\r\nimport android.hardware.camera2.CameraDevice;\r\nimport android.hardware.camera2.CameraManager;\r\nimport android.hardware.camera2.CameraMetadata;\r\nimport android.hardware.camera2.CaptureRequest;\r\nimport android.hardware.camera2.CaptureResult;\r\nimport android.hardware.camera2.TotalCaptureResult;\r\nimport android.hardware.camera2.params.StreamConfigurationMap;\r\nimport android.media.Image;\r\nimport android.media.ImageReader;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.HandlerThread;\r\nimport android.util.Log;\r\nimport android.util.Size;\r\nimport android.util.SparseIntArray;\r\nimport android.view.Display;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Surface;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.SurfaceView;\r\nimport android.view.TextureView;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.example.smrpv2.R;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.nio.ByteBuffer;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\nimport java.util.concurrent.Semaphore;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\npublic class CameraBackFragment extends Fragment\r\n        implements View.OnClickListener, ActivityCompat.OnRequestPermissionsResultCallback {\r\n\r\n    /**\r\n     * Conversion from screen rotation to JPEG orientation.\r\n     */\r\n    ImageView imageView;\r\n    LinearLayout linearlayout;\r\n    SurfaceView surfaceView;\r\n    int width ;\r\n    int height;\r\n    String frontImg;\r\n    private static final SparseIntArray ORIENTATIONS = new SparseIntArray();\r\n    private static final int REQUEST_CAMERA_PERMISSION = 1;\r\n    private static final String FRAGMENT_DIALOG = \"dialog\";\r\n\r\n    static {\r\n        ORIENTATIONS.append(Surface.ROTATION_0, 90);\r\n        ORIENTATIONS.append(Surface.ROTATION_90, 0);\r\n        ORIENTATIONS.append(Surface.ROTATION_180, 270);\r\n        ORIENTATIONS.append(Surface.ROTATION_270, 180);\r\n    }\r\n\r\n    /**\r\n     * Tag for the {@link Log}.\r\n     */\r\n    private static final String TAG = \"Camera2BasicFragment2\";\r\n\r\n    /**\r\n     * Camera state: Showing camera preview.\r\n     */\r\n    private static final int STATE_PREVIEW = 0;\r\n\r\n    /**\r\n     * Camera state: Waiting for the focus to be locked.\r\n     */\r\n    private static final int STATE_WAITING_LOCK = 1;\r\n\r\n    /**\r\n     * Camera state: Waiting for the exposure to be precapture state.\r\n     */\r\n    private static final int STATE_WAITING_PRECAPTURE = 2;\r\n\r\n    /**\r\n     * Camera state: Waiting for the exposure state to be something other than precapture.\r\n     */\r\n    private static final int STATE_WAITING_NON_PRECAPTURE = 3;\r\n\r\n    /**\r\n     * Camera state: Picture was taken.\r\n     */\r\n    private static final int STATE_PICTURE_TAKEN = 4;\r\n\r\n    /**\r\n     * Max preview width that is guaranteed by Camera2 API\r\n     */\r\n    private static final int MAX_PREVIEW_WIDTH = 1920;\r\n\r\n    /**\r\n     * Max preview height that is guaranteed by Camera2 API\r\n     */\r\n    private static final int MAX_PREVIEW_HEIGHT = 1080;\r\n\r\n    /**\r\n     * {@link TextureView.SurfaceTextureListener} handles several lifecycle events on a\r\n     * {@link TextureView}.\r\n     */\r\n    private final TextureView.SurfaceTextureListener mSurfaceTextureListener\r\n            = new TextureView.SurfaceTextureListener() {\r\n\r\n        @Override\r\n        public void onSurfaceTextureAvailable(SurfaceTexture texture, int width, int height) {\r\n            openCamera(width, height);\r\n        }\r\n\r\n        @Override\r\n        public void onSurfaceTextureSizeChanged(SurfaceTexture texture, int width, int height) {\r\n            configureTransform(width, height);\r\n        }\r\n\r\n        @Override\r\n        public boolean onSurfaceTextureDestroyed(SurfaceTexture texture) {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public void onSurfaceTextureUpdated(SurfaceTexture texture) {\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * ID of the current {@link CameraDevice}.\r\n     */\r\n    private String mCameraId;\r\n\r\n    /**\r\n     * An {@link AutoFitTextureView} for camera preview.\r\n     */\r\n    private AutoFitTextureView mTextureView;\r\n\r\n    /**\r\n     * A {@link CameraCaptureSession } for camera preview.\r\n     */\r\n    private CameraCaptureSession mCaptureSession;\r\n\r\n    /**\r\n     * A reference to the opened {@link CameraDevice}.\r\n     */\r\n    private CameraDevice mCameraDevice;\r\n\r\n    /**\r\n     * The {@link Size} of camera preview.\r\n     */\r\n    private Size mPreviewSize;\r\n\r\n    /**\r\n     * {@link CameraDevice.StateCallback} is called when {@link CameraDevice} changes its state.\r\n     */\r\n    private final CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() {\r\n\r\n        @Override\r\n        public void onOpened(@NonNull CameraDevice cameraDevice) {\r\n            // This method is called when the camera is opened.  We start camera preview here.\r\n            mCameraOpenCloseLock.release();\r\n            mCameraDevice = cameraDevice;\r\n            createCameraPreviewSession();\r\n        }\r\n\r\n        @Override\r\n        public void onDisconnected(@NonNull CameraDevice cameraDevice) {\r\n            mCameraOpenCloseLock.release();\r\n            cameraDevice.close();\r\n            mCameraDevice = null;\r\n        }\r\n\r\n        @Override\r\n        public void onError(@NonNull CameraDevice cameraDevice, int error) {\r\n            mCameraOpenCloseLock.release();\r\n            cameraDevice.close();\r\n            mCameraDevice = null;\r\n            Activity activity = getActivity();\r\n            if (null != activity) {\r\n                activity.finish();\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * An additional thread for running tasks that shouldn't block the UI.\r\n     */\r\n    private HandlerThread mBackgroundThread;\r\n\r\n    /**\r\n     * A {@link Handler} for running tasks in the background.\r\n     */\r\n    private Handler mBackgroundHandler;\r\n\r\n    /**\r\n     * An {@link ImageReader} that handles still image capture.\r\n     */\r\n    private ImageReader mImageReader;\r\n\r\n    /**\r\n     * This is the output file for our picture.\r\n     */\r\n    private File mFile;\r\n\r\n    /**\r\n     * This a callback object for the {@link ImageReader}. \"onImageAvailable\" will be called when a\r\n     * still image is ready to be saved.\r\n     */\r\n    private final ImageReader.OnImageAvailableListener mOnImageAvailableListener\r\n            = new ImageReader.OnImageAvailableListener() {\r\n\r\n        @Override\r\n        public void onImageAvailable(ImageReader reader) {\r\n            mBackgroundHandler.post(new ImageSaver(reader.acquireNextImage(), mFile));\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * {@link CaptureRequest.Builder} for the camera preview\r\n     */\r\n    private CaptureRequest.Builder mPreviewRequestBuilder;\r\n\r\n    /**\r\n     * {@link CaptureRequest} generated by {@link #mPreviewRequestBuilder}\r\n     */\r\n    private CaptureRequest mPreviewRequest;\r\n\r\n    /**\r\n     * The current state of camera state for taking pictures.\r\n     *\r\n     * @see #mCaptureCallback\r\n     */\r\n    private int mState = STATE_PREVIEW;\r\n\r\n    /**\r\n     * A {@link Semaphore} to prevent the app from exiting before closing the camera.\r\n     */\r\n    private Semaphore mCameraOpenCloseLock = new Semaphore(1);\r\n\r\n    /**\r\n     * Whether the current camera device supports Flash or not.\r\n     */\r\n    private boolean mFlashSupported;\r\n\r\n    /**\r\n     * Orientation of the camera sensor\r\n     */\r\n    private int mSensorOrientation;\r\n\r\n    /**\r\n     * A {@link CameraCaptureSession.CaptureCallback} that handles events related to JPEG capture.\r\n     */\r\n    private CameraCaptureSession.CaptureCallback mCaptureCallback\r\n            = new CameraCaptureSession.CaptureCallback() {\r\n\r\n        private void process(CaptureResult result) {\r\n            switch (mState) {\r\n                case STATE_PREVIEW: {\r\n                    // We have nothing to do when the camera preview is working normally.\r\n                    break;\r\n                }\r\n                case STATE_WAITING_LOCK: {\r\n                    Integer afState = result.get(CaptureResult.CONTROL_AF_STATE);\r\n                    if (afState == null) {\r\n                        captureStillPicture();\r\n                    } else if (CaptureResult.CONTROL_AF_STATE_FOCUSED_LOCKED == afState ||\r\n                            CaptureResult.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED == afState) {\r\n                        // CONTROL_AE_STATE can be null on some devices\r\n                        Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);\r\n                        if (aeState == null ||\r\n                                aeState == CaptureResult.CONTROL_AE_STATE_CONVERGED) {\r\n                            mState = STATE_PICTURE_TAKEN;\r\n                            captureStillPicture();\r\n                        } else {\r\n                            runPrecaptureSequence();\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case STATE_WAITING_PRECAPTURE: {\r\n                    // CONTROL_AE_STATE can be null on some devices\r\n                    Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);\r\n                    if (aeState == null ||\r\n                            aeState == CaptureResult.CONTROL_AE_STATE_PRECAPTURE ||\r\n                            aeState == CaptureRequest.CONTROL_AE_STATE_FLASH_REQUIRED) {\r\n                        mState = STATE_WAITING_NON_PRECAPTURE;\r\n                    }\r\n                    break;\r\n                }\r\n                case STATE_WAITING_NON_PRECAPTURE: {\r\n                    // CONTROL_AE_STATE can be null on some devices\r\n                    Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);\r\n                    if (aeState == null || aeState != CaptureResult.CONTROL_AE_STATE_PRECAPTURE) {\r\n                        mState = STATE_PICTURE_TAKEN;\r\n                        captureStillPicture();\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onCaptureProgressed(@NonNull CameraCaptureSession session,\r\n                                        @NonNull CaptureRequest request,\r\n                                        @NonNull CaptureResult partialResult) {\r\n            process(partialResult);\r\n        }\r\n\r\n        @Override\r\n        public void onCaptureCompleted(@NonNull CameraCaptureSession session,\r\n                                       @NonNull CaptureRequest request,\r\n                                       @NonNull TotalCaptureResult result) {\r\n            process(result);\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Shows a {@link Toast} on the UI thread.\r\n     *\r\n     * @param text The message to show\r\n     */\r\n    private void showToast(final String text) {\r\n        final Activity activity = getActivity();\r\n        if (activity != null) {\r\n            activity.runOnUiThread(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    Toast.makeText(activity, text, Toast.LENGTH_SHORT).show();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given {@code choices} of {@code Size}s supported by a camera, choose the smallest one that\r\n     * is at least as large as the respective texture view size, and that is at most as large as the\r\n     * respective max size, and whose aspect ratio matches with the specified value. If such size\r\n     * doesn't exist, choose the largest one that is at most as large as the respective max size,\r\n     * and whose aspect ratio matches with the specified value.\r\n     *\r\n     * @param choices           The list of sizes that the camera supports for the intended output\r\n     *                          class\r\n     * @param textureViewWidth  The width of the texture view relative to sensor coordinate\r\n     * @param textureViewHeight The height of the texture view relative to sensor coordinate\r\n     * @param maxWidth          The maximum width that can be chosen\r\n     * @param maxHeight         The maximum height that can be chosen\r\n     * @param aspectRatio       The aspect ratio\r\n     * @return The optimal {@code Size}, or an arbitrary one if none were big enough\r\n     */\r\n    private static Size chooseOptimalSize(Size[] choices, int textureViewWidth,\r\n                                          int textureViewHeight, int maxWidth, int maxHeight, Size aspectRatio) {\r\n\r\n        // Collect the supported resolutions that are at least as big as the preview Surface\r\n        List<Size> bigEnough = new ArrayList<>();\r\n        // Collect the supported resolutions that are smaller than the preview Surface\r\n        List<Size> notBigEnough = new ArrayList<>();\r\n        int w = aspectRatio.getWidth();\r\n        int h = aspectRatio.getHeight();\r\n        for (Size option : choices) {\r\n            if (option.getWidth() <= maxWidth && option.getHeight() <= maxHeight &&\r\n                    option.getHeight() == option.getWidth() * h / w) {\r\n                if (option.getWidth() >= textureViewWidth &&\r\n                        option.getHeight() >= textureViewHeight) {\r\n                    bigEnough.add(option);\r\n                } else {\r\n                    notBigEnough.add(option);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Pick the smallest of those big enough. If there is no one big enough, pick the\r\n        // largest of those not big enough.\r\n        if (bigEnough.size() > 0) {\r\n            return Collections.min(bigEnough, new CompareSizesByArea());\r\n        } else if (notBigEnough.size() > 0) {\r\n            return Collections.max(notBigEnough, new CompareSizesByArea());\r\n        } else {\r\n            Log.e(TAG, \"Couldn't find any suitable preview size\");\r\n            return choices[0];\r\n        }\r\n    }\r\n\r\n    public static CameraBackFragment newInstance() {\r\n        return new CameraBackFragment();\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        frontImg = getActivity().getIntent().getStringExtra(\"uri\");\r\n        Log.d(TAG, \"frontImg: \"+frontImg);\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        View  view =inflater.inflate(R.layout.fragment_camera_back, container, false);\r\n\r\n\r\n        return view;\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(final View view, Bundle savedInstanceState) {\r\n        view.findViewById(R.id.picture).setOnClickListener(this);\r\n        view.findViewById(R.id.info).setOnClickListener(this);\r\n        mTextureView = (AutoFitTextureView) view.findViewById(R.id.texture);\r\n        surfaceView = (SurfaceView) view.findViewById(R.id.surfaceView);\r\n        //imageView= view.findViewById(R.id.images);\r\n\r\n        surfaceView.setZOrderOnTop(true);\r\n        SurfaceHolder mHolder = surfaceView.getHolder();\r\n        mHolder.setFormat(PixelFormat.TRANSPARENT);\r\n        mHolder.addCallback(new SurfaceHolder.Callback() {\r\n            @Override\r\n            public void surfaceCreated(SurfaceHolder holder) {\r\n                Canvas canvas = holder.lockCanvas();\r\n                if (canvas == null) {\r\n                    Log.e(TAG, \"Cannot draw onto the canvas as it's null\");\r\n                } else {\r\n                    /*Paint myPaint = new Paint();\r\n                    myPaint.setColor(Color.rgb(100, 20, 50));\r\n\r\n                    myPaint.setStrokeWidth(10);\r\n                    myPaint.setStyle(Paint.Style.STROKE);\r\n                    canvas.drawRect(100, 100, 200, 200, myPaint);*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    Display display =  getActivity().getWindowManager().getDefaultDisplay() ;\r\n                    Point size = new Point();\r\n                    display.getRealSize(size); // or getSize(size)\r\n                    width = size.x;\r\n                    height = size.y;\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    Paint paint = new Paint();\r\n                    paint.setColor(Color.rgb(100, 20, 50));\r\n                    canvas.drawRect(width/2-112,height/2-112,width/2+112,height/2+112,paint);\r\n\r\n                    paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_OUT));\r\n                    paint.setColor(Color.argb(100,0,0,0));\r\n                    canvas.drawRect(0,0,width,height,paint);\r\n\r\n                    // paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST));\r\n\r\n                    //paint.setARGB(50,0,0,0);\r\n                    //canvas.drawRect(100,100,200,200,paint);\r\n\r\n                    //canvas.drawRect(0,0,500,500,paint);\r\n\r\n\r\n\r\n                    holder.unlockCanvasAndPost(canvas);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void surfaceDestroyed(SurfaceHolder holder) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onActivityCreated(Bundle savedInstanceState) {\r\n        super.onActivityCreated(savedInstanceState);\r\n        mFile = new File(getActivity().getExternalFilesDir(null), \"picB.jpg\");\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        startBackgroundThread();\r\n\r\n        // When the screen is turned off and turned back on, the SurfaceTexture is already\r\n        // available, and \"onSurfaceTextureAvailable\" will not be called. In that case, we can open\r\n        // a camera and start preview from here (otherwise, we wait until the surface is ready in\r\n        // the SurfaceTextureListener).\r\n        if (mTextureView.isAvailable()) {\r\n            openCamera(mTextureView.getWidth(), mTextureView.getHeight());\r\n        } else {\r\n            mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        closeCamera();\r\n        stopBackgroundThread();\r\n        super.onPause();\r\n    }\r\n\r\n    private void requestCameraPermission() {\r\n        if (shouldShowRequestPermissionRationale(Manifest.permission.CAMERA)) {\r\n            new ConfirmationDialog().show(getChildFragmentManager(), FRAGMENT_DIALOG);\r\n        } else {\r\n            requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CAMERA_PERMISSION);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,\r\n                                           @NonNull int[] grantResults) {\r\n        if (requestCode == REQUEST_CAMERA_PERMISSION) {\r\n            if (grantResults.length != 1 || grantResults[0] != PackageManager.PERMISSION_GRANTED) {\r\n                ErrorDialog.newInstance(getString(R.string.request_permission))\r\n                        .show(getChildFragmentManager(), FRAGMENT_DIALOG);\r\n            }\r\n        } else {\r\n            super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets up member variables related to camera.\r\n     *\r\n     * @param width  The width of available size for camera preview\r\n     * @param height The height of available size for camera preview\r\n     */\r\n    @SuppressWarnings(\"SuspiciousNameCombination\")\r\n    private void setUpCameraOutputs(int width, int height) {\r\n        Activity activity = getActivity();\r\n        CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);\r\n        try {\r\n            for (String cameraId : manager.getCameraIdList()) {\r\n                CameraCharacteristics characteristics\r\n                        = manager.getCameraCharacteristics(cameraId);\r\n\r\n                // We don't use a front facing camera in this sample.\r\n                Integer facing = characteristics.get(CameraCharacteristics.LENS_FACING);\r\n                if (facing != null && facing == CameraCharacteristics.LENS_FACING_FRONT) {\r\n                    continue;\r\n                }\r\n\r\n                StreamConfigurationMap map = characteristics.get(\r\n                        CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);\r\n                if (map == null) {\r\n                    continue;\r\n                }\r\n\r\n                // For still image captures, we use the largest available size.\r\n                Size largest = Collections.max(\r\n                        Arrays.asList(map.getOutputSizes(ImageFormat.JPEG)),\r\n                        new CompareSizesByArea());\r\n\r\n                mImageReader = ImageReader.newInstance(width, height,\r\n                        ImageFormat.JPEG, /*maxImages*/2);\r\n                mImageReader.setOnImageAvailableListener(\r\n                        mOnImageAvailableListener, mBackgroundHandler);\r\n\r\n                // Find out if we need to swap dimension to get the preview size relative to sensor\r\n                // coordinate.\r\n                int displayRotation = activity.getWindowManager().getDefaultDisplay().getRotation();\r\n                //noinspection ConstantConditions\r\n                mSensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION);\r\n                boolean swappedDimensions = false;\r\n                switch (displayRotation) {\r\n                    case Surface.ROTATION_0:\r\n                    case Surface.ROTATION_180:\r\n                        if (mSensorOrientation == 90 || mSensorOrientation == 270) {\r\n                            swappedDimensions = true;\r\n                        }\r\n                        break;\r\n                    case Surface.ROTATION_90:\r\n                    case Surface.ROTATION_270:\r\n                        if (mSensorOrientation == 0 || mSensorOrientation == 180) {\r\n                            swappedDimensions = true;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        Log.e(TAG, \"Display rotation is invalid: \" + displayRotation);\r\n                }\r\n\r\n                Point displaySize = new Point();\r\n                activity.getWindowManager().getDefaultDisplay().getSize(displaySize);\r\n                int rotatedPreviewWidth = width;\r\n                int rotatedPreviewHeight = height;\r\n                int maxPreviewWidth = displaySize.x;\r\n                int maxPreviewHeight = displaySize.y;\r\n\r\n                if (swappedDimensions) {\r\n                    rotatedPreviewWidth = height;\r\n                    rotatedPreviewHeight = width;\r\n                    maxPreviewWidth = displaySize.y;\r\n                    maxPreviewHeight = displaySize.x;\r\n                }\r\n\r\n                if (maxPreviewWidth > MAX_PREVIEW_WIDTH) {\r\n                    maxPreviewWidth = MAX_PREVIEW_WIDTH;\r\n                }\r\n\r\n                if (maxPreviewHeight > MAX_PREVIEW_HEIGHT) {\r\n                    maxPreviewHeight = MAX_PREVIEW_HEIGHT;\r\n                }\r\n\r\n\r\n\r\n                mPreviewSize = chooseOptimalSize(map.getOutputSizes(SurfaceTexture.class),\r\n                        rotatedPreviewWidth, rotatedPreviewHeight, maxPreviewWidth,\r\n                        maxPreviewHeight, largest);\r\n\r\n\r\n                // We fit the aspect ratio of TextureView to the size of preview we picked.\r\n                int orientation = getResources().getConfiguration().orientation;\r\n                if (orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n                    mTextureView.setAspectRatio(\r\n                            mPreviewSize.getWidth(), mPreviewSize.getHeight());\r\n                } else {\r\n                    mTextureView.setAspectRatio(\r\n                            mPreviewSize.getHeight(), mPreviewSize.getWidth());\r\n                }\r\n\r\n                // Check if the flash is supported.\r\n                Boolean available = characteristics.get(CameraCharacteristics.FLASH_INFO_AVAILABLE);\r\n                mFlashSupported = available == null ? false : available;\r\n\r\n                mCameraId = cameraId;\r\n                return;\r\n            }\r\n        } catch (CameraAccessException e) {\r\n            e.printStackTrace();\r\n        } catch (NullPointerException e) {\r\n            // Currently an NPE is thrown when the Camera2API is used but not supported on the\r\n            // device this code runs.\r\n            ErrorDialog.newInstance(getString(R.string.camera_error))\r\n                    .show(getChildFragmentManager(), FRAGMENT_DIALOG);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Opens the camera specified by {@link CameraBackFragment#mCameraId}.\r\n     */\r\n    private void openCamera(int width, int height) {\r\n        if (ContextCompat.checkSelfPermission(Objects.requireNonNull(getActivity()), Manifest.permission.CAMERA)\r\n                != PackageManager.PERMISSION_GRANTED) {\r\n            requestCameraPermission();\r\n            return;\r\n        }\r\n        setUpCameraOutputs(width, height);\r\n        configureTransform(width, height);\r\n        Activity activity = getActivity();\r\n        CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);\r\n        try {\r\n            if (!mCameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {\r\n                throw new RuntimeException(\"Time out waiting to lock camera opening.\");\r\n            }\r\n            manager.openCamera(mCameraId, mStateCallback, mBackgroundHandler);\r\n        } catch (CameraAccessException e) {\r\n            e.printStackTrace();\r\n        } catch (InterruptedException e) {\r\n            throw new RuntimeException(\"Interrupted while trying to lock camera opening.\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes the current {@link CameraDevice}.\r\n     */\r\n    private void closeCamera() {\r\n        try {\r\n            mCameraOpenCloseLock.acquire();\r\n            if (null != mCaptureSession) {\r\n                mCaptureSession.close();\r\n                mCaptureSession = null;\r\n            }\r\n            if (null != mCameraDevice) {\r\n                mCameraDevice.close();\r\n                mCameraDevice = null;\r\n            }\r\n            if (null != mImageReader) {\r\n                mImageReader.close();\r\n                mImageReader = null;\r\n            }\r\n        } catch (InterruptedException e) {\r\n            throw new RuntimeException(\"Interrupted while trying to lock camera closing.\", e);\r\n        } finally {\r\n            mCameraOpenCloseLock.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a background thread and its {@link Handler}.\r\n     */\r\n    private void startBackgroundThread() {\r\n        mBackgroundThread = new HandlerThread(\"CameraBackground\");\r\n        mBackgroundThread.start();\r\n        mBackgroundHandler = new Handler(mBackgroundThread.getLooper());\r\n    }\r\n\r\n    /**\r\n     * Stops the background thread and its {@link Handler}.\r\n     */\r\n    private void stopBackgroundThread() {\r\n        mBackgroundThread.quitSafely();\r\n        try {\r\n            mBackgroundThread.join();\r\n            mBackgroundThread = null;\r\n            mBackgroundHandler = null;\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new {@link CameraCaptureSession} for camera preview.\r\n     */\r\n    private void createCameraPreviewSession() {\r\n        try {\r\n            SurfaceTexture texture = mTextureView.getSurfaceTexture();\r\n            assert texture != null;\r\n\r\n            // We configure the size of default buffer to be the size of camera preview we want.\r\n            texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());\r\n\r\n            // This is the output Surface we need to start preview.\r\n            Surface surface = new Surface(texture);\r\n\r\n            // We set up a CaptureRequest.Builder with the output Surface.\r\n            mPreviewRequestBuilder\r\n                    = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);\r\n            mPreviewRequestBuilder.addTarget(surface);\r\n\r\n            // Here, we create a CameraCaptureSession for camera preview.\r\n            mCameraDevice.createCaptureSession(Arrays.asList(surface, mImageReader.getSurface()),\r\n                    new CameraCaptureSession.StateCallback() {\r\n\r\n                        @Override\r\n                        public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {\r\n                            // The camera is already closed\r\n                            if (null == mCameraDevice) {\r\n                                return;\r\n                            }\r\n\r\n                            // When the session is ready, we start displaying the preview.\r\n                            mCaptureSession = cameraCaptureSession;\r\n                            try {\r\n                                // Auto focus should be continuous for camera preview.\r\n                                mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE,\r\n                                        CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);\r\n                                // Flash is automatically enabled when necessary.\r\n                                setAutoFlash(mPreviewRequestBuilder);\r\n\r\n                                // Finally, we start displaying the camera preview.\r\n                                mPreviewRequest = mPreviewRequestBuilder.build();\r\n                                mCaptureSession.setRepeatingRequest(mPreviewRequest,\r\n                                        mCaptureCallback, mBackgroundHandler);\r\n                            } catch (CameraAccessException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onConfigureFailed(\r\n                                @NonNull CameraCaptureSession cameraCaptureSession) {\r\n                            showToast(\"Failed\");\r\n                        }\r\n                    }, null\r\n            );\r\n        } catch (CameraAccessException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Configures the necessary {@link Matrix} transformation to `mTextureView`.\r\n     * This method should be called after the camera preview size is determined in\r\n     * setUpCameraOutputs and also the size of `mTextureView` is fixed.\r\n     *\r\n     * @param viewWidth  The width of `mTextureView`\r\n     * @param viewHeight The height of `mTextureView`\r\n     */\r\n    private void configureTransform(int viewWidth, int viewHeight) {\r\n        Activity activity = getActivity();\r\n        if (null == mTextureView || null == mPreviewSize || null == activity) {\r\n            return;\r\n        }\r\n        int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();\r\n        Matrix matrix = new Matrix();\r\n        RectF viewRect = new RectF(0, 0, viewWidth, viewHeight);\r\n        RectF bufferRect = new RectF(0, 0, mPreviewSize.getHeight(), mPreviewSize.getWidth());\r\n        float centerX = viewRect.centerX();\r\n        float centerY = viewRect.centerY();\r\n        if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {\r\n            bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY());\r\n            matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL);\r\n            float scale = Math.max(\r\n                    (float) viewHeight / mPreviewSize.getHeight(),\r\n                    (float) viewWidth / mPreviewSize.getWidth());\r\n            matrix.postScale(scale, scale, centerX, centerY);\r\n            matrix.postRotate(90 * (rotation - 2), centerX, centerY);\r\n        } else if (Surface.ROTATION_180 == rotation) {\r\n            matrix.postRotate(180, centerX, centerY);\r\n        }\r\n        mTextureView.setTransform(matrix);\r\n    }\r\n\r\n    /**\r\n     * Initiate a still image capture.\r\n     */\r\n    private void takePicture() {\r\n        lockFocus();\r\n    }\r\n\r\n    /**\r\n     * Lock the focus as the first step for a still image capture.\r\n     */\r\n    private void lockFocus() {\r\n        try {\r\n            // This is how to tell the camera to lock focus.\r\n            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,\r\n                    CameraMetadata.CONTROL_AF_TRIGGER_START);\r\n            // Tell #mCaptureCallback to wait for the lock.\r\n            mState = STATE_WAITING_LOCK;\r\n            mCaptureSession.capture(mPreviewRequestBuilder.build(), mCaptureCallback,\r\n                    mBackgroundHandler);\r\n        } catch (CameraAccessException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Run the precapture sequence for capturing a still image. This method should be called when\r\n     * we get a response in {@link #mCaptureCallback} from {@link #lockFocus()}.\r\n     */\r\n    private void runPrecaptureSequence() {\r\n        try {\r\n            // This is how to tell the camera to trigger.\r\n            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER,\r\n                    CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER_START);\r\n            // Tell #mCaptureCallback to wait for the precapture sequence to be set.\r\n            mState = STATE_WAITING_PRECAPTURE;\r\n            mCaptureSession.capture(mPreviewRequestBuilder.build(), mCaptureCallback,\r\n                    mBackgroundHandler);\r\n        } catch (CameraAccessException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Capture a still picture. This method should be called when we get a response in\r\n     * {@link #mCaptureCallback} from both {@link #lockFocus()}.\r\n     */\r\n    private void captureStillPicture() {\r\n        try {\r\n            final Activity activity = getActivity();\r\n            if (null == activity || null == mCameraDevice) {\r\n                return;\r\n            }\r\n            // This is the CaptureRequest.Builder that we use to take a picture.\r\n            final CaptureRequest.Builder captureBuilder =\r\n                    mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);\r\n            captureBuilder.addTarget(mImageReader.getSurface());\r\n\r\n            // Use the same AE and AF modes as the preview.\r\n            captureBuilder.set(CaptureRequest.CONTROL_AF_MODE,\r\n                    CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);\r\n            setAutoFlash(captureBuilder);\r\n\r\n            // Orientation\r\n            int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();\r\n            captureBuilder.set(CaptureRequest.JPEG_ORIENTATION, getOrientation(rotation));\r\n\r\n            CameraCaptureSession.CaptureCallback CaptureCallback\r\n                    = new CameraCaptureSession.CaptureCallback() {\r\n\r\n                @Override\r\n                public void onCaptureCompleted(@NonNull CameraCaptureSession session,\r\n                                               @NonNull CaptureRequest request,\r\n                                               @NonNull TotalCaptureResult result) {\r\n                    showToast(\"Saved: \" + mFile);\r\n\r\n\r\n                    //Intent intent = new Intent(getActivity(),MainActivity.class);\r\n                    Intent intent = new Intent(getActivity(), OcrSpaceActivity.class);\r\n                    intent.putExtra(\"frontImg\",frontImg);\r\n                    intent.putExtra(\"backImg\",mFile.getAbsolutePath());\r\n\r\n                    startActivity(intent);\r\n                    //   imageView.setImageResource(R.drawable.tile);\r\n                    //  imageView.setImageURI(Uri.parse(mFile.getAbsolutePath()));\r\n                    unlockFocus();\r\n                }\r\n            };\r\n\r\n            mCaptureSession.stopRepeating();\r\n            mCaptureSession.abortCaptures();\r\n            mCaptureSession.capture(captureBuilder.build(), CaptureCallback, null);\r\n        } catch (CameraAccessException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the JPEG orientation from the specified screen rotation.\r\n     *\r\n     * @param rotation The screen rotation.\r\n     * @return The JPEG orientation (one of 0, 90, 270, and 360)\r\n     */\r\n    private int getOrientation(int rotation) {\r\n        // Sensor orientation is 90 for most devices, or 270 for some devices (eg. Nexus 5X)\r\n        // We have to take that into account and rotate JPEG properly.\r\n        // For devices with orientation of 90, we simply return our mapping from ORIENTATIONS.\r\n        // For devices with orientation of 270, we need to rotate the JPEG 180 degrees.\r\n        return (ORIENTATIONS.get(rotation) + mSensorOrientation + 270) % 360;\r\n    }\r\n\r\n    /**\r\n     * Unlock the focus. This method should be called when still image capture sequence is\r\n     * finished.\r\n     */\r\n    private void unlockFocus() {\r\n        try {\r\n            // Reset the auto-focus trigger\r\n            mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,\r\n                    CameraMetadata.CONTROL_AF_TRIGGER_CANCEL);\r\n            setAutoFlash(mPreviewRequestBuilder);\r\n            mCaptureSession.capture(mPreviewRequestBuilder.build(), mCaptureCallback,\r\n                    mBackgroundHandler);\r\n            // After this, the camera will go back to the normal state of preview.\r\n            mState = STATE_PREVIEW;\r\n            mCaptureSession.setRepeatingRequest(mPreviewRequest, mCaptureCallback,\r\n                    mBackgroundHandler);\r\n        } catch (CameraAccessException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View view) {\r\n        switch (view.getId()) {\r\n            case R.id.picture: {\r\n                takePicture();\r\n                break;\r\n            }\r\n            case R.id.info: {\r\n                Activity activity = getActivity();\r\n                if (null != activity) {\r\n                    new AlertDialog.Builder(activity)\r\n                            .setMessage(R.string.intro_message)\r\n                            .setPositiveButton(android.R.string.ok, null)\r\n                            .show();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void setAutoFlash(CaptureRequest.Builder requestBuilder) {\r\n        if (mFlashSupported) {\r\n            requestBuilder.set(CaptureRequest.CONTROL_AE_MODE,\r\n                    CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves a JPEG {@link Image} into the specified {@link File}.\r\n     */\r\n    private static class ImageSaver implements Runnable {\r\n\r\n        /**\r\n         * The JPEG image\r\n         */\r\n        private final Image mImage;\r\n        /**\r\n         * The file we save the image into.\r\n         */\r\n        private final File mFile;\r\n\r\n        ImageSaver(Image image, File file) {\r\n            mImage = image;\r\n            mFile = file;\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            ByteBuffer buffer = mImage.getPlanes()[0].getBuffer();\r\n            byte[] bytes = new byte[buffer.remaining()];\r\n            buffer.get(bytes);\r\n            FileOutputStream output = null;\r\n            try {\r\n                output = new FileOutputStream(mFile);\r\n                output.write(bytes);\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            } finally {\r\n                mImage.close();\r\n                if (null != output) {\r\n                    try {\r\n                        output.close();\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Compares two {@code Size}s based on their areas.\r\n     */\r\n    static class CompareSizesByArea implements Comparator<Size> {\r\n\r\n        @Override\r\n        public int compare(Size lhs, Size rhs) {\r\n            // We cast here to ensure the multiplications won't overflow\r\n            return Long.signum((long) lhs.getWidth() * lhs.getHeight() -\r\n                    (long) rhs.getWidth() * rhs.getHeight());\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Shows an error message dialog.\r\n     */\r\n    public static class ErrorDialog extends DialogFragment {\r\n\r\n        private static final String ARG_MESSAGE = \"message\";\r\n\r\n        public static ErrorDialog newInstance(String message) {\r\n            ErrorDialog dialog = new ErrorDialog();\r\n            Bundle args = new Bundle();\r\n            args.putString(ARG_MESSAGE, message);\r\n            dialog.setArguments(args);\r\n            return dialog;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public Dialog onCreateDialog(Bundle savedInstanceState) {\r\n            final Activity activity = getActivity();\r\n            return new AlertDialog.Builder(activity)\r\n                    .setMessage(getArguments().getString(ARG_MESSAGE))\r\n                    .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(DialogInterface dialogInterface, int i) {\r\n                            activity.finish();\r\n                        }\r\n                    })\r\n                    .create();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Shows OK/Cancel confirmation dialog about camera permission.\r\n     */\r\n    public static class ConfirmationDialog extends DialogFragment {\r\n\r\n        @NonNull\r\n        @Override\r\n        public Dialog onCreateDialog(Bundle savedInstanceState) {\r\n            final Fragment parent = getParentFragment();\r\n            return new AlertDialog.Builder(getActivity())\r\n                    .setMessage(R.string.request_permission)\r\n                    .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(DialogInterface dialog, int which) {\r\n                            parent.requestPermissions(new String[]{Manifest.permission.CAMERA},\r\n                                    REQUEST_CAMERA_PERMISSION);\r\n                        }\r\n                    })\r\n                    .setNegativeButton(android.R.string.cancel,\r\n                            new DialogInterface.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(DialogInterface dialog, int which) {\r\n                                    Activity activity = parent.getActivity();\r\n                                    if (activity != null) {\r\n                                        activity.finish();\r\n                                    }\r\n                                }\r\n                            })\r\n                    .create();\r\n        }\r\n    }\r\n\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/smrpv2/ui/medicine/medshot/CameraBackFragment.java	(revision 6a30f946611dfa621aed0d4bf978bb836a3dc027)
-+++ app/src/main/java/com/example/smrpv2/ui/medicine/medshot/CameraBackFragment.java	(date 1605786559964)
-@@ -484,16 +484,6 @@
-                     canvas.drawRect(100, 100, 200, 200, myPaint);*/
- 
- 
--
--
--
--
--
--
--
--
--
--
-                     Display display =  getActivity().getWindowManager().getDefaultDisplay() ;
-                     Point size = new Point();
-                     display.getRealSize(size); // or getSize(size)
-@@ -501,10 +491,6 @@
-                     height = size.y;
- 
- 
--
--
--
--
-                     Paint paint = new Paint();
-                     paint.setColor(Color.rgb(100, 20, 50));
-                     canvas.drawRect(width/2-112,height/2-112,width/2+112,height/2+112,paint);
-Index: app/src/main/java/com/example/smrpv2/ui/medicine/searchMed/Search_prescriptionActivity.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.smrpv2.ui.medicine.searchMed;\r\n\r\nimport android.app.ProgressDialog;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Bitmap;\r\nimport android.net.Uri;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.Toast;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.FileProvider;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport com.example.smrpv2.R;\r\nimport com.example.smrpv2.model.MedicineItem;\r\nimport com.example.smrpv2.model.Message;\r\nimport com.example.smrpv2.model.RegmedicineAsk;\r\nimport com.example.smrpv2.model.medicine_model.Prescriptionitem;\r\nimport com.example.smrpv2.model.searchMed_model.MedicineInfoRsponDTO;\r\nimport com.example.smrpv2.model.user_model.UserInform;\r\nimport com.example.smrpv2.retrofit.RetrofitHelper;\r\nimport com.example.smrpv2.retrofit.RetrofitService_Server;\r\nimport com.google.api.client.extensions.android.http.AndroidHttp;\r\nimport com.google.api.client.googleapis.json.GoogleJsonResponseException;\r\nimport com.google.api.client.http.HttpTransport;\r\nimport com.google.api.client.json.JsonFactory;\r\nimport com.google.api.client.json.gson.GsonFactory;\r\nimport com.google.api.services.vision.v1.Vision;\r\nimport com.google.api.services.vision.v1.VisionRequest;\r\nimport com.google.api.services.vision.v1.VisionRequestInitializer;\r\nimport com.google.api.services.vision.v1.model.AnnotateImageRequest;\r\nimport com.google.api.services.vision.v1.model.BatchAnnotateImagesRequest;\r\nimport com.google.api.services.vision.v1.model.BatchAnnotateImagesResponse;\r\nimport com.google.api.services.vision.v1.model.EntityAnnotation;\r\nimport com.google.api.services.vision.v1.model.Feature;\r\nimport com.google.api.services.vision.v1.model.Image;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.Serializable;\r\nimport java.lang.ref.WeakReference;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\n/**\r\n *\r\n * 처방전 & 약 봉투 사진 찍고 그 결과 알려주는 Activity\r\n *\r\n */\r\npublic class Search_prescriptionActivity extends AppCompatActivity implements Serializable {\r\n    private static final String CLOUD_VISION_API_KEY = \"AIzaSyDZfaBD1mddJVfGxgrhnUh0Lg02Mfc38KA\";//구글 인증키\r\n    private static final String ANDROID_CERT_HEADER = \"X-Android-Cert\";\r\n    private static final String ANDROID_PACKAGE_HEADER = \"X-Android-Package\";\r\n    private static final int MAX_LABEL_RESULTS = 10;\r\n    private static final int MAX_DIMENSION = 1080;\r\n\r\n    private ArrayList<Prescriptionitem> list;\r\n    private ArrayList<String> itemseq_list;\r\n    private Button Btn_add;\r\n    private ImageView iv_back;\r\n\r\n    private Bitmap bitmap;\r\n    private Uri photoUri;\r\n    private HashMap<Integer, String> select_pill_list; //사용자 선택한 약 정보를 담는 hashmap\r\n    private PrescriptionAdapter prescriptionAdapter;\r\n    private RecyclerView recyclerView;\r\n\r\n    private String id ;\r\n    SharedPreferences sharedPreferences;\r\n    private boolean bool_end = false;\r\n    private RetrofitService_Server retrofitService;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_select_pill);\r\n\r\n        initView();\r\n\r\n        Btn_add.setOnClickListener(new View.OnClickListener() { //추가하기 버튼 누를시\r\n            @Override\r\n            public void onClick(View v) { //추가하기\r\n                if(select_pill_list.size()==0){\r\n                    Toast.makeText(getApplicationContext(),\"약을 선택해 주세요.\", Toast.LENGTH_SHORT).show();\r\n                }else{\r\n                    for(Map.Entry<Integer, String>elem : select_pill_list.entrySet())\r\n                        itemseq_list.add(elem.getValue());\r\n                    /**\r\n                     *\r\n                     * 서버 : 검색된 약 추가하기\r\n                     */\r\n\r\n                    RegmedicineAsk regmedicineAsk = new RegmedicineAsk(UserInform.getUserId(),\"아이템 번호 --> 배열로 바꿔야함\");\r\n                    Call<Message> call = RetrofitHelper.getRetrofitService_server().medicineAdd(regmedicineAsk);\r\n\r\n                    call.enqueue(new Callback<Message>() {\r\n                        @Override\r\n                        public void onResponse(Call<Message> call, Response<Message> response) {\r\n                            if(response.body().getResultCode().equals(\"Ok\")){\r\n                                //정상적으로 반영\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onFailure(Call<Message> call, Throwable t) {\r\n\r\n                        }\r\n                    });\r\n                }\r\n\r\n\r\n            }\r\n        });\r\n        iv_back.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n        });\r\n        prescriptionAdapter.setOnClickListener(new PrescriptionAdapter.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(PrescriptionAdapter.ViewHolder holder, View v, int position) {\r\n\r\n                if(select_pill_list.size()==0){//사용자가 추가한 약 리스트가 없는 경우\r\n                    select_pill_list.put(position,list.get(position).getItemSeq());\r\n\r\n                }else{\r\n                    if(select_pill_list.get(position)==null){ //선택한 약이 hashmap에 없을경우\r\n                        select_pill_list.put(position,list.get(position).getItemSeq());\r\n                    }else{\r\n                        select_pill_list.remove(position);\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n\r\n\r\n\r\n        sendTakePhotoIntent();\r\n\r\n    }\r\n\r\n\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == 672 && resultCode == RESULT_OK) {\r\n\r\n            try {\r\n\r\n                bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), photoUri);\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            Uploading_bitmap(bitmap);\r\n        }else if(resultCode==RESULT_OK){ //팝업창 종료시\r\n            finish();\r\n        }else\r\n            onBackPressed();\r\n    }\r\n    private File createImageFile() throws IOException {\r\n        String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\r\n        String imageFileName = \"TEST_\" + timeStamp + \"_\";\r\n        File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);\r\n        File image = File.createTempFile(\r\n                imageFileName,      /* prefix */\r\n                \".jpg\",         /* suffix */\r\n                storageDir          /* directory */\r\n        );\r\n        return image;\r\n    }\r\n    private void sendTakePhotoIntent() {\r\n        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);// 내장 카메라 켜기\r\n        if (takePictureIntent.resolveActivity(getPackageManager()) != null) {\r\n            File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + \"/Android/data/com.example.smrpv2/files/Pictures\");//Android/data/com.raonstudio.cameratest/files\r\n\r\n            if (!file.exists()) {\r\n                file.mkdir();\r\n            }\r\n\r\n            File photoFile = null;\r\n\r\n            try {\r\n                photoFile = createImageFile();\r\n            } catch (IOException ex) {\r\n\r\n            }\r\n\r\n            if (photoFile != null) {\r\n                photoUri = FileProvider.getUriForFile(this, getPackageName(), photoFile);\r\n\r\n                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);\r\n                startActivityForResult(takePictureIntent, 672);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (Build.VERSION.SDK_INT >= 23) {\r\n            if(grantResults[0]== PackageManager.PERMISSION_GRANTED){\r\n            }\r\n        }\r\n    }\r\n\r\n    private void Uploading_bitmap(Bitmap bitmap){\r\n        if(bitmap != null){\r\n            bitmap = scaleBitmapDown(bitmap,MAX_DIMENSION);\r\n\r\n           // callCloudVision(bitmap);\r\n        }\r\n    }\r\n    private Bitmap scaleBitmapDown(Bitmap bitmap, int maxDimension) {\r\n\r\n        int originalWidth = bitmap.getWidth();\r\n        int originalHeight = bitmap.getHeight();\r\n        int resizedWidth = maxDimension;\r\n        int resizedHeight = maxDimension;\r\n        if (originalHeight > originalWidth) { // 촬영한 사진의 세로길이가 너비보다 크면\r\n            resizedHeight = maxDimension;\r\n            resizedWidth = (int) (resizedHeight * (float) originalWidth / (float) originalHeight);\r\n        } else if (originalWidth > originalHeight) {\r\n            resizedWidth = maxDimension;\r\n            resizedHeight = (int) (resizedWidth * (float) originalHeight / (float) originalWidth);\r\n        } else if (originalHeight == originalWidth) {\r\n            resizedHeight = maxDimension;\r\n            resizedWidth = maxDimension;\r\n        }\r\n        return Bitmap.createScaledBitmap(bitmap, resizedWidth, resizedHeight, false);\r\n    }\r\n\r\n    /*private class LableDetectionTask extends AsyncTask<Object, Void, String> {\r\n        private final WeakReference<Search_prescriptionActivity> mActivityWeakReference;\r\n        private Vision.Images.Annotate mRequest;\r\n        ProgressDialog progressDialog = new ProgressDialog(Search_prescriptionActivity.this);\r\n        LableDetectionTask(Search_prescriptionActivity activity, Vision.Images.Annotate annotate) {\r\n            mActivityWeakReference = new WeakReference<>(activity);\r\n            mRequest = annotate;\r\n        }\r\n        @Override\r\n        protected String doInBackground(Object... params) {\r\n            try {\r\n                BatchAnnotateImagesResponse response = mRequest.execute();\r\n                return convertResponseToString(response);\r\n\r\n            } catch (GoogleJsonResponseException e) {\r\n                Log.d(\"TAG\", \"failed to make API request because \" + e.getContent());\r\n            } catch (IOException e) {\r\n                Log.d(\"TAG\", \"failed to make API request because of other IOException \" +\r\n                        e.getMessage());\r\n            }\r\n\r\n            return \"Cloud Vision API request failed. Check logs for details.\";\r\n        }\r\n        @Override\r\n        protected void onPreExecute() {\r\n            progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);\r\n            progressDialog.setMessage(\"로딩중입니다..\");\r\n            progressDialog.show();\r\n            super.onPreExecute();\r\n        }\r\n        protected void onPostExecute(String result) {\r\n            Search_prescriptionActivity activity = mActivityWeakReference.get();\r\n            if (activity != null && !activity.isFinishing()) {\r\n                List<String> pill_list = new ArrayList();\r\n\r\n                //구글 OCR에서 인식된 문자가 없을 경우 nothing을 반환하기 떄문에 이를 제거\r\n                result = result.replaceAll(\"nothing\",\"\");\r\n                StringTokenizer token = new StringTokenizer(result , \"\\n\");\r\n\r\n\r\n                while(token.hasMoreTokens()){// 구글 Ocr에서 응답 받은 ocr data를 \\n 기준으로 token\r\n                    pill_list.add(token.nextToken());\r\n                }\r\n                if(pill_list.size()==0){\r\n                    progressDialog.dismiss();\r\n                    Intent intent = new Intent(getApplicationContext(), ErrorMessageActivity.class);\r\n                    intent.putExtra(\"data\", \"검색결과가 없습니다.\\n\\n 이전 페이지로 이동합니다.\");\r\n                    startActivityForResult(intent, 1);\r\n\r\n                }else\r\n                    pill_list.remove(pill_list.size() -1);\r\n\r\n\r\n                Log.d(\"TAG\", \"onPostExecute list.size(): \"+pill_list.size());\r\n                //서버에서 STring형 배열로 요청을 받기 떄문에 List를 STring배열로 변환\r\n                String[] result_array = (String[])pill_list.toArray(new String[pill_list.size()]);\r\n\r\n                /*for(String str : result_array)\r\n                    Log.d(\"TAG\", \"result_array: \"+str+\"\\n\");*/\r\n\r\n                //서버와 통신을 하기 위한 RetrofitService_Server 객체 생성성\r\n                /*retrofitService = RetrofitHelper.getRetrofitService_server();\r\n                Call<ArrayList<MedicineInfoRsponDTO>> call= retrofitService.medicinSendList(result_array);\r\n                call.enqueue(new Callback<ArrayList<MedicineInfoRsponDTO>>() {\r\n                    @Override\r\n                    public void onResponse(Call<ArrayList<MedicineInfoRsponDTO>> call, Response<ArrayList<MedicineInfoRsponDTO>> response) {\r\n\r\n                        ArrayList<MedicineInfoRsponDTO> temp_list = response.body();\r\n\r\n\r\n                        for(int i = 0 ; i < temp_list.size(); i++){//서버에서 응답받은 약 리스트에 대해 각각 Prescritionitem 생성자를 생성하고 이를 list에 저장\r\n                            list.add(new Prescriptionitem(\"알약실벽코드\",\"알약 이미지 url\",\"알약 식별포장\",\"알약 제품명\"));\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ArrayList<MedicineInfoRsponDTO>> call, Throwable t) {\r\n                        finish();\r\n                    }\r\n                });*/\r\n                /**\r\n                 *\r\n                 * 서버 : 약품명을 서버에게 요청하기 위한 코드가 들어가야함\r\n                 *\r\n                 */\r\n\r\n\r\n               /* bool_end = true;\r\n\r\n            }\r\n        }\r\n    }*/\r\n    /*private Vision.Images.Annotate prepareAnnotationRequest(final Bitmap bitmap) throws IOException {\r\n        HttpTransport httpTransport = AndroidHttp.newCompatibleTransport();\r\n        JsonFactory jsonFactory = GsonFactory.getDefaultInstance();\r\n\r\n        VisionRequestInitializer requestInitializer =\r\n                new VisionRequestInitializer(CLOUD_VISION_API_KEY) {\r\n                    @Override\r\n                    protected void initializeVisionRequest(VisionRequest<?> visionRequest)\r\n                            throws IOException {\r\n                        super.initializeVisionRequest(visionRequest);\r\n                        String packageName = getPackageName();\r\n                        visionRequest.getRequestHeaders().set(ANDROID_PACKAGE_HEADER, packageName);\r\n                        String sig = PackageManagerUtils.getSignature(getPackageManager(), packageName);\r\n                        visionRequest.getRequestHeaders().set(ANDROID_CERT_HEADER, sig);\r\n                    }\r\n                };\r\n\r\n        Vision.Builder builder = new Vision.Builder(httpTransport, jsonFactory, null);\r\n        builder.setVisionRequestInitializer(requestInitializer);\r\n        Vision vision = builder.build();\r\n        BatchAnnotateImagesRequest batchAnnotateImagesRequest =\r\n                new BatchAnnotateImagesRequest();\r\n        batchAnnotateImagesRequest.setRequests(new ArrayList<AnnotateImageRequest>() {{\r\n            AnnotateImageRequest annotateImageRequest = new AnnotateImageRequest();\r\n            Image base64EncodedImage = new Image();\r\n            // Convert the bitmap to a JPEG\r\n            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 90, byteArrayOutputStream);\r\n            byte[] imageBytes = byteArrayOutputStream.toByteArray();\r\n\r\n            // Base64 encode the JPEG\r\n            base64EncodedImage.encodeContent(imageBytes);\r\n            annotateImageRequest.setImage(base64EncodedImage);\r\n\r\n            // add the features we want\r\n            annotateImageRequest.setFeatures(new ArrayList<Feature>() {{\r\n                Feature labelDetection = new Feature();\r\n                labelDetection.setType(\"TEXT_DETECTION\");\r\n                labelDetection.setMaxResults(MAX_LABEL_RESULTS);\r\n                add(labelDetection);\r\n            }});\r\n\r\n            add(annotateImageRequest);\r\n        }});\r\n\r\n        Vision.Images.Annotate annotateRequest =\r\n                vision.images().annotate(batchAnnotateImagesRequest);\r\n\r\n        annotateRequest.setDisableGZipContent(true);\r\n        return annotateRequest;\r\n    }*/\r\n    /*private void callCloudVision(final Bitmap bitmap) {\r\n        try {\r\n            AsyncTask<Object, Void, String> labelDetectionTask = new LableDetectionTask(this, prepareAnnotationRequest(bitmap));\r\n            labelDetectionTask.execute();\r\n        } catch (IOException e) {\r\n            Log.d(\"TAG\", \"failed to make API request because of other IOException \" +\r\n                    e.getMessage());\r\n        }\r\n    }*/\r\n    private String convertResponseToString(BatchAnnotateImagesResponse response) {\r\n        StringBuilder message = new StringBuilder();\r\n\r\n        List<EntityAnnotation> labels = response.getResponses().get(0).getTextAnnotations();\r\n\r\n        if (labels != null) {\r\n            for (EntityAnnotation label : labels) {\r\n                message.append(String.format(Locale.KOREAN, \"%s\", label.getDescription()));\r\n            }\r\n        } else {\r\n            message.append(\"nothing\");\r\n        }\r\n        return message.toString();\r\n    }\r\n\r\n    private class Dialog extends AsyncTask<Void, Void, Void> {\r\n        ProgressDialog progressDialog1 = new ProgressDialog(Search_prescriptionActivity.this);\r\n        @Override\r\n        protected void onPreExecute() {\r\n            progressDialog1.setProgressStyle(ProgressDialog.STYLE_SPINNER);\r\n            progressDialog1.setMessage(\"로딩중입니다..\");\r\n\r\n            progressDialog1.show();\r\n            super.onPreExecute();\r\n        }\r\n        @Override\r\n        protected Void doInBackground(Void... voids) {\r\n            while(!bool_end)\r\n                ;\r\n            bool_end = false;\r\n            return null;\r\n        }\r\n        @Override\r\n        protected void onPostExecute(Void result) {\r\n            progressDialog1.dismiss();\r\n            super.onPostExecute(result);\r\n        }\r\n        @Override\r\n        protected void onCancelled() {\r\n            super.onCancelled();\r\n        }\r\n    }\r\n\r\n\r\n    private void initView(){\r\n        Btn_add = findViewById(R.id.add_btn);\r\n        iv_back = findViewById(R.id.iv_back);\r\n        select_pill_list = new HashMap<Integer, String>();\r\n        itemseq_list = new ArrayList<String>();\r\n        list = new ArrayList<Prescriptionitem>();\r\n        prescriptionAdapter = new PrescriptionAdapter(list);\r\n        recyclerView = findViewById(R.id.recycler_list);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(getApplicationContext()));\r\n        recyclerView.setAdapter(prescriptionAdapter);\r\n        sharedPreferences = getSharedPreferences(\"setting\",0);\r\n        id = sharedPreferences.getString(\"id\",\"\");\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/smrpv2/ui/medicine/searchMed/Search_prescriptionActivity.java	(revision 6a30f946611dfa621aed0d4bf978bb836a3dc027)
-+++ app/src/main/java/com/example/smrpv2/ui/medicine/searchMed/Search_prescriptionActivity.java	(date 1605706475815)
-@@ -207,16 +207,17 @@
- 
-             try {
-                 photoFile = createImageFile();
--            } catch (IOException ex) {
--
--            }
--
--            if (photoFile != null) {
--                photoUri = FileProvider.getUriForFile(this, getPackageName(), photoFile);
-+                if (photoFile != null) {
-+                    photoUri = FileProvider.getUriForFile(this, getPackageName(), photoFile);
- 
--                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);
--                startActivityForResult(takePictureIntent, 672);
-+                    takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);
-+                    startActivityForResult(takePictureIntent, 672);
-+                }
-+            } catch (IOException ex) {
-+                Log.d("TAG","이미지 파일 생성 오류");
-             }
-+
-+
-         }
-     }
- 
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CMakeSettings\">\r\n    <configurations>\r\n      <configuration PROFILE_NAME=\"Debug\" CONFIG_NAME=\"Debug\" />\r\n    </configurations>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_7\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/misc.xml	(revision 6a30f946611dfa621aed0d4bf978bb836a3dc027)
-+++ .idea/misc.xml	(date 1605701481510)
-@@ -5,7 +5,7 @@
-       <configuration PROFILE_NAME="Debug" CONFIG_NAME="Debug" />
-     </configurations>
-   </component>
--  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" project-jdk-name="1.8" project-jdk-type="JavaSDK">
-+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK">
-     <output url="file://$PROJECT_DIR$/build/classes" />
-   </component>
-   <component name="ProjectType">
-Index: app/src/main/java/com/example/smrpv2/ui/medicine/MedicineFragment.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.smrpv2.ui.medicine;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.ListView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.viewpager.widget.ViewPager;\r\n\r\n\r\nimport com.example.smrpv2.R;\r\n\r\nimport com.example.smrpv2.model.MedicineItem;\r\nimport com.example.smrpv2.model.Message;\r\nimport com.example.smrpv2.model.SumMedInfo;\r\nimport com.example.smrpv2.model.user_model.UserInform;\r\nimport com.example.smrpv2.retrofit.RetrofitHelper;\r\nimport com.example.smrpv2.ui.main.MainActivity;\r\nimport com.example.smrpv2.ui.start.AutoSlide;\r\nimport com.example.smrpv2.ui.start.ViewPagerAdapter;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport me.relex.circleindicator.CircleIndicator;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\n/**\r\n *\r\n * MedicineFragment : 약 등록하기 화면\r\n *  +버튼을 눌러 뜨는 팝업창에서 약 사진 찍기 or 약봉투 및 처방전 사진 찍기 or 약 검색하기 중 하나를 선택해 각 기능을 수행한 후 약을 등록할 수 있다.\r\n *  등록된 약의 리스트를 보여준다.\r\n *  등록된 약의 리스트 중 하나를 클릭 시 상세 정보를 볼 수 있고, 그 창에서 알람을 설정할 수 있다.(MedicineDetailAcitivity 및 AlarmSetActivity)\r\n *\r\n */\r\npublic class MedicineFragment extends Fragment {\r\n    private ViewPager viewPager;\r\n    private ViewPagerAdapter adapter;\r\n\r\n    private ListView Lst_medicine; // 등록한 약 목록(아직 구현x)\r\n    private ListViewAdapter listViewAdapter;\r\n\r\n    private TextView Txt_empty; // 등록한 약이 없을 시 text메세지로 알려줌\r\n    private ImageView Img_ic_plus; // +아이콘\r\n\r\n    private AutoSlide autoSlide;\r\n    private final int MEDICINE_FRAGMENT = 1;\r\n    private final long DELAY_MS = 1000; // 자동 슬라이드를 위한 변수\r\n    private final long PERIOD_MS = 3000; // 자동 슬라이드를 위한 변수\r\n    ArrayList<MedicineItem> items = new ArrayList<MedicineItem>();\r\n    private int[] images= {R.drawable.ad_banner1, R.drawable.ad_banner2,R.drawable.ad_banner3}; // ViewPagerAdapter에  보낼 이미지. 이걸로 이미지 슬라이드 띄어줌\r\n\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             ViewGroup container, Bundle savedInstanceState) {\r\n\r\n\r\n        View v = inflater.inflate(R.layout.fragment_medicine, container, false);\r\n\r\n        //초기화..\r\n        viewPager =  v.findViewById(R.id.banner);\r\n        adapter = new ViewPagerAdapter(getActivity(),images);\r\n        CircleIndicator indicator = v.findViewById(R.id.indicator); // 인디케이터\r\n        Lst_medicine = v.findViewById(R.id.Lst_medicine);\r\n        Txt_empty = v.findViewById(R.id.Txt_empty);\r\n        Img_ic_plus = v.findViewById(R.id.Img_ic_plus);\r\n        listViewAdapter=new ListViewAdapter(items,getActivity(),MEDICINE_FRAGMENT);\r\n\r\n        // view 설정..\r\n        Lst_medicine.setEmptyView(Txt_empty);\r\n        indicator.setViewPager(viewPager); // 인디케이터 뷰에 추가\r\n        viewPager.setAdapter(adapter);\r\n        Lst_medicine.setAdapter(listViewAdapter);\r\n\r\n        autoSlide = new AutoSlide(viewPager,DELAY_MS,PERIOD_MS);\r\n        autoSlide.startSlide();\r\n        Img_ic_plus.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                PopupFragment p = new PopupFragment();\r\n                p.show(getActivity().getSupportFragmentManager(),\"popup\"); //팝업 창 띄우기\r\n\r\n            }\r\n        });\r\n\r\n        /*SharedPreferences loginInfromation = getActivity().getSharedPreferences(\"setting\",0);\r\n        user_id = loginInfromation.getString(\"id\",\"\");*/\r\n        return v;\r\n    }\r\n    public void onStart() {\r\n        super.onStart();\r\n\r\n        Call<ArrayList<SumMedInfo>> call= RetrofitHelper.getRetrofitService_server().medicineRegs(UserInform.getUserId());\r\n        call.enqueue(new Callback<ArrayList<SumMedInfo>>() {\r\n            @Override\r\n            public void onResponse(Call<ArrayList<SumMedInfo>> call, Response<ArrayList<SumMedInfo>> response) {\r\n                ArrayList<SumMedInfo> med_items = response.body();\r\n\r\n                items.clear();\r\n                for(int i = 0; i<  med_items.size(); i++) {\r\n                    items.add(new MedicineItem(med_items.get(i).getId(),med_items.get(i).getImageUrl(), med_items.get(i).getItemName(), med_items.get(i).getItemSeq(), med_items.get(i).getCreatedAt(), med_items.get(i).getEntpName()));\r\n\r\n                }\r\n                listViewAdapter.notifyDataSetChanged();\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<ArrayList<SumMedInfo>> call, Throwable t) {\r\n                t.printStackTrace();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/smrpv2/ui/medicine/MedicineFragment.java	(revision 6a30f946611dfa621aed0d4bf978bb836a3dc027)
-+++ app/src/main/java/com/example/smrpv2/ui/medicine/MedicineFragment.java	(date 1605780448632)
-@@ -104,9 +104,12 @@
-                 ArrayList<SumMedInfo> med_items = response.body();
- 
-                 items.clear();
--                for(int i = 0; i<  med_items.size(); i++) {
--                    items.add(new MedicineItem(med_items.get(i).getId(),med_items.get(i).getImageUrl(), med_items.get(i).getItemName(), med_items.get(i).getItemSeq(), med_items.get(i).getCreatedAt(), med_items.get(i).getEntpName()));
-+                if (med_items != null) {
-+                    for(int i = 0; i<  med_items.size(); i++) {
-+                        items.add(new MedicineItem(med_items.get(i).getId(),med_items.get(i).getImageUrl(), med_items.get(i).getItemName(), med_items.get(i).getItemSeq(), med_items.get(i).getCreatedAt(), med_items.get(i).getEntpName()));
- 
-+                    }
-+
-                 }
-                 listViewAdapter.notifyDataSetChanged();
-             }
-Index: app/src/main/java/com/example/smrpv2/ui/medicine/medshot/OcrSpaceActivity.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.smrpv2.ui.medicine.medshot;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Matrix;\r\nimport android.media.ExifInterface;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.widget.ImageView;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.smrpv2.R;\r\nimport com.example.smrpv2.model.Message;\r\nimport com.example.smrpv2.model.searchMed_model.OcrSpaceDto;\r\n\r\nimport com.example.smrpv2.retrofit.RetrofitHelper;\r\nimport com.example.smrpv2.retrofit.RetrofitService_Server;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport okhttp3.MediaType;\r\nimport okhttp3.MultipartBody;\r\nimport okhttp3.RequestBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class OcrSpaceActivity extends AppCompatActivity {\r\n    private Bitmap targetBitmap_front,targetBitmap_back;\r\n    private final String TAG = \"TAG\";\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_kakao_ocr);\r\n\r\n        String frontImg = getIntent().getStringExtra(\"frontImg\");\r\n        String backImg =getIntent().getStringExtra(\"backImg\");\r\n        assert frontImg != null;\r\n        Log.d(\"gggg\",frontImg);\r\n        assert backImg != null;\r\n        Log.d(\"gggg\",backImg);\r\n        String frontImgDate=backImg.substring(0,frontImg.lastIndexOf(\"/\"))+\"/picF.jpg\"; //앞면이미지\r\n        String backImgDate=backImg.substring(0,backImg.lastIndexOf(\"/\"))+\"/picB.jpg\"; //뒷면이미지\r\n        Bitmap rotatedBitmap = null;\r\n        ImageView im1,im2;\r\n\r\n\r\n\r\n        im1 = findViewById(R.id.image_front);\r\n        im2 = findViewById(R.id.image_back);\r\n        try {\r\n            File frontfile = new File(frontImg);\r\n            File backfile = new File(backImg);\r\n\r\n            Bitmap frontbitmap = MediaStore.Images.Media\r\n                    .getBitmap(getContentResolver(), Uri.fromFile(frontfile));\r\n\r\n            Bitmap backbitmap = MediaStore.Images.Media\r\n                    .getBitmap(getContentResolver(), Uri.fromFile(backfile));\r\n\r\n            if (frontbitmap != null) {\r\n                ExifInterface ei = new ExifInterface(frontImg);\r\n                int front_orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,\r\n                        ExifInterface.ORIENTATION_UNDEFINED);\r\n                switch (front_orientation) {\r\n\r\n                    case ExifInterface.ORIENTATION_ROTATE_90:\r\n                        rotatedBitmap = rotateImage(frontbitmap, 90);\r\n                        break;\r\n\r\n                    case ExifInterface.ORIENTATION_ROTATE_180:\r\n                        rotatedBitmap = rotateImage(frontbitmap, 180);\r\n                        break;\r\n\r\n                    case ExifInterface.ORIENTATION_ROTATE_270:\r\n                        rotatedBitmap = rotateImage(frontbitmap, 270);\r\n                        break;\r\n\r\n                    case ExifInterface.ORIENTATION_NORMAL:\r\n                    default:\r\n                        rotatedBitmap = frontbitmap;\r\n                }\r\n\r\n            }\r\n\r\n\r\n            targetBitmap_front=Bitmap.createBitmap(rotatedBitmap,rotatedBitmap.getWidth()/2-250,rotatedBitmap.getHeight()/2-250,500,500);\r\n            im1.setImageBitmap(targetBitmap_front);\r\n            im2.setImageBitmap(targetBitmap_back);\r\n\r\n            if (backbitmap != null) {\r\n                ExifInterface ei = new ExifInterface(backImg);\r\n                int back_orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,\r\n                        ExifInterface.ORIENTATION_UNDEFINED);\r\n                switch (back_orientation) {\r\n\r\n                    case ExifInterface.ORIENTATION_ROTATE_90:\r\n                        rotatedBitmap = rotateImage(backbitmap, 90);\r\n                        break;\r\n\r\n                    case ExifInterface.ORIENTATION_ROTATE_180:\r\n                        rotatedBitmap = rotateImage(backbitmap, 180);\r\n                        break;\r\n\r\n                    case ExifInterface.ORIENTATION_ROTATE_270:\r\n                        rotatedBitmap = rotateImage(backbitmap, 270);\r\n                        break;\r\n\r\n                    case ExifInterface.ORIENTATION_NORMAL:\r\n                    default:\r\n                        rotatedBitmap = backbitmap;\r\n                }\r\n\r\n            }\r\n            //sendFile(frontfile,backfile);\r\n            Uploading_bitmap_front(frontfile);\r\n        }catch(Exception err){\r\n            err.printStackTrace();\r\n        }\r\n\r\n\r\n        //targetBitmap_back = Bitmap.createBitmap(rotatedBitmap,rotatedBitmap.getWidth()/2-250,rotatedBitmap.getHeight()/2-250,500,500);\r\n\r\n\r\n    }\r\n    private void Uploading_bitmap_front(File file){\r\n        \r\n        RequestBody body = RequestBody.create(MediaType.parse(\"multipart/form-data\"),file);\r\n        MultipartBody.Part fPart = MultipartBody.Part.createFormData(\"files\",\"front.jpg\",body);\r\n        RetrofitService_Server retrofit = RetrofitHelper.getOcr().create(RetrofitService_Server.class);\r\n\r\n        Call<OcrSpaceDto> call = retrofit.sendOcr(fPart,\"kor\");\r\n\r\n\r\n        call.enqueue(new Callback<OcrSpaceDto>() {\r\n            @Override\r\n            public void onResponse(Call<OcrSpaceDto> call, Response<OcrSpaceDto> response) {\r\n\r\n                if(response.body().getParsedResults().get(0).getParsedText() != null)\r\n                    Log.d(TAG, \"onResponse: \"+response.body().getParsedResults().get(0).getParsedText());\r\n                else\r\n                    Toast.makeText(getApplicationContext(),\"인식 불가\",Toast.LENGTH_SHORT);\r\n                \r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<OcrSpaceDto> call, Throwable t) {\r\n                Log.d(TAG, \"onFailureonFailure: \");\r\n                Toast.makeText(getApplicationContext(),\"OCR 서버 통신 오류\",Toast.LENGTH_SHORT);\r\n            }\r\n        });\r\n\r\n\r\n\r\n    }\r\n\r\n    private void sendFile(File frontfile,File backfile){ //구축서버에 이미지 파일 전송\r\n\r\n        ArrayList<MultipartBody.Part> list = new ArrayList<>();\r\n        RequestBody body = RequestBody.create(MediaType.parse(\"image/*\"),frontfile);\r\n        RequestBody body2 = RequestBody.create(MediaType.parse(\"image/*\"),backfile);\r\n        MultipartBody.Part fPart = MultipartBody.Part.createFormData(\"files\",\"front.jpg\",body);\r\n        MultipartBody.Part bPart = MultipartBody.Part.createFormData(\"files\",\"back.jpg\",body2);\r\n        list.add(fPart);\r\n        list.add(bPart);\r\n\r\n        Call<Message> call = RetrofitHelper.getRetrofitService_server().uploadImage(list);\r\n        call.enqueue(new Callback<Message>() {\r\n            @Override\r\n            public void onResponse(Call<Message> call, Response<Message> response) {\r\n                Log.d(\"sendFile\", \"성공\");\r\n                Log.d(\"sendFile\", response.toString());\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<Message> call, Throwable t) {\r\n                Log.d(\"sendFile T:\", t.toString());\r\n            }\r\n        });\r\n    }\r\n    public static Bitmap rotateImage(Bitmap source, float angle) {\r\n        Matrix matrix = new Matrix();\r\n        matrix.postRotate(angle);\r\n        return Bitmap.createBitmap(source, 0, 0, source.getWidth(), source.getHeight(),\r\n                matrix, true);\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/smrpv2/ui/medicine/medshot/OcrSpaceActivity.java	(revision 6a30f946611dfa621aed0d4bf978bb836a3dc027)
-+++ app/src/main/java/com/example/smrpv2/ui/medicine/medshot/OcrSpaceActivity.java	(date 1605787638109)
-@@ -20,6 +20,9 @@
- import com.example.smrpv2.retrofit.RetrofitService_Server;
- 
- import java.io.File;
-+import java.io.FileOutputStream;
-+import java.io.IOException;
-+import java.io.OutputStream;
- import java.util.ArrayList;
- import java.util.HashMap;
- import java.util.Map;
-@@ -34,6 +37,8 @@
- public class OcrSpaceActivity extends AppCompatActivity {
-     private Bitmap targetBitmap_front,targetBitmap_back;
-     private final String TAG = "TAG";
-+    String total_result="",frontImgDate="";//검색결과
-+    ImageView im1,im2;
-     @Override
-     protected void onCreate(Bundle savedInstanceState) {
-         super.onCreate(savedInstanceState);
-@@ -45,11 +50,12 @@
-         Log.d("gggg",frontImg);
-         assert backImg != null;
-         Log.d("gggg",backImg);
--        String frontImgDate=backImg.substring(0,frontImg.lastIndexOf("/"))+"/picF.jpg"; //앞면이미지
-+        frontImgDate=backImg.substring(0,frontImg.lastIndexOf("/"))+"/picF.jpg"; //앞면이미지
-         String backImgDate=backImg.substring(0,backImg.lastIndexOf("/"))+"/picB.jpg"; //뒷면이미지
-+
-         Bitmap rotatedBitmap = null;
--        ImageView im1,im2;
- 
-+       
- 
- 
-         im1 = findViewById(R.id.image_front);
-@@ -90,10 +96,12 @@
-             }
- 
- 
--            targetBitmap_front=Bitmap.createBitmap(rotatedBitmap,rotatedBitmap.getWidth()/2-250,rotatedBitmap.getHeight()/2-250,500,500);
--            im1.setImageBitmap(targetBitmap_front);
-+            targetBitmap_front=Bitmap.createBitmap(rotatedBitmap,rotatedBitmap.getWidth()/2-112,rotatedBitmap.getHeight()/2-112,224,224);
-+            //im1.setImageBitmap(targetBitmap_front);
-             im2.setImageBitmap(targetBitmap_back);
- 
-+            SavePicture(targetBitmap_front,frontImgDate);
-+
-             if (backbitmap != null) {
-                 ExifInterface ei = new ExifInterface(backImg);
-                 int back_orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,
-@@ -119,7 +127,7 @@
- 
-             }
-             //sendFile(frontfile,backfile);
--            Uploading_bitmap_front(frontfile);
-+
-         }catch(Exception err){
-             err.printStackTrace();
-         }
-@@ -130,33 +138,65 @@
- 
-     }
-     private void Uploading_bitmap_front(File file){
--        
-+
-+        //File file1 = new File(frontImgDate);
-+        try {
-+            Bitmap bitmap = MediaStore.Images.Media
-+                    .getBitmap(getContentResolver(), Uri.fromFile(file));
-+            im1.setImageBitmap(bitmap);
-+        } catch (IOException e) {
-+            e.printStackTrace();
-+        }
-+
-+
-         RequestBody body = RequestBody.create(MediaType.parse("multipart/form-data"),file);
--        MultipartBody.Part fPart = MultipartBody.Part.createFormData("files","front.jpg",body);
-+        MultipartBody.Part fPart = MultipartBody.Part.createFormData("files","picF.jpg",body);
-         RetrofitService_Server retrofit = RetrofitHelper.getOcr().create(RetrofitService_Server.class);
- 
--        Call<OcrSpaceDto> call = retrofit.sendOcr(fPart,"kor");
-+        Call<OcrSpaceDto> eng_call = retrofit.sendOcr(fPart,"eng");
-+        Call<OcrSpaceDto> kor_call = retrofit.sendOcr(fPart,"kor");
- 
- 
--        call.enqueue(new Callback<OcrSpaceDto>() {
-+        eng_call.enqueue(new Callback<OcrSpaceDto>() {
-             @Override
-             public void onResponse(Call<OcrSpaceDto> call, Response<OcrSpaceDto> response) {
- 
--                if(response.body().getParsedResults().get(0).getParsedText() != null)
--                    Log.d(TAG, "onResponse: "+response.body().getParsedResults().get(0).getParsedText());
-+                if(response.body().getParsedResults().get(0).getParsedText() != null) {
-+                    Log.d(TAG, "onResponse: " + response.body().getParsedResults().get(0).getParsedText());
-+                    total_result += response.body().getParsedResults().get(0).getParsedText();
-+                    Log.d(TAG, "total_result: "+total_result);
-+                }
-                 else
--                    Toast.makeText(getApplicationContext(),"인식 불가",Toast.LENGTH_SHORT);
--                
-+                    Toast.makeText(getApplicationContext(),"영어 인식 불가",Toast.LENGTH_SHORT);
-+
- 
-             }
- 
-             @Override
-             public void onFailure(Call<OcrSpaceDto> call, Throwable t) {
--                Log.d(TAG, "onFailureonFailure: ");
-+                Log.d(TAG, "onFailureonFailure1: ");
-                 Toast.makeText(getApplicationContext(),"OCR 서버 통신 오류",Toast.LENGTH_SHORT);
-             }
-         });
- 
-+        kor_call.enqueue(new Callback<OcrSpaceDto>() {
-+            @Override
-+            public void onResponse(Call<OcrSpaceDto> call, Response<OcrSpaceDto> response) {
-+                if(response.body().getParsedResults().get(0).getParsedText() != null) {
-+                    Log.d(TAG, "onResponse2: " + response.body().getParsedResults().get(0).getParsedText());
-+                    total_result += response.body().getParsedResults().get(0).getParsedText();
-+                    Log.d(TAG, "total_result: "+total_result);
-+                }
-+                else
-+                    Toast.makeText(getApplicationContext(),"한글 인식 불가",Toast.LENGTH_SHORT);
-+
-+            }
-+
-+            @Override
-+            public void onFailure(Call<OcrSpaceDto> call, Throwable t) {
-+                Log.d(TAG, "onFailureonFailure2: ");
-+            }
-+        });
- 
- 
-     }
-@@ -187,7 +227,27 @@
-             }
-         });
-     }
--    public static Bitmap rotateImage(Bitmap source, float angle) {
-+    private void SavePicture(Bitmap bitmap, String path){
-+        File file = new File(path);
-+        OutputStream out = null;
-+        try {
-+            file.createNewFile();
-+            out = new FileOutputStream(file);
-+            bitmap.compress(Bitmap.CompressFormat.JPEG,100,out);
-+
-+        } catch (IOException e) {
-+            e.printStackTrace();
-+        }finally {
-+            try {
-+                out.close();
-+            } catch (IOException e) {
-+                e.printStackTrace();
-+            }
-+        }
-+        Uploading_bitmap_front(file);
-+
-+    }
-+    public static Bitmap rotateImage(Bitmap source, float angle) { //사진 변환
-         Matrix matrix = new Matrix();
-         matrix.postRotate(angle);
-         return Bitmap.createBitmap(source, 0, 0, source.getWidth(), source.getHeight(),
-Index: .idea/gradle.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/gradle.xml	(revision 6a30f946611dfa621aed0d4bf978bb836a3dc027)
-+++ .idea/gradle.xml	(date 1605701481443)
-@@ -15,6 +15,7 @@
-           </set>
-         </option>
-         <option name="resolveModulePerSourceSet" value="false" />
-+        <option name="useQualifiedModuleNames" value="true" />
-       </GradleProjectSettings>
-     </option>
-   </component>
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-23_오후_10_42_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-23_오후_10_42_[Default_Changelist]/shelved.patch	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-23_오후_10_42_[Default_Changelist]/shelved.patch	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
@@ -1,25 +0,0 @@
-Index: app/src/main/java/com/example/smrpv2/ui/medicine/searchMed/Search_prescriptionActivity.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.smrpv2.ui.medicine.searchMed;\r\n\r\nimport android.app.ProgressDialog;\r\nimport android.content.Intent;\r\n\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Matrix;\r\nimport android.media.ExifInterface;\r\nimport android.net.Uri;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.Toast;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.FileProvider;\r\nimport androidx.recyclerview.widget.DividerItemDecoration;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport com.example.smrpv2.R;\r\nimport com.example.smrpv2.model.common.KaKaoResult;\r\nimport com.example.smrpv2.model.common.KakaoDto;\r\nimport com.example.smrpv2.model.Message;\r\nimport com.example.smrpv2.model.RegmedicineAsk;\r\nimport com.example.smrpv2.model.medicine_model.Prescriptionitem;\r\nimport com.example.smrpv2.model.prescription_model.RegMedicineList;\r\nimport com.example.smrpv2.model.prescription_model.User_Select;\r\nimport com.example.smrpv2.model.searchMed_model.MedicineInfoRsponDTO;\r\nimport com.example.smrpv2.model.user_model.UserInform;\r\nimport com.example.smrpv2.retrofit.RetrofitHelper;\r\nimport com.example.smrpv2.retrofit.RetrofitService_Server;\r\n\r\n\r\n\r\nimport java.io.File;\r\n\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\nimport java.io.Serializable;\r\nimport java.lang.reflect.Array;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport okhttp3.MediaType;\r\nimport okhttp3.MultipartBody;\r\nimport okhttp3.RequestBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\n/**\r\n *\r\n * 처방전 & 약 봉투 사진 찍고 그 결과 알려주는 Activity\r\n *\r\n */\r\npublic class Search_prescriptionActivity extends AppCompatActivity implements Serializable {\r\n    private static final int MAX_DIMENSION = 1080;//1080 //이미지 크기\r\n    private String imageFilePath,imageFileName; //저장된 사진경로 및 저장된 사진 이름\r\n    private ArrayList<Prescriptionitem> list; //구축 서버로 부터 받은 의약품 리스트\r\n    private ArrayList<String> itemseq_list;\r\n    private Button Btn_add;\r\n    private ImageView iv_back;\r\n\r\n\r\n    private File photoFile;\r\n    private Uri photoUri;\r\n    private HashMap<Integer, String> select_pill_list; //사용자 선택한 약 정보를 담는 hashmap\r\n    private PrescriptionAdapter prescriptionAdapter;\r\n    private RecyclerView recyclerView;\r\n\r\n\r\n    private boolean bool_end = false;\r\n    private ProgressDialog progressDialog;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_select_pill);\r\n\r\n        initView();\r\n\r\n        Btn_add.setOnClickListener(new View.OnClickListener() { //추가하기 버튼 누를시\r\n            @Override\r\n            public void onClick(View v) { //추가하기\r\n                if(select_pill_list.size()==0){ //선택한 약이 없을 경우\r\n                    Toast.makeText(getApplicationContext(),\"약을 선택해 주세요.\", Toast.LENGTH_SHORT).show();\r\n                }else{\r\n                    for(Map.Entry<Integer, String>elem : select_pill_list.entrySet())\r\n                        itemseq_list.add(elem.getValue());\r\n                    /**\r\n                     *\r\n                     * 서버 : 검색된 약 추가하기\r\n                     */\r\n\r\n                    RegMedicineList regMedicineList = new RegMedicineList(UserInform.getUserId(),itemseq_list);\r\n                    Log.d(\"TAG\", \"itemseq_list.size: \"+itemseq_list.size());\r\n                    Call<Message> call = RetrofitHelper.getRetrofitService_server().medicineListAdd(regMedicineList);\r\n                    call.enqueue(new Callback<Message>() {\r\n                        @Override\r\n                        public void onResponse(Call<Message> call, Response<Message> response) {\r\n                            Log.d(\"onResponse\", \"onResponse: \"+response.body().getResultCode());\r\n                            if(response.body().getResultCode().equals(\"OK\")){\r\n                                //정상적으로 반영\r\n                                Toast.makeText(getApplicationContext(), itemseq_list.size()+\"건을 등록하였습니다.\", Toast.LENGTH_SHORT).show();\r\n                                finish();\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onFailure(Call<Message> call, Throwable t) {\r\n\r\n                        }\r\n                    });\r\n                }\r\n\r\n\r\n            }\r\n        });\r\n        iv_back.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                onBackPressed();\r\n            }\r\n        });//뒤로가기\r\n\r\n        prescriptionAdapter.setOnClickListener(new PrescriptionAdapter.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(PrescriptionAdapter.ViewHolder holder, View v, int position) { //리스트 이벤트 처리\r\n\r\n                if(select_pill_list.size()==0){//사용자가 추가한 약 리스트가 없는 경우\r\n                    select_pill_list.put(position,list.get(position).getItemSeq());\r\n\r\n                }else{\r\n                    if(select_pill_list.get(position)==null){ //선택한 약이 hashmap에 없을경우\r\n                        select_pill_list.put(position,list.get(position).getItemSeq());\r\n                    }else{\r\n                        select_pill_list.remove(position);\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n\r\n        sendTakePhotoIntent();\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        if (requestCode == 672 && resultCode == RESULT_OK) {\r\n            Bitmap bitmap = BitmapFactory.decodeFile(imageFilePath);\r\n            ExifInterface exif = null;\r\n\r\n            try {\r\n                exif = new ExifInterface(imageFilePath);\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            int exifOrientation;\r\n            int exifDegree;\r\n\r\n            if (exif != null) {\r\n                exifOrientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);\r\n                exifDegree = exifOrientationToDegrees(exifOrientation);\r\n            } else {\r\n                exifDegree = 0;\r\n            }\r\n            Log.d(\"exifDegree\", \"exifDegree: \"+exifDegree);\r\n            Bitmap temp_bitmap = rotate(bitmap, exifDegree);\r\n            temp_bitmap = scaleBitmapDown(temp_bitmap, MAX_DIMENSION);\r\n            callKakaoVision(temp_bitmap);\r\n        }else if(resultCode==RESULT_OK){ //팝업창 종료시\r\n            finish();\r\n        }else\r\n            onBackPressed();\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n    }\r\n\r\n    private int exifOrientationToDegrees(int exifOrientation) { //회전된 사진을 정상으로 전환하기 위한 각도를 반환\r\n        if (exifOrientation == ExifInterface.ORIENTATION_ROTATE_90) {\r\n            return 90;\r\n        } else if (exifOrientation == ExifInterface.ORIENTATION_ROTATE_180) {\r\n            return 180;\r\n        } else if (exifOrientation == ExifInterface.ORIENTATION_ROTATE_270) {\r\n            return 270;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    private Bitmap rotate(Bitmap bitmap, float degree) {\r\n        Matrix matrix = new Matrix();\r\n        matrix.postRotate(degree);\r\n        return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);\r\n    }\r\n\r\n    private File createImageFile() throws IOException {\r\n        String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\r\n        imageFileName = \"TEST_\" + timeStamp + \"_\";\r\n        File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);\r\n        Log.d(\"TAG\", \"createImageFile: \");\r\n        File image = File.createTempFile(\r\n                imageFileName,      /* prefix */\r\n                \".jpg\",         /* suffix */\r\n                storageDir          /* directory */\r\n        );\r\n        Log.d(\"getAbsolutePath\", \"image.getAbsolutePath(): \"+image.getAbsolutePath());\r\n        //D/getAbsolutePath: image.getAbsolutePath(): /storage/emulated/0/Android/data/com.example.smrpv2/files/Pictures/TEST_20201121_215600_4975616491941498734.jpg\r\n        imageFilePath =  image.getAbsolutePath();\r\n        return image;\r\n    }\r\n    private void sendTakePhotoIntent() {\r\n        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);// 내장 카메라 켜기\r\n        if (takePictureIntent.resolveActivity(getPackageManager()) != null) {\r\n            photoFile = null;\r\n\r\n            try {\r\n                photoFile = createImageFile();\r\n                if (photoFile != null) {\r\n                    photoUri = FileProvider.getUriForFile(this, getPackageName(), photoFile);\r\n\r\n                    Log.d(\"TAG\", \"photoUri: \"+photoUri);\r\n                    takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);\r\n                    startActivityForResult(takePictureIntent, 672);\r\n                }\r\n            } catch (IOException ex) {\r\n                Log.d(\"TAG\",\"이미지 파일 생성 오류\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private Bitmap scaleBitmapDown(Bitmap bitmap, int maxDimension) { //카카오에서 승인한 2048 픽셀 내에 이미지 크기를 만들기위한 메소드\r\n\r\n        int originalWidth = bitmap.getWidth();\r\n        int originalHeight = bitmap.getHeight();\r\n        int resizedWidth = maxDimension;\r\n        int resizedHeight = maxDimension;\r\n        if (originalHeight > originalWidth) { // 촬영한 사진의 세로길이가 너비보다 크면\r\n            resizedHeight = maxDimension;\r\n            resizedWidth = (int) (resizedHeight * (float) originalWidth / (float) originalHeight);\r\n        } else if (originalWidth > originalHeight) {\r\n            resizedWidth = maxDimension;\r\n            resizedHeight = (int) (resizedWidth * (float) originalHeight / (float) originalWidth);\r\n        } else if (originalHeight == originalWidth) {\r\n            resizedHeight = maxDimension;\r\n            resizedWidth = maxDimension;\r\n        }\r\n        return Bitmap.createScaledBitmap(bitmap, resizedWidth, resizedHeight, false);\r\n    }\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { //내장 카메라 접근 권한 확인\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (Build.VERSION.SDK_INT >= 23) {\r\n            if(grantResults[0]== PackageManager.PERMISSION_GRANTED){\r\n\r\n            }\r\n        }\r\n    } //퍼미션 접근 권한\r\n\r\n    private void callKakaoVision(Bitmap bitmap){//카카오 ocr 통신\r\n        File file = new File(imageFilePath);\r\n        Log.d(\"TAG\", \"callKakaoVision: \"+file.getAbsolutePath());\r\n        Log.d(\"TAG\", \"imageFilePath: \"+imageFilePath);\r\n        Log.d(\"TAG\", \"imageFileName: \"+imageFileName);\r\n        String filename = imageFilePath.substring(imageFilePath.lastIndexOf('/')+1);\r\n        Log.d(\"TAG\", \"filename: \"+filename);\r\n        /*callKakaoVision: /storage/emulated/0/Android/data/com.example.smrpv2/files/Pictures/TEST_20201121_221858_1761386531960783592.jpg\r\n         imageFilePath: /storage/emulated/0/Android/data/com.example.smrpv2/files/Pictures/TEST_20201121_221858_1761386531960783592.jpg\r\n         imageFileName: TEST_20201121_221858_\r\n         filename: TEST_20201121_221858_1761386531960783592.jpg*/\r\n        OutputStream os = null;\r\n\r\n        try {\r\n            os = new FileOutputStream(file);\r\n            bitmap.compress(Bitmap.CompressFormat.JPEG,50,os);\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            try {\r\n                os.close();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n\r\n\r\n        RequestBody body = RequestBody.create(MediaType.parse(\"image/*\"), file);\r\n        MultipartBody.Part Part = MultipartBody.Part.createFormData(\"image\", filename, body);\r\n\r\n\r\n        Call<KakaoDto> call = RetrofitHelper.getKaKaoOcr().create(RetrofitService_Server.class).sendKakaoOcr(Part);\r\n        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);\r\n        progressDialog.setMessage(\"분석중입니다.\\n잠시만 기다려 주십시오.\");\r\n        progressDialog.show();\r\n        call.enqueue(new Callback<KakaoDto>() {\r\n            @Override\r\n            public void onResponse(Call<KakaoDto> call, Response<KakaoDto> response) {\r\n                assert response.body() != null;\r\n                String[] word_array = new String[response.body().getResult().size()];\r\n                int count = 0;\r\n                if(response.body()!=null){\r\n                    for (int i = 0; i <response.body().getResult().size() ; i++) {\r\n                        KaKaoResult kaKaoResult = response.body().getResult().get(i);\r\n                        for( int j = 0 ; j <kaKaoResult.getRecognition_words().length;j++){\r\n                            word_array[count++] = kaKaoResult.getRecognition_words()[j];\r\n                        }\r\n\r\n                    }\r\n                    SendOcrdata(word_array);\r\n                }else{ //인식된 글자가 없을경우\r\n                    Toast.makeText(getApplicationContext(),\"인식된 문자가 없습니다. 이전 페이지로 이동합니다.\",Toast.LENGTH_SHORT).show();\r\n                    onBackPressed();\r\n                    finish();\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<KakaoDto> call, Throwable t) {\r\n                Log.d(\"실패카카오\", t.toString());\r\n            }\r\n        });\r\n    }\r\n\r\n    private void SendOcrdata(String[] array){\r\n\r\n\r\n        Call<ArrayList<MedicineInfoRsponDTO>> call = RetrofitHelper.getRetrofitService_server().sendWords(array);\r\n        call.enqueue(new Callback<ArrayList<MedicineInfoRsponDTO>>() {\r\n            @Override\r\n            public void onResponse(Call<ArrayList<MedicineInfoRsponDTO>> call, Response<ArrayList<MedicineInfoRsponDTO>> response) {\r\n\r\n                for(int i = 0 ; i < response.body().size();i++){\r\n                    MedicineInfoRsponDTO dto = response.body().get(i);\r\n                    list.add(new Prescriptionitem(dto.getItemSeq(),dto.getItemImage(),dto.getItemName(),dto.getEntpName(),dto.getEtcOtcName()));//약 식별번호 / 약 이미지 / 약 이름 / 약 제조사 / 약 포장 /약 의약품정보(일반, 전문)\r\n                    prescriptionAdapter.notifyDataSetChanged();\r\n                }\r\n                LinearLayoutManager mlinearLayoutManager = new LinearLayoutManager(getApplicationContext());\r\n                DividerItemDecoration dividerItemDecoration = new DividerItemDecoration(recyclerView.getContext(), mlinearLayoutManager.getOrientation());//구분선을 넣기 위함\r\n                recyclerView.addItemDecoration(dividerItemDecoration);\r\n                progressDialog.dismiss();\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<ArrayList<MedicineInfoRsponDTO>> call, Throwable t) {\r\n                Toast.makeText(getApplicationContext(),\"분석 결과가 없습니다. 이전 페이지로 이동합니다.\",Toast.LENGTH_SHORT).show();\r\n                progressDialog.dismiss();\r\n            }\r\n        });\r\n    }\r\n    private class Dialog extends AsyncTask<Void, Void, Void> {\r\n        ProgressDialog progressDialog1 = new ProgressDialog(Search_prescriptionActivity.this);\r\n        @Override\r\n        protected void onPreExecute() {\r\n            progressDialog1.setProgressStyle(ProgressDialog.STYLE_SPINNER);\r\n            progressDialog1.setMessage(\"로딩중입니다..\");\r\n\r\n            progressDialog1.show();\r\n            super.onPreExecute();\r\n        }\r\n        @Override\r\n        protected Void doInBackground(Void... voids) {\r\n            while(!bool_end)\r\n                ;\r\n            bool_end = false;\r\n            return null;\r\n        }\r\n        @Override\r\n        protected void onPostExecute(Void result) {\r\n            progressDialog1.dismiss();\r\n            super.onPostExecute(result);\r\n        }\r\n        @Override\r\n        protected void onCancelled() {\r\n            super.onCancelled();\r\n        }\r\n    }\r\n\r\n\r\n    private void initView(){\r\n        Btn_add = findViewById(R.id.add_btn);\r\n        iv_back = findViewById(R.id.iv_back);\r\n        select_pill_list = new HashMap<Integer, String>();\r\n        itemseq_list = new ArrayList<String>();\r\n        list = new ArrayList<Prescriptionitem>();\r\n        prescriptionAdapter = new PrescriptionAdapter(list);\r\n        recyclerView = findViewById(R.id.recycler_list);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(getApplicationContext()));\r\n        recyclerView.setAdapter(prescriptionAdapter);\r\n        progressDialog = new ProgressDialog(this);\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/smrpv2/ui/medicine/searchMed/Search_prescriptionActivity.java	(revision 1935bf194d26bd1e33263f2d1703aa8f36aa69f5)
-+++ app/src/main/java/com/example/smrpv2/ui/medicine/searchMed/Search_prescriptionActivity.java	(date 1606060616567)
-@@ -15,6 +15,7 @@
- import android.os.Environment;
- import android.provider.MediaStore;
- import android.util.Log;
-+import android.view.ContextMenu;
- import android.view.View;
- import android.widget.Button;
- import android.widget.ImageView;
-@@ -158,6 +159,7 @@
- 
-     }
- 
-+
-     @Override
-     protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-         if (requestCode == 672 && resultCode == RESULT_OK) {
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-23__3_13__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-23__3_13__Default_Changelist_.xml	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-23__3_13__Default_Changelist_.xml	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2020-11-23_오후_3_13_[Default_Changelist]" date="1606112100466" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2020-11-23_오후_3_13_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2020-11-23 오후 3:13 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-21__5_07__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-21__5_07__Default_Changelist_.xml	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-21__5_07__Default_Changelist_.xml	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2020-11-21_오후_5_07_[Default_Changelist]" date="1605946046143" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2020-11-21_오후_5_07_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2020-11-21 오후 5:07 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-23__10_42__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-23__10_42__Default_Changelist_.xml	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_2020-11-23__10_42__Default_Changelist_.xml	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2020-11-23_오후_10_42_[Default_Changelist]" date="1606138934863" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2020-11-23_오후_10_42_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2020-11-23 오후 10:42 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_home.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\"\r\n    android:background=\"#F9F9F9\"\r\n    >\r\n\r\n    <androidx.core.widget.NestedScrollView\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:fillViewport=\"true\">\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:orientation=\"vertical\">\r\n            <View\r\n                android:layout_alignParentTop=\"true\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"1dp\"\r\n                android:layout_marginTop=\"8dp\"\r\n                android:background=\"#989898\"\r\n                />\r\n\r\n            <LinearLayout\r\n\r\n                android:id=\"@+id/date\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"70dp\"\r\n                android:background=\"#ECF1FF\"\r\n                android:orientation=\"horizontal\">\r\n                <TableLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_gravity=\"center\"\r\n                    android:stretchColumns=\"*\"\r\n                    android:gravity=\"center\">\r\n\r\n                    <TableRow>\r\n\r\n                        <TextView\r\n                            android:text=\"확진환자\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:textColor=\"#FF0404\" />\r\n                        <TextView\r\n                            android:text=\"검사중\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:textColor=\"#FF9800\" />\r\n                        <TextView\r\n                            android:text=\"격리해제\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:textColor=\"#0021F8\" />\r\n                        <TextView\r\n                            android:text=\"사망자\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:textColor=\"#000000\" />\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <View\r\n                            android:layout_alignParentTop=\"true\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"0dp\"\r\n                            android:layout_marginTop=\"5sp\"\r\n                            android:background=\"#989898\"\r\n                            />\r\n                    </TableRow>\r\n                    <TableRow>\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/covidresult_TextView1\"\r\n                            android:text=\"확진환자 수\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:gravity=\"center\"\r\n                            android:textSize=\"18sp\"\r\n                            android:textColor=\"#FF0404\" />\r\n                        <TextView\r\n                            android:id=\"@+id/covidresult_TextView2\"\r\n                            android:text=\"검사중인 수\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:gravity=\"center\"\r\n                            android:textSize=\"18sp\"\r\n                            android:textColor=\"#FF9800\" />\r\n                        <TextView\r\n                            android:id=\"@+id/covidresult_TextView3\"\r\n                            android:text=\"격리해제 수\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:gravity=\"center\"\r\n                            android:textSize=\"18sp\"\r\n                            android:textColor=\"#0021F8\" />\r\n                        <TextView\r\n                            android:id=\"@+id/covidresult_TextView4\"\r\n                            android:text=\"사망자 수\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:gravity=\"center\"\r\n                            android:textSize=\"18sp\"\r\n                            android:textColor=\"#000000\" />\r\n                    </TableRow>\r\n                    <TableRow>\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/gap_TextView1\"\r\n                            android:text=\"확진환자 격차\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:gravity=\"center\"\r\n                            android:textSize=\"11sp\"\r\n                            android:textColor=\"#FF0404\" />\r\n                        <TextView\r\n                            android:id=\"@+id/gap_TextView2\"\r\n                            android:text=\"검사중인 격차\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:gravity=\"center\"\r\n                            android:textSize=\"11sp\"\r\n                            android:textColor=\"#FF9800\" />\r\n                        <TextView\r\n                            android:id=\"@+id/gap_TextView3\"\r\n                            android:text=\"격리해제 격차\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:gravity=\"center\"\r\n                            android:textSize=\"11sp\"\r\n                            android:textColor=\"#0021F8\" />\r\n                        <TextView\r\n                            android:id=\"@+id/gap_TextView4\"\r\n                            android:text=\"사망자 격차\"\r\n                            android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"\r\n                            android:layout_gravity=\"center\"\r\n                            android:gravity=\"center\"\r\n                            android:textSize=\"11sp\"\r\n                            android:textColor=\"#000000\" />\r\n                    </TableRow>\r\n\r\n            </TableLayout>\r\n\r\n\r\n    <!-- <RelativeLayout\r\n         android:layout_width=\"wrap_content\"\r\n         android:layout_height=\"match_parent\"\r\n         android:layout_gravity=\"center\"\r\n         android:gravity=\"right\">\r\n\r\n\r\n\r\n\r\n     </RelativeLayout>-->\r\n            </LinearLayout>\r\n            <View\r\n                android:layout_below=\"@+id/date\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"1dp\"\r\n                android:background=\"#C7C7C7\"\r\n                />\r\n            <LinearLayout\r\n                android:layout_marginTop=\"16dp\"\r\n                android:id=\"@+id/viewP\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:orientation=\"vertical\"\r\n                android:layout_below=\"@+id/date\"\r\n                android:background=\"#F9F9F9\"\r\n\r\n                >\r\n\r\n                <androidx.viewpager.widget.ViewPager\r\n                    android:id=\"@+id/banner\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:background=\"#F9F9F9\"\r\n                    />\r\n\r\n\r\n\r\n            </LinearLayout>\r\n\r\n            <me.relex.circleindicator.CircleIndicator\r\n                android:id=\"@+id/indicator_home\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"7dp\"\r\n                android:layout_below=\"@+id/viewP\"\r\n                android:layout_marginTop=\"7dp\"\r\n\r\n                app:ci_drawable=\"@drawable/indicator_home\"\r\n                app:ci_height=\"5dp\"\r\n                app:ci_margin=\"4dp\"\r\n                app:ci_width=\"5dp\"\r\n                />\r\n\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/vP\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_marginTop=\"10dp\"\r\n                android:layout_below=\"@+id/indicator_home\"\r\n                android:layout_height=\"wrap_content\">\r\n\r\n                <androidx.viewpager.widget.ViewPager\r\n                    android:id=\"@+id/banner2\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_below=\"@+id/Lst_line\"\r\n\r\n                    />\r\n            </LinearLayout>\r\n\r\n            <me.relex.circleindicator.CircleIndicator\r\n                android:id=\"@+id/indicator_home2\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"7dp\"\r\n                android:layout_above=\"@+id/row\"\r\n                android:layout_marginTop=\"4dp\"\r\n                android:layout_marginBottom=\"4dp\"\r\n                app:ci_drawable=\"@drawable/indicator\"\r\n                app:ci_height=\"5dp\"\r\n                app:ci_margin=\"4dp\"\r\n                app:ci_width=\"5dp\"\r\n                />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/row\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"180dp\"\r\n                android:layout_weight=\"4\"\r\n                android:orientation=\"vertical\"\r\n                android:weightSum=\"2\"\r\n                android:layout_below=\"@+id/vP\"\r\n\r\n                >\r\n\r\n                <TextView\r\n                    android:id=\"@+id/Txt_menu\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"11dp\"\r\n                    android:layout_below=\"@+id/banner2\"\r\n                    android:layout_marginTop=\"18dp\"\r\n                    android:layout_marginStart=\"8dp\"\r\n                    android:text=\"추가 메뉴\"\r\n                    android:textColor=\"#3E3E3E\"\r\n                    android:textSize=\"8sp\"\r\n                    android:textStyle=\"bold\" />\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/first_row\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"49dp\"\r\n                    android:layout_below=\"@+id/Txt_menu\"\r\n                    android:layout_marginTop=\"16dp\"\r\n\r\n\r\n                    android:gravity=\"center\"\r\n\r\n                    >\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ic_med_search\"\r\n                        android:layout_width=\"46dp\"\r\n                        android:layout_height=\"48dp\"\r\n\r\n                        android:src=\"@drawable/ic_med_search\" />\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ic_prescription_register\"\r\n                        android:layout_width=\"56dp\"\r\n                        android:layout_height=\"48dp\"\r\n                        android:layout_marginStart=\"15dp\"\r\n                        android:src=\"@drawable/ic_prescription_register\" />\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ic_envelope_register\"\r\n                        android:layout_width=\"56dp\"\r\n                        android:layout_height=\"48dp\"\r\n                        android:layout_marginStart=\"10dp\"\r\n                        android:src=\"@drawable/ic_envelope_register\" />\r\n\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ic_alarm_set\"\r\n                        android:layout_width=\"46dp\"\r\n                        android:layout_height=\"47dp\"\r\n                        android:layout_marginStart=\"20dp\"\r\n                        android:src=\"@drawable/ic_alarm_set\" />\r\n\r\n\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/second_row\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"50dp\"\r\n                    android:layout_marginBottom=\"4dp\"\r\n                    android:layout_marginTop=\"12dp\"\r\n                    android:gravity=\"center\"\r\n\r\n                    >\r\n                    <ImageView\r\n                        android:id=\"@+id/ic_pharmacy_search\"\r\n                        android:layout_width=\"42dp\"\r\n                        android:layout_height=\"48dp\"\r\n\r\n                        android:src=\"@drawable/ic_pharmacy_seach\" />\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ic_hospital_search\"\r\n                        android:layout_width=\"42dp\"\r\n                        android:layout_height=\"49dp\"\r\n                        android:layout_marginStart=\"24dp\"\r\n                        android:src=\"@drawable/ic_hospital_seach\" />\r\n                    <ImageView\r\n                        android:id=\"@+id/ic_register_record\"\r\n                        android:layout_width=\"42dp\"\r\n                        android:layout_height=\"50dp\"\r\n                        android:layout_marginStart=\"28dp\"\r\n                        android:src=\"@drawable/ic_register_record\" />\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ic_dose_record\"\r\n                        android:layout_width=\"46dp\"\r\n                        android:layout_height=\"49dp\"\r\n                        android:layout_marginStart=\"28dp\"\r\n                        android:src=\"@drawable/ic_dose_record\" />\r\n\r\n\r\n\r\n                </LinearLayout>\r\n\r\n            </LinearLayout>\r\n\r\n\r\n\r\n        </RelativeLayout>\r\n\r\n\r\n    </androidx.core.widget.NestedScrollView>\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_home.xml	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
+++ app/src/main/res/layout/fragment_home.xml	(date 1606570570210)
@@ -42,21 +42,25 @@
                             android:text="확진환자"
                             android:textAppearance="@style/TextAppearance.AppCompat.Body1"
                             android:layout_gravity="center"
+                            android:textSize="12sp"
                             android:textColor="#FF0404" />
                         <TextView
                             android:text="검사중"
                             android:textAppearance="@style/TextAppearance.AppCompat.Body1"
                             android:layout_gravity="center"
+                            android:textSize="12sp"
                             android:textColor="#FF9800" />
                         <TextView
                             android:text="격리해제"
                             android:textAppearance="@style/TextAppearance.AppCompat.Body1"
                             android:layout_gravity="center"
+                            android:textSize="12sp"
                             android:textColor="#0021F8" />
                         <TextView
                             android:text="사망자"
                             android:textAppearance="@style/TextAppearance.AppCompat.Body1"
                             android:layout_gravity="center"
+                            android:textSize="12sp"
                             android:textColor="#000000" />
                     </TableRow>
                     <TableRow>
@@ -76,7 +80,7 @@
                             android:textAppearance="@style/TextAppearance.AppCompat.Body1"
                             android:layout_gravity="center"
                             android:gravity="center"
-                            android:textSize="18sp"
+                            android:textSize="16sp"
                             android:textColor="#FF0404" />
                         <TextView
                             android:id="@+id/covidresult_TextView2"
@@ -84,7 +88,7 @@
                             android:textAppearance="@style/TextAppearance.AppCompat.Body1"
                             android:layout_gravity="center"
                             android:gravity="center"
-                            android:textSize="18sp"
+                            android:textSize="16sp"
                             android:textColor="#FF9800" />
                         <TextView
                             android:id="@+id/covidresult_TextView3"
@@ -92,7 +96,7 @@
                             android:textAppearance="@style/TextAppearance.AppCompat.Body1"
                             android:layout_gravity="center"
                             android:gravity="center"
-                            android:textSize="18sp"
+                            android:textSize="16sp"
                             android:textColor="#0021F8" />
                         <TextView
                             android:id="@+id/covidresult_TextView4"
@@ -100,7 +104,7 @@
                             android:textAppearance="@style/TextAppearance.AppCompat.Body1"
                             android:layout_gravity="center"
                             android:gravity="center"
-                            android:textSize="18sp"
+                            android:textSize="16sp"
                             android:textColor="#000000" />
                     </TableRow>
                     <TableRow>
@@ -111,7 +115,7 @@
                             android:textAppearance="@style/TextAppearance.AppCompat.Body1"
                             android:layout_gravity="center"
                             android:gravity="center"
-                            android:textSize="11sp"
+                            android:textSize="8sp"
                             android:textColor="#FF0404" />
                         <TextView
                             android:id="@+id/gap_TextView2"
@@ -119,7 +123,7 @@
                             android:textAppearance="@style/TextAppearance.AppCompat.Body1"
                             android:layout_gravity="center"
                             android:gravity="center"
-                            android:textSize="11sp"
+                            android:textSize="8sp"
                             android:textColor="#FF9800" />
                         <TextView
                             android:id="@+id/gap_TextView3"
@@ -127,7 +131,7 @@
                             android:textAppearance="@style/TextAppearance.AppCompat.Body1"
                             android:layout_gravity="center"
                             android:gravity="center"
-                            android:textSize="11sp"
+                            android:textSize="8sp"
                             android:textColor="#0021F8" />
                         <TextView
                             android:id="@+id/gap_TextView4"
@@ -135,7 +139,7 @@
                             android:textAppearance="@style/TextAppearance.AppCompat.Body1"
                             android:layout_gravity="center"
                             android:gravity="center"
-                            android:textSize="11sp"
+                            android:textSize="8sp"
                             android:textColor="#000000" />
                     </TableRow>
 
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\nbuildscript {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        maven {\r\n            url 'https://maven.google.com/'\r\n            name 'Google'\r\n        }\r\n    }\r\n    dependencies {\r\n        classpath \"com.android.tools.build:gradle:4.0.1\"\r\n\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        maven { url 'http://devrepo.kakao.com:8088/nexus/content/groups/public/' }\r\n        maven {\r\n            url 'https://maven.google.com/'\r\n            name 'Google'\r\n        }\r\n        mavenCentral()\r\n    }\r\n    subprojects {\r\n        repositories {\r\n            mavenCentral()\r\n\r\n        }\r\n    }\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
+++ build.gradle	(date 1606570570217)
@@ -9,7 +9,7 @@
         }
     }
     dependencies {
-        classpath "com.android.tools.build:gradle:4.0.1"
+        classpath 'com.android.tools.build:gradle:4.1.0'
 
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Tue Sep 08 23:57:33 KST 2020\r\ndistributionBase=GRADLE_USER_HOME\r\ndistributionPath=wrapper/dists\r\nzipStoreBase=GRADLE_USER_HOME\r\nzipStorePath=wrapper/dists\r\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-6.1.1-all.zip\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>x-windows-949
===================================================================
--- gradle/wrapper/gradle-wrapper.properties	(revision f87c326067564c8a49f9aa71b9824b069066ea8f)
+++ gradle/wrapper/gradle-wrapper.properties	(date 1606570570224)
@@ -1,6 +1,6 @@
-#Tue Sep 08 23:57:33 KST 2020
+#Thu Nov 26 15:04:31 KST 2020
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.1.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.5-bin.zip
